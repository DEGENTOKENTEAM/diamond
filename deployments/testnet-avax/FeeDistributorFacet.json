{
  "address": "0x074B9710036e648AfD858f947e3E6aAb2CC8d087",
  "abi": [
    {
      "inputs": [],
      "name": "AlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedStartMissingShares",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSwapPath",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MissingData",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ReceiverNotExisting",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongData",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroValueNotAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "BountyDisabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "BountyEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "BountyPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "BountyPaidFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "share",
          "type": "uint64"
        }
      ],
      "name": "BountyShareUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "DisableBountyInToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Distributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "DistributionStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "DistributionStopped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "EnableBountyInToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountInWei",
          "type": "uint256"
        }
      ],
      "name": "PushFeesGasCompensationForCallerUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "points",
          "type": "uint64"
        }
      ],
      "name": "ReceiverAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "ReceiverRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "TriggerDistributionWhileNotRunning",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "receivers",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint64[]",
          "name": "shares",
          "type": "uint64[]"
        }
      ],
      "name": "UpdatedDistributionShares",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint64",
              "name": "points",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "swapPath",
              "type": "address[]"
            }
          ],
          "internalType": "struct AddReceiverParams",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "addFeeDistributionReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableFeeDistributorBounty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_bountyInToken",
          "type": "bool"
        }
      ],
      "name": "enableBountyInToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableFeeDistributorBounty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeeDistributorBountyShare",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "_share",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeeDistributorLastBounty",
      "outputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_payout",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeeDistributorQueue",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalFees",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "bountyReceiver",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "id",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct FeeConfigSyncHomeFees[]",
              "name": "fees",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct FeeConfigSyncHomeDTO[]",
          "name": "_queue",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeeDistributorReceivers",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint64",
              "name": "points",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "swap",
              "type": "address[]"
            }
          ],
          "internalType": "struct FeeDistributorFacet.Share[]",
          "name": "_shares",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeeDistributorTotalBounties",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_totalBounties",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeeDistributorTotalPoints",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "_totalPoints",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_baseToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nativeWrapper",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_bountyShare",
          "type": "uint64"
        }
      ],
      "name": "initFeeDistributorFacet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isFeeDistributorBountyActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_is",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isFeeDistributorBountyInToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_is",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isFeeDistributorRunning",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_is",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalFees",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "bountyReceiver",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "id",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct FeeConfigSyncHomeFees[]",
              "name": "fees",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct FeeConfigSyncHomeDTO",
          "name": "_dto",
          "type": "tuple"
        }
      ],
      "name": "pushFees",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "removeFeeDistributionReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_share",
          "type": "uint64"
        }
      ],
      "name": "setFeeDistributorBountyShare",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountInWei",
          "type": "uint256"
        }
      ],
      "name": "setPushFeesGasCompensationForCaller",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startFeeDistribution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stopFeeDistribution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_receivers",
          "type": "address[]"
        },
        {
          "internalType": "uint64[]",
          "name": "_shares",
          "type": "uint64[]"
        }
      ],
      "name": "updateFeeDistributionShares",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0f84892dfd2e08bf112f44e2e904b0a0d2b4e681a5ff6372a1955efab3c1be18",
  "receipt": {
    "to": null,
    "from": "0x2fcb9d07eD31874f5fe6da6de315B3b28Dd0aD10",
    "contractAddress": "0x074B9710036e648AfD858f947e3E6aAb2CC8d087",
    "transactionIndex": 0,
    "gasUsed": "4082489",
    "logsBloom": "0x
    "blockHash": "0xdcbb5a5812bc060f915be387b2bfb04187db8e05165bb6f095f831fb37127c5e",
    "transactionHash": "0x0f84892dfd2e08bf112f44e2e904b0a0d2b4e681a5ff6372a1955efab3c1be18",
    "logs": [],
    "blockNumber": 28166732,
    "cumulativeGasUsed": "4082489",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "622d38e7c06afa510ced6957bca4ce10",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedStartMissingShares\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSwapPath\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MissingData\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ReceiverNotExisting\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroValueNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BountyDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BountyEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"BountyPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"BountyPaidFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"share\",\"type\":\"uint64\"}],\"name\":\"BountyShareUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DisableBountyInToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Distributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DistributionStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DistributionStopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EnableBountyInToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountInWei\",\"type\":\"uint256\"}],\"name\":\"PushFeesGasCompensationForCallerUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"points\",\"type\":\"uint64\"}],\"name\":\"ReceiverAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ReceiverRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TriggerDistributionWhileNotRunning\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"shares\",\"type\":\"uint64[]\"}],\"name\":\"UpdatedDistributionShares\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"points\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"swapPath\",\"type\":\"address[]\"}],\"internalType\":\"struct AddReceiverParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"addFeeDistributionReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableFeeDistributorBounty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_bountyInToken\",\"type\":\"bool\"}],\"name\":\"enableBountyInToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableFeeDistributorBounty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeDistributorBountyShare\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"_share\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeDistributorLastBounty\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_payout\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeDistributorQueue\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalFees\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bountyReceiver\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct FeeConfigSyncHomeFees[]\",\"name\":\"fees\",\"type\":\"tuple[]\"}],\"internalType\":\"struct FeeConfigSyncHomeDTO[]\",\"name\":\"_queue\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeDistributorReceivers\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"points\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"swap\",\"type\":\"address[]\"}],\"internalType\":\"struct FeeDistributorFacet.Share[]\",\"name\":\"_shares\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeDistributorTotalBounties\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalBounties\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeDistributorTotalPoints\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"_totalPoints\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nativeWrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_bountyShare\",\"type\":\"uint64\"}],\"name\":\"initFeeDistributorFacet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFeeDistributorBountyActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_is\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFeeDistributorBountyInToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_is\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFeeDistributorRunning\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_is\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalFees\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bountyReceiver\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct FeeConfigSyncHomeFees[]\",\"name\":\"fees\",\"type\":\"tuple[]\"}],\"internalType\":\"struct FeeConfigSyncHomeDTO\",\"name\":\"_dto\",\"type\":\"tuple\"}],\"name\":\"pushFees\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removeFeeDistributionReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_share\",\"type\":\"uint64\"}],\"name\":\"setFeeDistributorBountyShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountInWei\",\"type\":\"uint256\"}],\"name\":\"setPushFeesGasCompensationForCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startFeeDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopFeeDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint64[]\",\"name\":\"_shares\",\"type\":\"uint64[]\"}],\"name\":\"updateFeeDistributionShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Daniel <danieldegendev@gmail.com>\",\"custom:version\":\"1.0.0\",\"kind\":\"dev\",\"methods\":{\"addFeeDistributionReceiver((string,uint64,address,address[]))\":{\"details\":\"swapPath[] needs to have the base token address on position 0This method also checks if there is a valid swap path existing, otherwise it will be reverted by the aggregatoronly available to FEE_DISTRIBUTIOR_MANAGER role\",\"params\":{\"_params\":\"contains the name, points, account address und swapPath for the receiver\"}},\"disableFeeDistributorBounty()\":{\"details\":\"Disables the bounty possibilityonly available to FEE_DISTRIBUTIOR_MANAGER role\"},\"enableBountyInToken(bool)\":{\"details\":\"only available to FEE_DISTRIBUTIOR_MANAGER role\",\"params\":{\"_bountyInToken\":\"flag if enabled or not\"}},\"enableFeeDistributorBounty()\":{\"details\":\"Enables the bounty possibilityonly available to FEE_DISTRIBUTIOR_MANAGER role\"},\"getFeeDistributorBountyShare()\":{\"details\":\"Gets the bounty share\",\"returns\":{\"_share\":\"current bounty share\"}},\"getFeeDistributorLastBounty()\":{\"details\":\"Gets last bounty information\",\"returns\":{\"_payout\":\"amount being paid to recent receiver\",\"_receiver\":\"address of recent receiver\"}},\"getFeeDistributorQueue()\":{\"details\":\"Gets all items in queue\",\"returns\":{\"_queue\":\"array of sync items\"}},\"getFeeDistributorReceivers()\":{\"details\":\"Gets all shares\",\"returns\":{\"_shares\":\"array of configured shares\"}},\"getFeeDistributorTotalBounties()\":{\"details\":\"Gets the total bounties being paid\",\"returns\":{\"_totalBounties\":\"total bounties\"}},\"getFeeDistributorTotalPoints()\":{\"details\":\"Gets the current total points of all shares\",\"returns\":{\"_totalPoints\":\"points\"}},\"initFeeDistributorFacet(address,address,address,uint64)\":{\"details\":\"only available to DEPLOYER_ROLE\",\"params\":{\"_baseToken\":\"address of the expected token we get from the bridge\",\"_bountyShare\":\"share of bounty  (10000 = 1%, 1000 = 0.1%)\",\"_nativeWrapper\":\"address of native wrapper token on the operating chain\",\"_router\":\"uniswap v2 based router\"}},\"isFeeDistributorBountyActive()\":{\"details\":\"check whether the bounty is active of not\",\"returns\":{\"_is\":\"if true, it's on\"}},\"isFeeDistributorBountyInToken()\":{\"details\":\"check whether the distributors bounty is paid in the token or not\",\"returns\":{\"_is\":\"if true, it's paid in token\"}},\"isFeeDistributorRunning()\":{\"details\":\"check whether the distributor is running of not\",\"returns\":{\"_is\":\"if true, it's on\"}},\"pushFees(address,uint256,(uint256,address,(bytes32,uint256)[]))\":{\"details\":\"an updated dto needs to be created since the receiving amount is not      matching the sent amount anymore. The contract will 100% receive the      _token _amount before being executedonly available to FEE_DISTRIBUTOR_PUSH_ROLE roleif the token doesn't match, it will fail.\",\"params\":{\"_amount\":\"amount of tokens being received\",\"_dto\":\"the dto of the fee store to determine the split of _amount\",\"_token\":\"the token address being received\"}},\"removeFeeDistributionReceiver(address)\":{\"details\":\"only available to FEE_DISTRIBUTIOR_MANAGER role\",\"params\":{\"_account\":\"address of the receiver\"}},\"setFeeDistributorBountyShare(uint64)\":{\"details\":\"only available to FEE_DISTRIBUTIOR_MANAGER role\",\"params\":{\"_share\":\"share of the bounty\"}},\"setPushFeesGasCompensationForCaller(uint256)\":{\"details\":\"only available to FEE_DISTRIBUTIOR_MANAGER role\",\"params\":{\"_amountInWei\":\"share of the bounty\"}},\"startFeeDistribution()\":{\"details\":\"It will be also check if the bounties are being activated and if there are already fees in the queue to process. If so, it'll be process on activating the fee distribution.only available to FEE_DISTRIBUTIOR_MANAGER role\"},\"stopFeeDistribution()\":{\"details\":\"only available to FEE_DISTRIBUTIOR_MANAGER role\"},\"updateFeeDistributionShares(address[],uint64[])\":{\"details\":\"if a receiver is not existing, it'll be revertedonly available to FEE_DISTRIBUTIOR_MANAGER role\",\"params\":{\"_receivers\":\"array of existing receivers\",\"_shares\":\"array of new shares to be set\"}}},\"title\":\"Fee Distributor Facet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addFeeDistributionReceiver((string,uint64,address,address[]))\":{\"notice\":\"Adds a fee receiver\"},\"enableBountyInToken(bool)\":{\"notice\":\"Enables  or disables the bountyInToken flag based on the given parameter\"},\"initFeeDistributorFacet(address,address,address,uint64)\":{\"notice\":\"Initializes the facet\"},\"pushFees(address,uint256,(uint256,address,(bytes32,uint256)[]))\":{\"notice\":\"Pushes the fee to the desired receivers\"},\"removeFeeDistributionReceiver(address)\":{\"notice\":\"Removes a receiver based on the receiver address\"},\"setFeeDistributorBountyShare(uint64)\":{\"notice\":\"Sets the share of the bounty\"},\"setPushFeesGasCompensationForCaller(uint256)\":{\"notice\":\"Sets the gas compensation for the caller of the push fee method\"},\"startFeeDistribution()\":{\"notice\":\"Starts the fee distribution\"},\"stopFeeDistribution()\":{\"notice\":\"Stops the fee distribution\"},\"updateFeeDistributionShares(address[],uint64[])\":{\"notice\":\"Updates the shares of existing receivers\"}},\"notice\":\"It is responsible for distributing received fees to its configured receivers\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/diamond/facets/FeeDistributorFacet.sol\":\"FeeDistributorFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/diamond/facets/FeeDistributorFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.19;\\n\\nimport { IERC20, SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport { IFeeDistributorFacet } from \\\"./../interfaces/IFeeDistributorFacet.sol\\\";\\nimport { IDepositable } from \\\"./../interfaces/IDepositable.sol\\\";\\nimport { IRouter02 } from \\\"./../interfaces/IRouter02.sol\\\";\\nimport { IWAVAX } from \\\"./../interfaces/IWAVAX.sol\\\";\\nimport { LibAccessControlEnumerable } from \\\"./../libraries/LibAccessControlEnumerable.sol\\\";\\nimport { LibFeeManagerStorage } from \\\"./../libraries/LibFeeManagerStorage.sol\\\";\\nimport { LibFeeManager } from \\\"./../libraries/LibFeeManager.sol\\\";\\nimport { FeeConfig, FeeConfigSyncHomeDTO, FeeConfigSyncHomeFees, AddReceiverParams } from \\\"./../helpers/Structs.sol\\\";\\nimport { AlreadyInitialized, ZeroValueNotAllowed } from \\\"./../helpers/GenericErrors.sol\\\";\\nimport { Constants } from \\\"./../helpers/Constants.sol\\\";\\n\\n/// @title Fee Distributor Facet\\n/// @author Daniel <danieldegendev@gmail.com>\\n/// @notice It is responsible for distributing received fees to its configured receivers\\n/// @custom:version 1.0.0\\ncontract FeeDistributorFacet is IFeeDistributorFacet {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using Address for address payable;\\n\\n    bytes32 constant STORAGE_NAMESPACE = keccak256(\\\"degenx.fee-distributor.storage.v1\\\");\\n\\n    event ReceiverAdded(address account, uint64 points);\\n    event ReceiverRemoved(address account);\\n    event DistributionStarted();\\n    event DistributionStopped();\\n    event TriggerDistributionWhileNotRunning();\\n    event Distributed(address account, uint256 amount);\\n    event UpdatedDistributionShares(address[] receivers, uint64[] shares);\\n    event BountyEnabled();\\n    event BountyDisabled();\\n    event BountyShareUpdated(uint64 share);\\n    event PushFeesGasCompensationForCallerUpdate(uint256 amountInWei);\\n    event BountyPaid(uint256 amount, address receiver);\\n    event BountyPaidFailed(uint256 amount, address receiver);\\n    event EnableBountyInToken();\\n    event DisableBountyInToken();\\n\\n    error ReceiverNotExisting(address receiver);\\n    error WrongData();\\n    error WrongToken();\\n    error MissingData();\\n    error FailedStartMissingShares();\\n    error InvalidSwapPath();\\n\\n    /// @param name the name of the fee share for the UI\\n    /// @param points the fee share points\\n    /// @param receiver the receiver of the fee share\\n    /// @param swap a dedicated swapping path for the fee share\\n    struct Share {\\n        string name;\\n        uint64 points;\\n        address receiver;\\n        address[] swap;\\n    }\\n\\n    /// @param shares stores the shares in an array\\n    /// @param queue stores a queue of fees that can be send home\\n    /// @param shareIndex store the share index of the shares array\\n    /// @param totalPoints cumulative share points\\n    /// @param baseToken the expected token from the bridge\\n    /// @param router uniswap v2 based router\\n    /// @param bountyShare share of the bounty\\n    /// @param bountyReceiver bounty receiver for processing purposes\\n    /// @param lastBountyReceiver last recent bounty receiver\\n    /// @param lastBountyAmount last recent bounty amount that receiver got\\n    /// @param totalBounties total amount of bounties paid out\\n    /// @param running running state of the fee distributor\\n    /// @param bountyActive is a bounty active or not\\n    /// @param initialized initialize state of the facet\\n    struct Storage {\\n        Share[] shares;\\n        FeeConfigSyncHomeDTO[] queue;\\n        mapping(address => uint256) shareIndex;\\n        uint64 totalPoints;\\n        address baseToken;\\n        address nativeWrapper;\\n        address router;\\n        uint256 pushFeesGasCompensationForCaller;\\n        // bounties\\n        uint64 bountyShare;\\n        address bountyReceiver;\\n        address lastBountyReceiver;\\n        uint256 lastBountyAmount;\\n        uint256 totalBounties;\\n        // flags\\n        bool running;\\n        bool bountyActive;\\n        bool bountyInToken;\\n        bool initialized;\\n    }\\n\\n    /// Initializes the facet\\n    /// @param _baseToken address of the expected token we get from the bridge\\n    /// @param _nativeWrapper address of native wrapper token on the operating chain\\n    /// @param _router uniswap v2 based router\\n    /// @param _bountyShare share of bounty  (10000 = 1%, 1000 = 0.1%)\\n    /// @dev only available to DEPLOYER_ROLE\\n    function initFeeDistributorFacet(address _baseToken, address _nativeWrapper, address _router, uint64 _bountyShare) external {\\n        LibAccessControlEnumerable.checkRole(Constants.DEPLOYER_ROLE);\\n        Storage storage s = _store();\\n        if (s.initialized) revert AlreadyInitialized();\\n        s.bountyShare = _bountyShare;\\n        s.baseToken = _baseToken;\\n        s.nativeWrapper = _nativeWrapper;\\n        s.router = _router;\\n        s.bountyInToken = false;\\n        s.initialized = true;\\n    }\\n\\n    /// @inheritdoc IFeeDistributorFacet\\n    function pushFees(address _token, uint256 _amount, FeeConfigSyncHomeDTO calldata _dto) external payable {\\n        LibAccessControlEnumerable.checkRole(Constants.FEE_DISTRIBUTOR_PUSH_ROLE);\\n        Storage storage s = _store();\\n\\n        if (s.baseToken != _token) revert WrongToken();\\n        if (_amount == 0) revert ZeroValueNotAllowed();\\n\\n        // before native swap\\n        if (s.bountyInToken) _amount = _payoutBountyInToken(_token, _amount, _dto.bountyReceiver);\\n\\n        // swap basetoken to native\\n        address[] memory _path = new address[](2);\\n        _path[0] = s.baseToken;\\n        _path[1] = s.nativeWrapper;\\n        IERC20(s.baseToken).approve(s.router, _amount);\\n        uint256[] memory _amounts = IRouter02(s.router).swapExactTokensForAVAX(\\n            _amount,\\n            (_amount * 997) / 1000,\\n            _path,\\n            address(this),\\n            block.timestamp\\n        );\\n        _amount = _amounts[_amounts.length - 1];\\n\\n        // pay gas compensation\\n        if (s.pushFeesGasCompensationForCaller > 0 && _amount > s.pushFeesGasCompensationForCaller) {\\n            payable(msg.sender).sendValue(s.pushFeesGasCompensationForCaller);\\n            _amount -= s.pushFeesGasCompensationForCaller;\\n        }\\n\\n        // after native swap\\n        if (!s.bountyInToken) _amount = _payoutBountyInNative(_amount, _dto.bountyReceiver);\\n\\n        // generate new dto and redraw shares based on _amount and original send amount (_dto.totalFees) because we substract some stuff and bridged funds will differ from initial funds anyway\\n        // slither-disable-next-line uninitialized-local-variables\\n        FeeConfigSyncHomeDTO memory _updatedDto = FeeConfigSyncHomeDTO({\\n            totalFees: _amount,\\n            bountyReceiver: _dto.bountyReceiver,\\n            fees: new FeeConfigSyncHomeFees[](_dto.fees.length)\\n        });\\n        for (uint256 i = 0; i < _dto.fees.length; ) {\\n            uint256 _feeAmount = (_amount * _dto.fees[i].amount) / _dto.totalFees;\\n            _updatedDto.fees[i] = FeeConfigSyncHomeFees({ id: _dto.fees[i].id, amount: _feeAmount });\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        _pushFees(_updatedDto);\\n    }\\n\\n    /// Adds a fee receiver\\n    /// @param _params contains the name, points, account address und swapPath for the receiver\\n    /// @dev swapPath[] needs to have the base token address on position 0\\n    /// @dev This method also checks if there is a valid swap path existing, otherwise it will be reverted by the aggregator\\n    /// @dev only available to FEE_DISTRIBUTIOR_MANAGER role\\n    function addFeeDistributionReceiver(AddReceiverParams calldata _params) external {\\n        LibAccessControlEnumerable.checkRole(Constants.FEE_DISTRIBUTOR_MANAGER);\\n        Storage storage s = _store();\\n        // check if it is a valid pair\\n        if (_params.swapPath.length > 1) IRouter02(s.router).getAmountsOut(10 ** 6, _params.swapPath);\\n        s.shareIndex[_params.account] = s.shares.length;\\n        s.shares.push(Share({ name: _params.name, points: _params.points, receiver: _params.account, swap: _params.swapPath }));\\n        s.totalPoints += _params.points;\\n        emit ReceiverAdded(_params.account, _params.points);\\n    }\\n\\n    /// Removes a receiver based on the receiver address\\n    /// @param _account address of the receiver\\n    /// @dev only available to FEE_DISTRIBUTIOR_MANAGER role\\n    function removeFeeDistributionReceiver(address _account) external {\\n        LibAccessControlEnumerable.checkRole(Constants.FEE_DISTRIBUTOR_MANAGER);\\n        Storage storage s = _store();\\n        if (s.shares.length == 0) {\\n            revert ReceiverNotExisting(_account);\\n        } else if (s.shares.length == 1) {\\n            delete s.shares;\\n            delete s.shareIndex[_account];\\n            s.totalPoints = 0;\\n            s.running = false; // stop when there is no share available anymore\\n        } else {\\n            for (uint256 i = 0; i < s.shares.length; ) {\\n                if (s.shares[i].receiver == _account) {\\n                    delete s.shareIndex[_account];\\n                    s.shareIndex[s.shares[s.shares.length - 1].receiver] = i;\\n                    s.totalPoints -= s.shares[i].points;\\n                    s.shares[i] = s.shares[s.shares.length - 1];\\n                }\\n                unchecked {\\n                    i++;\\n                }\\n            }\\n            s.shares.pop();\\n        }\\n        emit ReceiverRemoved(_account);\\n    }\\n\\n    /// Updates the shares of existing receivers\\n    /// @param _receivers array of existing receivers\\n    /// @param _shares array of new shares to be set\\n    /// @dev if a receiver is not existing, it'll be reverted\\n    /// @dev only available to FEE_DISTRIBUTIOR_MANAGER role\\n    function updateFeeDistributionShares(address[] calldata _receivers, uint64[] calldata _shares) external {\\n        LibAccessControlEnumerable.checkRole(Constants.FEE_DISTRIBUTOR_MANAGER);\\n        if (_receivers.length == 0 || _shares.length == 0 || _receivers.length != _shares.length) revert WrongData();\\n        Storage storage s = _store();\\n        if (s.shares.length == 0) revert MissingData();\\n        for (uint256 i = 0; i < _receivers.length; ) {\\n            if (s.shares[s.shareIndex[_receivers[i]]].receiver != _receivers[i]) revert ReceiverNotExisting(_receivers[i]);\\n            s.totalPoints -= s.shares[s.shareIndex[_receivers[i]]].points;\\n            s.shares[s.shareIndex[_receivers[i]]].points = _shares[i];\\n            s.totalPoints += _shares[i];\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        emit UpdatedDistributionShares(_receivers, _shares);\\n    }\\n\\n    /// Starts the fee distribution\\n    /// @dev It will be also check if the bounties are being activated and if there are already fees in the queue to process. If so, it'll be process on activating the fee distribution.\\n    /// @dev only available to FEE_DISTRIBUTIOR_MANAGER role\\n    function startFeeDistribution() external {\\n        LibAccessControlEnumerable.checkRole(Constants.FEE_DISTRIBUTOR_MANAGER);\\n        Storage storage s = _store();\\n\\n        if (s.shares.length == 0) revert FailedStartMissingShares();\\n\\n        _setRunning(true);\\n\\n        bool _initialState = s.bountyActive;\\n        if (_initialState) s.bountyActive = false;\\n        if (s.queue.length > 0) {\\n            for (uint256 i = 0; i < s.queue.length; ) {\\n                _pushFees(s.queue[i]);\\n                unchecked {\\n                    i++;\\n                }\\n            }\\n            delete s.queue;\\n        }\\n\\n        if (_initialState) s.bountyActive = true;\\n\\n        emit DistributionStarted();\\n    }\\n\\n    /// Stops the fee distribution\\n    /// @dev only available to FEE_DISTRIBUTIOR_MANAGER role\\n    function stopFeeDistribution() external {\\n        LibAccessControlEnumerable.checkRole(Constants.FEE_DISTRIBUTOR_MANAGER);\\n        _setRunning(false);\\n        emit DistributionStopped();\\n    }\\n\\n    /// @dev Enables the bounty possibility\\n    /// @dev only available to FEE_DISTRIBUTIOR_MANAGER role\\n    function enableFeeDistributorBounty() external {\\n        LibAccessControlEnumerable.checkRole(Constants.FEE_DISTRIBUTOR_MANAGER);\\n        Storage storage s = _store();\\n        s.bountyActive = true;\\n        emit BountyEnabled();\\n    }\\n\\n    /// @dev Disables the bounty possibility\\n    /// @dev only available to FEE_DISTRIBUTIOR_MANAGER role\\n    function disableFeeDistributorBounty() external {\\n        LibAccessControlEnumerable.checkRole(Constants.FEE_DISTRIBUTOR_MANAGER);\\n        Storage storage s = _store();\\n        s.bountyActive = false;\\n        emit BountyDisabled();\\n    }\\n\\n    /// Sets the share of the bounty\\n    /// @param _share share of the bounty\\n    /// @dev only available to FEE_DISTRIBUTIOR_MANAGER role\\n    function setFeeDistributorBountyShare(uint64 _share) external {\\n        LibAccessControlEnumerable.checkRole(Constants.FEE_DISTRIBUTOR_MANAGER);\\n        Storage storage s = _store();\\n        s.bountyShare = _share;\\n        emit BountyShareUpdated(_share);\\n    }\\n\\n    /// Sets the gas compensation for the caller of the push fee method\\n    /// @param _amountInWei share of the bounty\\n    /// @dev only available to FEE_DISTRIBUTIOR_MANAGER role\\n    function setPushFeesGasCompensationForCaller(uint256 _amountInWei) external {\\n        LibAccessControlEnumerable.checkRole(Constants.FEE_DISTRIBUTOR_MANAGER);\\n        Storage storage s = _store();\\n        s.pushFeesGasCompensationForCaller = _amountInWei;\\n        emit PushFeesGasCompensationForCallerUpdate(_amountInWei);\\n    }\\n\\n    /// Enables  or disables the bountyInToken flag based on the given parameter\\n    /// @param _bountyInToken flag if enabled or not\\n    /// @dev only available to FEE_DISTRIBUTIOR_MANAGER role\\n    function enableBountyInToken(bool _bountyInToken) external {\\n        LibAccessControlEnumerable.checkRole(Constants.FEE_DISTRIBUTOR_MANAGER);\\n        Storage storage s = _store();\\n        s.bountyInToken = _bountyInToken;\\n        if (_bountyInToken) emit EnableBountyInToken();\\n        else emit DisableBountyInToken();\\n    }\\n\\n    /// viewables\\n\\n    /// @dev check whether the bounty is active of not\\n    /// @return _is if true, it's on\\n    function isFeeDistributorBountyActive() external view returns (bool _is) {\\n        Storage storage s = _store();\\n        _is = s.bountyActive;\\n    }\\n\\n    /// @dev check whether the distributor is running of not\\n    /// @return _is if true, it's on\\n    function isFeeDistributorRunning() external view returns (bool _is) {\\n        Storage storage s = _store();\\n        _is = s.running;\\n    }\\n\\n    /// @dev check whether the distributors bounty is paid in the token or not\\n    /// @return _is if true, it's paid in token\\n    function isFeeDistributorBountyInToken() external view returns (bool _is) {\\n        Storage storage s = _store();\\n        _is = s.bountyInToken;\\n    }\\n\\n    /// @dev Gets the current total points of all shares\\n    /// @return _totalPoints points\\n    function getFeeDistributorTotalPoints() external view returns (uint64 _totalPoints) {\\n        Storage storage s = _store();\\n        _totalPoints = s.totalPoints;\\n    }\\n\\n    /// @dev Gets all items in queue\\n    /// @return _queue array of sync items\\n    function getFeeDistributorQueue() external view returns (FeeConfigSyncHomeDTO[] memory _queue) {\\n        Storage storage s = _store();\\n        _queue = s.queue;\\n    }\\n\\n    /// @dev Gets all shares\\n    /// @return _shares array of configured shares\\n    function getFeeDistributorReceivers() external view returns (Share[] memory _shares) {\\n        Storage storage s = _store();\\n        _shares = s.shares;\\n    }\\n\\n    /// @dev Gets last bounty information\\n    /// @return _receiver address of recent receiver\\n    /// @return _payout amount being paid to recent receiver\\n    function getFeeDistributorLastBounty() external view returns (address _receiver, uint256 _payout) {\\n        Storage storage s = _store();\\n        _receiver = s.lastBountyReceiver;\\n        _payout = s.lastBountyAmount;\\n    }\\n\\n    /// @dev Gets the bounty share\\n    /// @return _share current bounty share\\n    function getFeeDistributorBountyShare() external view returns (uint64 _share) {\\n        Storage storage s = _store();\\n        _share = s.bountyShare;\\n    }\\n\\n    /// @dev Gets the total bounties being paid\\n    /// @return _totalBounties total bounties\\n    function getFeeDistributorTotalBounties() external view returns (uint256 _totalBounties) {\\n        Storage storage s = _store();\\n        _totalBounties = s.totalBounties;\\n    }\\n\\n    /// internals\\n\\n    /// Distributes the fees to the desired receivers based on their share\\n    /// @param _dto a dto that needs to be synced\\n    /// @dev If the distribution is running, it'll distribute it directly, otherwise it will be queued up and distributed once the distirbution is enabled\\n    function _pushFees(FeeConfigSyncHomeDTO memory _dto) internal {\\n        Storage storage s = _store();\\n        if (_dto.fees.length == 0) revert MissingData();\\n        // more efficient way to check this before and not in loop\\n        if (s.running) {\\n            for (uint256 i = 0; i < _dto.fees.length; ) {\\n                _distribute(LibFeeManager.getFeeConfigById(_dto.fees[i].id).receiver, _dto.fees[i].amount);\\n                unchecked {\\n                    i++;\\n                }\\n            }\\n        } else {\\n            FeeConfigSyncHomeDTO storage _q = s.queue.push();\\n            _q.totalFees = _dto.totalFees;\\n            _q.bountyReceiver = _dto.bountyReceiver;\\n            for (uint256 i = 0; i < _dto.fees.length; ) {\\n                _q.fees.push(FeeConfigSyncHomeFees({ id: _dto.fees[i].id, amount: _dto.fees[i].amount }));\\n                unchecked {\\n                    i++;\\n                }\\n            }\\n            emit TriggerDistributionWhileNotRunning();\\n        }\\n    }\\n\\n    /// Distributes the fees to the desired addresses\\n    /// @param _receiver address of the receiver, can be address(0)\\n    /// @param _amount amount of tokens being distributed\\n    /// @dev If the receiver is address(0), the funds will be distributed to all defined shares based on their points and desired swap\\n    /// @dev If the receiver is not address(0), the funds will be directly send to the address\\n    function _distribute(address _receiver, uint256 _amount) internal {\\n        Storage storage s = _store();\\n        if (_receiver == address(0)) {\\n            uint256 _rest = _amount;\\n            for (uint256 i = 0; i < s.shares.length; i++) {\\n                bool _useRest = s.shares.length == i + 1;\\n                uint256 _share = _useRest ? _rest : (_amount * uint256(s.shares[i].points)) / uint256(s.totalPoints);\\n                _rest = _useRest ? 0 : _rest - _share;\\n                if (s.shares[i].swap.length > 1) {\\n                    address _token = s.shares[i].swap[s.shares[i].swap.length - 1];\\n                    uint256[] memory amounts = IRouter02(s.router).swapExactAVAXForTokens{ value: _share }(\\n                        0,\\n                        s.shares[i].swap,\\n                        s.shares[i].receiver.isContract() ? address(this) : s.shares[i].receiver,\\n                        block.timestamp\\n                    );\\n                    _share = amounts[amounts.length - 1];\\n                    if (s.shares[i].receiver.isContract()) {\\n                        IERC20(_token).approve(s.shares[i].receiver, _share);\\n                        IDepositable(s.shares[i].receiver).deposit(_token, _share);\\n                    }\\n                    emit Distributed(s.shares[i].receiver, _share);\\n                } else if (s.shares[i].receiver.isContract()) {\\n                    IWAVAX(s.nativeWrapper).deposit{ value: _share }();\\n                    IERC20(s.nativeWrapper).approve(s.shares[i].receiver, _share);\\n                    IDepositable(s.shares[i].receiver).deposit(s.nativeWrapper, _share);\\n                    emit Distributed(s.shares[i].receiver, _share);\\n                } else {\\n                    payable(s.shares[i].receiver).sendValue(_share);\\n                    emit Distributed(s.shares[i].receiver, _share);\\n                }\\n            }\\n        } else {\\n            payable(_receiver).sendValue(_amount);\\n            emit Distributed(_receiver, _amount);\\n        }\\n    }\\n\\n    /// Set the the running state of the distributor\\n    /// @param _running flag\\n    function _setRunning(bool _running) internal {\\n        LibAccessControlEnumerable.checkRole(Constants.FEE_MANAGER_ROLE);\\n        Storage storage s = _store();\\n        s.running = _running;\\n    }\\n\\n    function _payoutBountyInToken(address _token, uint256 _amount, address _receiver) internal returns (uint256 _amountLeft) {\\n        Storage storage s = _store();\\n        _amountLeft = _amount;\\n        if (s.bountyActive && s.bountyShare > 0 && _receiver != address(0)) {\\n            uint256 _bountyAmount = (_amountLeft * s.bountyShare) / 10 ** 6;\\n            _amountLeft -= _bountyAmount;\\n            s.totalBounties += _bountyAmount;\\n            s.lastBountyAmount = _bountyAmount;\\n            s.lastBountyReceiver = _receiver;\\n            // slither-disable-next-line unchecked-transfer\\n            IERC20(_token).transfer(_receiver, _bountyAmount);\\n            emit BountyPaid(_bountyAmount, _receiver);\\n        }\\n    }\\n\\n    function _payoutBountyInNative(uint256 _amount, address _receiver) internal returns (uint256 _amountLeft) {\\n        Storage storage s = _store();\\n        _amountLeft = _amount;\\n        if (s.bountyActive && s.bountyShare > 0 && _receiver != address(0)) {\\n            uint256 _bountyAmount = (_amountLeft * s.bountyShare) / 10 ** 6;\\n            _amountLeft -= _bountyAmount;\\n            s.totalBounties += _bountyAmount;\\n            s.lastBountyAmount = _bountyAmount;\\n            s.lastBountyReceiver = _receiver;\\n            payable(_receiver).sendValue(_bountyAmount);\\n            emit BountyPaid(_bountyAmount, _receiver);\\n        }\\n    }\\n\\n    /// Store\\n    function _store() internal pure returns (Storage storage s) {\\n        bytes32 position = STORAGE_NAMESPACE;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xec66eb0ff1e0f54373b04a3f737a52bc1598b374f4dd5e5026a01ad6e3c8352d\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/helpers/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nlibrary Constants {\\n    /*-------------------------------- Role --------------------------------*/\\n    // 0x0000000000000000000000000000000000000000000000000000000000000000\\n    bytes32 constant DEFAULT_ADMIN_ROLE = 0x00;\\n    // 0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775\\n    bytes32 constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    // 0xfc425f2263d0df187444b70e47283d622c70181c5baebb1306a01edba1ce184c\\n    bytes32 constant DEPLOYER_ROLE = keccak256(\\\"DEPLOYER_ROLE\\\");\\n    // 0x6c0757dc3e6b28b2580c03fd9e96c274acf4f99d91fbec9b418fa1d70604ff1c\\n    bytes32 constant FEE_MANAGER_ROLE = keccak256(\\\"FEE_MANAGER_ROLE\\\");\\n    // 0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6\\n    bytes32 constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    // 0x3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a848\\n    bytes32 constant BURNER_ROLE = keccak256(\\\"BURNER_ROLE\\\");\\n    // 0x63eb04268b235ac1afacf3bcf4b19c5c175d0417a1555fb3ff79ae190f71ee7c\\n    bytes32 constant FEE_STORE_MANAGER_ROLE = keccak256(\\\"FEE_STORE_MANAGER_ROLE\\\");\\n    // 0x77f52ccf2f32e71a0cff8f14ad8c8303b7d2e4c7609b8fba963114f4db2af767\\n    bytes32 constant FEE_DISTRIBUTOR_PUSH_ROLE = keccak256(\\\"FEE_DISTRIBUTOR_PUSH_ROLE\\\");\\n    // 0xe85d5f1f8338cb18f500856d1568d0f3b0d0971f25b3ccd134475e991354edbf\\n    bytes32 constant FEE_DISTRIBUTOR_MANAGER = keccak256(\\\"FEE_DISTRIBUTOR_MANAGER\\\");\\n    /*----------------------------------------------------------------------*/\\n\\n    /*------------------------------- Fee ID -------------------------------*/\\n    // 0xacfc432e98ad100d9f8c385f3782bc88a17e1de7e53f69678cbcc41e8ffe72b0\\n    bytes32 constant ERC20_MARKETING_FEE = keccak256(\\\"ERC20_MARKETING_FEE\\\");\\n    // 0x6b78196f16f828b24a5a6584d4a1bcc5ce2f3154ba57839db273e6a4ebbe92c2\\n    bytes32 constant ERC20_REWARD_FEE = keccak256(\\\"ERC20_REWARD_FEE\\\");\\n    // 0x6e3678bee6f77c8a6179922c9a518b08407e6d9d2593ac683a87c979c8b31a12\\n    bytes32 constant ERC20_PLATFORM_FEE = keccak256(\\\"ERC20_PLATFORM_FEE\\\");\\n    // 0x6e2178bb28988b4c92cd3092e9e342e7639bfda2f68a02ac478cb084759607cf\\n    bytes32 constant ERC20_DEVELOPER_FEE = keccak256(\\\"ERC20_DEVELOPER_FEE\\\");\\n    /*----------------------------------------------------------------------*/\\n\\n    /*--------------------------- Relayer Actions --------------------------*/\\n    // 0xf145583e6e33d9da99af75b579493b11db4229a339336b82c748312f152b29a9\\n    bytes32 constant RELAYER_ACTION_DEPLOY_FEES = keccak256(\\\"RELAYER_ACTION_DEPLOY_FEES\\\");\\n    // 0xf375f410a0dc135af0d9a16e273eac999064981d8813a68af762e93567a43aac\\n    bytes32 constant RELAYER_ACTION_DEPLOY_FEES_CONFIRM = keccak256(\\\"RELAYER_ACTION_DEPLOY_FEES_CONFIRM\\\");\\n    // 0x9d62257b25ea052fe7cd5123fd6b791268b8673b073aae5de4a823c4dc7d7607\\n    bytes32 constant RELAYER_ACTION_SEND_FEES = keccak256(\\\"RELAYER_ACTION_SEND_FEES\\\");\\n    /*----------------------------------------------------------------------*/\\n}\\n\",\"keccak256\":\"0xd97d83c120a78ed4d7d6cc2ca3b62d2e9fd2fd82d3ffebfffb1659f05218c6cf\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/helpers/Enums.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/// enums\\nenum FeeCurrency {\\n    Null,\\n    // L1\\n    Native,\\n    // different asset\\n    Token\\n}\\n\\nenum FeeType {\\n    Null,\\n    // absolute/onetime\\n    Default,\\n    // buy/sell depending on target\\n    From,\\n    // buy/sell depending on target\\n    To\\n}\\n\\nenum FeeSyncAction {\\n    Null,\\n    // adding a fee\\n    Add,\\n    // updating a fee\\n    Update,\\n    // removing a fee\\n    Delete\\n}\\n\\nenum FeeDeployState {\\n    Null,\\n    // a fee is recently added, updated or removed\\n    Queued,\\n    // a fee config is deployed\\n    Pending,\\n    // a fee gets receives information about being deployed\\n    Deployed\\n}\\n\",\"keccak256\":\"0x0c969525e1a2602179c6b12648cd070a7850be970ae4845b2857d1e888799873\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/helpers/GenericErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nerror AddressZero();\\nerror ZeroValueNotAllowed();\\nerror InsufficientAllowance();\\nerror InsufficientBalance();\\nerror InsufficientFunds();\\nerror NotAllowed();\\nerror AlreadyInitialized();\\nerror NoReetrancy();\\nerror WrongChain();\\nerror UnexpectedBalance();\\nerror FailToSendNative();\\n\",\"keccak256\":\"0xa32b95f0bbd73e6900f30956dc9a0019ec3637eb09f7bab6454bff46d662403d\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/helpers/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport { FeeCurrency, FeeType, FeeSyncAction, FeeDeployState } from \\\"./Enums.sol\\\";\\n\\n/// General Fee Config\\n\\nstruct FeeConfig {\\n    // relative: 10000 = 1% or 100 = 0.01%\\n    // absolute: 10000 = 1 or 1 = 0.0001\\n    uint256 fee;\\n    // Assets are always going to the fee distributor on the home chain. This config is necessary to define which receiver gets this asset.\\n    // It's purpose can be overwritten by the FeeDistributor. So it will serve as a fallback.\\n    address receiver;\\n    // defines the type. It does not have a purpose yet but may have in the future\\n    // see {Enums->FeeType}\\n    FeeType ftype;\\n    // type of how the fees should be handles\\n    // see {Enums->FeeCurrency}\\n    FeeCurrency currency;\\n    // // Deploy state of a fee config\\n    // // see {Enums->FeeDeployState}\\n    // FeeDeployState deployState;\\n}\\n\\n/// Fee Management\\n\\nstruct AddFeeConfigParams {\\n    // fee id which can be defined elsewhere but needs to be a bytes32\\n    bytes32 id;\\n    // see {struct FeeConfig->fee}\\n    uint256 fee;\\n    // see {struct FeeConfig->receiver}\\n    address receiver;\\n    // see {struct FeeConfig->ftype}\\n    FeeType ftype;\\n    // see {struct FeeConfig->currency}\\n    FeeCurrency currency;\\n}\\n\\nstruct UpdateFeeConfigParams {\\n    // see {struct AddFeeConfigParams->id}\\n    bytes32 id;\\n    // see {struct FeeConfig->fee}\\n    uint256 fee;\\n    // see {struct FeeConfig->fee}\\n    address receiver;\\n}\\n\\nstruct RemoveFeeConfigParams {\\n    // see {struct AddFeeConfigParams->id}\\n    bytes32 id;\\n}\\n\\n/// Chain Management\\n\\nstruct AddChainParams {\\n    // chain id\\n    uint256 chainId;\\n    // address of the participant, most likely the diamon address of the target chain\\n    address target;\\n}\\nstruct RemoveChainParams {\\n    // chain id\\n    uint256 chainId;\\n}\\n\\n/// Fee & Chain Management\\n\\nstruct AssignFeeConfigToChainParams {\\n    // fee config id\\n    bytes32 id;\\n    // chain id to assign the fee config id to\\n    uint256 chainId;\\n}\\nstruct UnassignFeeConfigFromChainParams {\\n    // fee config id\\n    bytes32 id;\\n    // chain id to unassign the fee config id from\\n    uint256 chainId;\\n}\\nstruct UnassignFeeConfigFromAllChainsParams {\\n    // fee config id\\n    bytes32 id;\\n}\\n\\n/// Syncing\\n\\nstruct FeeSyncQueue {\\n    // fee config id\\n    bytes32 id;\\n    // chain id\\n    uint256 chainId;\\n    // action to execute on the target chain\\n    FeeSyncAction action;\\n}\\n\\nstruct FeeConfigDeployState {\\n    bytes32 id;\\n    FeeDeployState state;\\n}\\n\\n/// Data Transfer Objects\\n\\nstruct FeeConfigSyncDTO {\\n    // fee config id\\n    bytes32 id;\\n    // fee value\\n    uint256 fee;\\n    // address to make conditional charged based on a specific token\\n    // a contract can decide by itself whether to it or not\\n    // if defined and used, this fee should be restricted and charged onto a specific token\\n    address target;\\n    // desired action to execute on the target chain\\n    FeeSyncAction action;\\n}\\nstruct FeeConfigSyncHomeFees {\\n    // fee config id\\n    bytes32 id;\\n    // amount of the collected fees of this if\\n    uint256 amount;\\n}\\nstruct FeeConfigSyncHomeDTO {\\n    // total amount of collected fees\\n    uint256 totalFees;\\n    // address of the bounty receiver on the home chain\\n    address bountyReceiver;\\n    // containing fee information that will moved to the home chain\\n    FeeConfigSyncHomeFees[] fees;\\n}\\n\\nstruct CelerRelayerData {\\n    // bytes32 hash which defined the action that should be taken\\n    bytes32 what;\\n    // address of the contract which what is being executed to\\n    address target;\\n    // encoded message of the desired scope\\n    bytes message;\\n}\\n\\n/// Fee Store\\n\\nstruct FeeStoreConfig {\\n    // fee config id\\n    bytes32 id;\\n    // fee\\n    uint256 fee;\\n    // address of the contract which what is being executed to\\n    address target;\\n    // flag for being markes as deleted\\n    bool deleted;\\n}\\n\\n/// Fee Distributor\\n\\nstruct AddReceiverParams {\\n    // public name for the receiver\\n    // can be \\\"Staking\\\", \\\"Liquidity Backing\\\" or whatever\\n    string name;\\n    // potion of share in points. Points will be summarized in the distribution to calculate the relative share\\n    uint64 points;\\n    // address of the contract/account that receives the share\\n    address account;\\n    // swap path in case a share receiver expects another token then the intermediate token of the bridge\\n    address[] swapPath;\\n}\\n\",\"keccak256\":\"0x4ce7534af69a6112e17237cd7b86f9c679ce510d363025c6a946ddd27a61527d\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/interfaces/IDepositable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.19;\\n\\n/// @title Depositable Interface\\n/// @author Daniel <danieldegendev@gmail.com>\\ninterface IDepositable {\\n    /// Deposits a token into corresponding contracts like \\\"Liquidity Backing\\\" and \\\"Staking\\\"\\n    /// @param _token address of the token that should be deposited\\n    /// @param _amount amount of token\\n    function deposit(address _token, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xb0287115ecba82425c4aed9297a58334bc327aaa229d329ee75e7078050091de\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/interfaces/IFeeDistributorFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.17;\\n\\nimport { FeeConfigSyncHomeDTO } from \\\"./../helpers/Structs.sol\\\";\\n\\n/// @title Fee Distributor Interface\\n/// @author Daniel <danieldegendev@gmail.com>\\ninterface IFeeDistributorFacet {\\n    // this is guarateed to get the tokens before being executed\\n    /// Pushes the fee to the desired receivers\\n    /// @param _token the token address being received\\n    /// @param _amount amount of tokens being received\\n    /// @param _dto the dto of the fee store to determine the split of _amount\\n    /// @dev an updated dto needs to be created since the receiving amount is not\\n    ///      matching the sent amount anymore. The contract will 100% receive the\\n    ///      _token _amount before being executed\\n    /// @dev only available to FEE_DISTRIBUTOR_PUSH_ROLE role\\n    /// @dev if the token doesn't match, it will fail.\\n    function pushFees(address _token, uint256 _amount, FeeConfigSyncHomeDTO calldata _dto) external payable;\\n}\\n\",\"keccak256\":\"0x605111ffe74270d4c0ee0d5c82682657071a5ec9ea52cc58ce129d3c4a79854f\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/interfaces/IRouter02.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.17;\\n\\n/// @title Partial Interface of a Uniswap V2 based router\\n/// @author Daniel <danieldegendev@gmail.com>\\ninterface IRouter02 {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForAVAX(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactAVAXForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x76038741cc4b61ae22a8e6d7c3560baa063060f434fe0bd23283fd34db28711e\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/interfaces/IWAVAX.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\ninterface IWAVAX {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x5186b26fd4d223e32d7771f34e30ae6f7302bf93174e5aa12ff8b65e52340f87\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/libraries/LibAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nlibrary LibAccessControlEnumerable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    bytes32 constant ACCESS_CONTROL_STORAGE_POSITION = keccak256(\\\"degenx.access.control.storage\\\");\\n\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct AccessControlStorage {\\n        mapping(bytes32 => RoleData) roles;\\n        mapping(bytes32 => EnumerableSet.AddressSet) roleMembers;\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    function accessControlStorage() internal pure returns (AccessControlStorage storage acs) {\\n        bytes32 position = ACCESS_CONTROL_STORAGE_POSITION;\\n        assembly {\\n            acs.slot := position\\n        }\\n    }\\n\\n    function checkRole(bytes32 role) internal view {\\n        checkRole(role, msg.sender);\\n    }\\n\\n    function checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    function hasRole(bytes32 role, address account) internal view returns (bool) {\\n        AccessControlStorage storage acs = accessControlStorage();\\n        return acs.roles[role].members[account];\\n    }\\n\\n    function grantRole(bytes32 role, address account) internal {\\n        AccessControlStorage storage acs = accessControlStorage();\\n        if (!hasRole(role, account)) {\\n            acs.roles[role].members[account] = true;\\n            emit RoleGranted(role, account, msg.sender);\\n            acs.roleMembers[role].add(account);\\n        }\\n    }\\n\\n    function revokeRole(bytes32 role, address account) internal {\\n        AccessControlStorage storage acs = accessControlStorage();\\n        if (hasRole(role, account)) {\\n            acs.roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, msg.sender);\\n            acs.roleMembers[role].remove(account);\\n        }\\n    }\\n\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        AccessControlStorage storage acs = accessControlStorage();\\n        bytes32 previousAdminRole = acs.roles[role].adminRole;\\n        acs.roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n}\\n\",\"keccak256\":\"0xd72f7b388e9d30e2f0dfeaf2dabf1f85785802488695de9b6db540744c7179f3\",\"license\":\"MIT\"},\"contracts/diamond/libraries/LibFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.19;\\n\\nimport \\\"./LibFeeManagerStorage.sol\\\";\\nimport { FeeConfig, FeeSyncQueue } from \\\"./../helpers/Structs.sol\\\";\\nimport { FeeType, FeeSyncAction, FeeDeployState } from \\\"./../helpers/Enums.sol\\\";\\n\\n/// @title Lib Fee Manager\\n/// @author Daniel <danieldegendev@gmail.com>\\n/// @notice Helper functions for the Fee Manager Facet\\nlibrary LibFeeManager {\\n    /// viewables\\n\\n    /// Checks whether a fee config exsists or not\\n    /// @param _id fee config id\\n    function exists(bytes32 _id) internal view returns (bool _exists) {\\n        _exists = LibFeeManagerStorage.feeManagerStorage().feeConfigs[_id].ftype != FeeType.Null;\\n    }\\n\\n    /// Checks whether a fee config is in use on a specific chain or not\\n    /// @param _id fee config id\\n    function isFeeConfigInUse(bytes32 _id) internal view returns (bool _exists) {\\n        for (uint256 i = 0; i < store().chainIds.length; i++) {\\n            for (uint256 j = 0; j < store().chainIdFeeConfigMap[store().chainIds[i]].length; j++) {\\n                if (store().chainIdFeeConfigMap[store().chainIds[i]][j] == _id) {\\n                    _exists = true;\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// Gets the target address for a specific chain\\n    /// @param _chainId chain id\\n    /// @dev normally the address of the diamond on the target chain\\n    function getChainTarget(uint256 _chainId) internal view returns (address _target) {\\n        _target = store().chainTargets[_chainId];\\n    }\\n\\n    /// Gets the fee config by a given id\\n    /// @param _id fee config id\\n    function getFeeConfigById(bytes32 _id) internal view returns (FeeConfig memory _feeConfig) {\\n        LibFeeManagerStorage.FeeManagerStorage storage s = LibFeeManagerStorage.feeManagerStorage();\\n        _feeConfig = s.feeConfigs[_id];\\n    }\\n\\n    /// internals\\n\\n    /// Queues up a specific fee config for a specific chain with a specific action\\n    /// @param _id fee config id\\n    /// @param _chainId chain id\\n    /// @param _action action to execute on the target chain\\n    function queue(bytes32 _id, uint256 _chainId, FeeSyncAction _action) internal {\\n        LibFeeManagerStorage.FeeManagerStorage storage s = LibFeeManagerStorage.feeManagerStorage();\\n        bool alreadInQueue = false;\\n        for (uint256 i = 0; i < s.feeSyncQueue[_chainId].length; i++)\\n            alreadInQueue = alreadInQueue || (s.feeSyncQueue[_chainId][i].id == _id && s.feeSyncQueue[_chainId][i].chainId == _chainId);\\n\\n        if (!alreadInQueue) {\\n            s.feeSyncQueue[_chainId].push(FeeSyncQueue({ id: _id, chainId: _chainId, action: _action }));\\n            s.feeDeployState[_chainId][_id] = FeeDeployState.Queued;\\n        }\\n    }\\n\\n    /// Simple archiving of fee configs\\n    /// @param _id fee config id\\n    /// will be called on update and delete of a fee config\\n    function archiveFeeConfig(bytes32 _id) internal {\\n        FeeConfig storage feeConfigToArchive = LibFeeManagerStorage.feeManagerStorage().feeConfigs[_id];\\n        LibFeeManagerStorage.feeManagerStorage().feeConfigsArchive[_id].push(feeConfigToArchive);\\n    }\\n\\n    /// store\\n    function store() internal pure returns (LibFeeManagerStorage.FeeManagerStorage storage _store) {\\n        _store = LibFeeManagerStorage.feeManagerStorage();\\n    }\\n}\\n\",\"keccak256\":\"0x29586e749e5c7562908180febb0ce2077423326460034f090568b6a9f45b7fc5\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/libraries/LibFeeManagerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.19;\\n\\nimport { FeeDeployState } from \\\"./../helpers/Enums.sol\\\";\\nimport { FeeConfig, FeeSyncQueue } from \\\"./../helpers/Structs.sol\\\";\\n\\n/// @title Lib Fee Manager Storage\\n/// @author Daniel <danieldegendev@gmail.com>\\n/// @notice Storage for the Fee Manager Facet\\nlibrary LibFeeManagerStorage {\\n    bytes32 constant FEE_MANAGER_STORAGE_POSITION = keccak256(\\\"degenx.fee-manager.storage.v1\\\");\\n\\n    struct FeeManagerStorage {\\n        // all available chains\\n        uint256[] chainIds;\\n        // all available configs\\n        bytes32[] feeConfigIds;\\n        // contract to chain assignments\\n        // chainId => contract\\n        mapping(uint256 => address) chainTargets;\\n        // fee config to chain assignment to store which config should be available on which chain\\n        // chainId => list of fee config ids\\n        mapping(uint256 => bytes32[]) chainIdFeeConfigMap;\\n        // flags for quick checks to avoid looping through chainIdFeeConfigMap\\n        // chainId => feeConfigId\\n        mapping(uint256 => mapping(bytes32 => bool)) chainIdFeeConfig;\\n        // flag if a specific chain is being supported\\n        // chainId => true/false\\n        mapping(uint256 => bool) isChainSupported;\\n        // fee config id to fee config mapping. The fee config itself doesn't need to know its id\\n        // feeConfigId => FeeConfig\\n        mapping(bytes32 => FeeConfig) feeConfigs;\\n        // fee config archive of recent fee config settings to a specific fee config id\\n        // feeConfigId => list of fee config variants\\n        mapping(bytes32 => FeeConfig[]) feeConfigsArchive;\\n        // queue for syncing configs with the target contracts\\n        // chainId => list of fee sync data\\n        mapping(uint256 => FeeSyncQueue[]) feeSyncQueue;\\n        // deployment state per chain per fee config id\\n        // chainId => fee config id => deployment state of a fee config\\n        mapping(uint256 => mapping(bytes32 => FeeDeployState)) feeDeployState;\\n    }\\n\\n    /// store\\n    function feeManagerStorage() internal pure returns (FeeManagerStorage storage fms) {\\n        bytes32 position = FEE_MANAGER_STORAGE_POSITION;\\n        assembly {\\n            fms.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf75585e28177d67470e525ee0e38896aa7de5d57a4ea239138c44d7cdc76f1c2\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614928806100206000396000f3fe60806040526004361061016a5760003560e01c806385629f1e116100cb578063b0097e501161007f578063c3bca53f11610059578063c3bca53f14610492578063ca810097146104c9578063cbd877ab1461050657600080fd5b8063b0097e5014610455578063ba37993b1461046a578063c218d5e41461047f57600080fd5b80639140f486116100b05780639140f4861461037a578063a5acbb781461039a578063a61ee9c6146103ba57600080fd5b806385629f1e14610343578063882f192f1461036557600080fd5b80633b814245116101225780634d62b623116101075780634d62b623146102ee5780634e24cc1e1461030357806369bbd7ae1461032357600080fd5b80633b8142451461029057806348f47a49146102b057600080fd5b8063200383c611610153578063200383c6146101de57806322429073146102005780632eaa32ae1461023d57600080fd5b806308057f7e1461016f5780630c31e47114610191575b600080fd5b34801561017b57600080fd5b5061018f61018a366004613adb565b610526565b005b34801561019d57600080fd5b507f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fda54610100900460ff165b60405190151581526020015b60405180910390f35b3480156101ea57600080fd5b506101f36109c6565b6040516101d59190613af6565b34801561020c57600080fd5b507f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fd9546040519081526020016101d5565b34801561024957600080fd5b507f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fd65467ffffffffffffffff165b60405167ffffffffffffffff90911681526020016101d5565b34801561029c57600080fd5b5061018f6102ab366004613bf5565b610ade565b3480156102bc57600080fd5b507f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fd25467ffffffffffffffff16610277565b3480156102fa57600080fd5b5061018f610baf565b34801561030f57600080fd5b5061018f61031e366004613c10565b610ddb565b34801561032f57600080fd5b5061018f61033e366004613c29565b610e7a565b34801561034f57600080fd5b5061035861122a565b6040516101d59190613d23565b34801561037157600080fd5b5061018f6113e7565b34801561038657600080fd5b5061018f610395366004613e49565b6114a9565b3480156103a657600080fd5b5061018f6103b5366004613eb5565b61194f565b3480156103c657600080fd5b506104297f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fd7547f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fd85473ffffffffffffffffffffffffffffffffffffffff90911691565b6040805173ffffffffffffffffffffffffffffffffffffffff90931683526020830191909152016101d5565b34801561046157600080fd5b5061018f611afd565b34801561047657600080fd5b5061018f611b5b565b61018f61048d366004613f09565b611c19565b34801561049e57600080fd5b507f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fda5460ff166101c9565b3480156104d557600080fd5b507f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fda5462010000900460ff166101c9565b34801561051257600080fd5b5061018f610521366004613f75565b61218a565b61054f7fe85d5f1f8338cb18f500856d1568d0f3b0d0971f25b3ccd134475e991354edbf61228b565b7f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fcf80546000036105c8576040517f2c883a4e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024015b60405180910390fd5b805460010361065d576105dc816000613860565b73ffffffffffffffffffffffffffffffffffffffff821660009081526002820160205260408120556003810180547fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000169055600b810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055610978565b60005b81548110156108eb578273ffffffffffffffffffffffffffffffffffffffff1682600001828154811061069557610695613f92565b600091825260209091206003909102016001015468010000000000000000900473ffffffffffffffffffffffffffffffffffffffff16036108e35773ffffffffffffffffffffffffffffffffffffffff83166000908152600283016020819052604082208290558354839290859061070f90600190613ff0565b8154811061071f5761071f613f92565b600091825260208083206003929092029091016001015468010000000000000000900473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001902055815482908290811061077a5761077a613f92565b60009182526020822060039182020160010154908401805467ffffffffffffffff9283169391926107ad91859116614003565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555081600001600183600001805490506107eb9190613ff0565b815481106107fb576107fb613f92565b906000526020600020906003020182600001828154811061081e5761081e613f92565b600091825260209091206003909102018061083983826140f4565b506001828101805491830180547fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000811667ffffffffffffffff9094169384178255915473ffffffffffffffffffffffffffffffffffffffff680100000000000000009182900416027fffffffff00000000000000000000000000000000000000000000000000000000909216909217179055600280830180546108df9284019190613881565b5050505b600101610660565b5080548190806108fd576108fd61422b565b6000828152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019160038302019061093b82826138d1565b6001820180547fffffffff0000000000000000000000000000000000000000000000000000000016905561097360028301600061390b565b505090555b60405173ffffffffffffffffffffffffffffffffffffffff831681527f2771977f239a332de92ab37b7275685268f164e51cda8f1356692695f4708f2f906020015b60405180910390a15050565b606060007f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fcf6001810180546040805160208084028201810190925282815293945060009084015b82821015610ad45760008481526020808220604080516060810182526003870290920180548352600181015473ffffffffffffffffffffffffffffffffffffffff168385015260028101805483518187028101870185528181529496929593870194939192909184015b82821015610abd57838290600052602060002090600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190610a77565b505050508152505081526020019060010190610a0d565b5050505091505090565b610b077fe85d5f1f8338cb18f500856d1568d0f3b0d0971f25b3ccd134475e991354edbf61228b565b7f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fd680547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff83169081179091556040519081527f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fcf907faa207cc615c6c44dcee3fa661ad994d053cff5cdd9bca952728af0dad3563a40906020016109ba565b610bd87fe85d5f1f8338cb18f500856d1568d0f3b0d0971f25b3ccd134475e991354edbf61228b565b7f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fcf8054600003610c34576040517fa2743a7600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610c3e6001612298565b600b810154610100900460ff168015610c7c57600b820180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b600182015415610d795760005b6001830154811015610d6a57610d62836001018281548110610cad57610cad613f92565b6000918252602080832060408051606081018252600390940290910180548452600181015473ffffffffffffffffffffffffffffffffffffffff1684840152600281018054835181860281018601855281815295969295938701949192909184015b82821015610d5557838290600052602060002090600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190610d0f565b5050505081525050612311565b600101610c89565b50610d79600183016000613929565b8015610dae57600b820180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b6040517fcaec521e84e0f554a179e69c042f43833410c17af29a4385f244c61e24d3759a90600090a15050565b610e047fe85d5f1f8338cb18f500856d1568d0f3b0d0971f25b3ccd134475e991354edbf61228b565b7f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fd58190556040518181527f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fcf907fafe6e712b74180d809a4bac428e6e6a406f71406d3b40539633988706e34864f906020016109ba565b610ea37fe85d5f1f8338cb18f500856d1568d0f3b0d0971f25b3ccd134475e991354edbf61228b565b7f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fcf6001610ed3606084018461425a565b90501115610f8f57600581015473ffffffffffffffffffffffffffffffffffffffff1663d06ca61f620f4240610f0c606086018661425a565b6040518463ffffffff1660e01b8152600401610f2a9392919061430b565b600060405180830381865afa158015610f47573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610f8d919081019061432e565b505b8054600282016000610fa76060860160408701613adb565b73ffffffffffffffffffffffffffffffffffffffff1681526020810191909152604090810160002091909155805160808101909152819080610fe9858061440a565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050908252506020908101906110369060408701908701613bf5565b67ffffffffffffffff1681526020016110556060860160408701613adb565b73ffffffffffffffffffffffffffffffffffffffff16815260200161107d606086018661425a565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201829052509390945250508354600181018555938152602090208251929360030201918291506110d5908261446f565b50602082810151600183018054604086015173ffffffffffffffffffffffffffffffffffffffff1668010000000000000000027fffffffff0000000000000000000000000000000000000000000000000000000090911667ffffffffffffffff9093169290921791909117905560608301518051611159926002850192019061394a565b5061116d9150506040830160208401613bf5565b60038201805460009061118b90849067ffffffffffffffff16614581565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507f42ea758b36503bebd3662e8d5c70ce30b8e8978ba723afeb769bbc834895d25d8260400160208101906111e59190613adb565b6111f56040850160208601613bf5565b6040805173ffffffffffffffffffffffffffffffffffffffff909316835267ffffffffffffffff9091166020830152016109ba565b606060007f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fcf80546040805160208084028201810190925282815292935083919060009084015b82821015610ad457838290600052602060002090600302016040518060800160405290816000820180546112a390614024565b80601f01602080910402602001604051908101604052809291908181526020018280546112cf90614024565b801561131c5780601f106112f15761010080835404028352916020019161131c565b820191906000526020600020905b8154815290600101906020018083116112ff57829003601f168201915b5050509183525050600182015467ffffffffffffffff81166020808401919091526801000000000000000090910473ffffffffffffffffffffffffffffffffffffffff1660408084019190915260028401805482518185028101850190935280835260609094019391929091908301828280156113cf57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116113a4575b50505050508152505081526020019060010190611270565b6114107fe85d5f1f8338cb18f500856d1568d0f3b0d0971f25b3ccd134475e991354edbf61228b565b7f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fda80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790556040517f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fcf907fb3f9087a67093bfe032e3e51f7ad7f4e203dd5d04e59beac34ce16a8b344f12e90600090a150565b6114d27fe85d5f1f8338cb18f500856d1568d0f3b0d0971f25b3ccd134475e991354edbf61228b565b8215806114dd575080155b806114e85750828114155b1561151f576040517f036896be00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fcf805460000361157b576040517fff47559b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8481101561190a5785858281811061159857611598613f92565b90506020020160208101906115ad9190613adb565b73ffffffffffffffffffffffffffffffffffffffff16826002810160008989868181106115dc576115dc613f92565b90506020020160208101906115f19190613adb565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548154811061163c5761163c613f92565b600091825260209091206003909102016001015468010000000000000000900473ffffffffffffffffffffffffffffffffffffffff16146116e95785858281811061168957611689613f92565b905060200201602081019061169e9190613adb565b6040517f2c883a4e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911660048201526024016105bf565b8160028101600088888581811061170257611702613f92565b90506020020160208101906117179190613adb565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548154811061176257611762613f92565b60009182526020822060039182020160010154908401805467ffffffffffffffff92831693919261179591859116614003565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508383828181106117cd576117cd613f92565b90506020020160208101906117e29190613bf5565b826002810160008989868181106117fb576117fb613f92565b90506020020160208101906118109190613adb565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548154811061185b5761185b613f92565b906000526020600020906003020160010160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508383828181106118a4576118a4613f92565b90506020020160208101906118b99190613bf5565b6003830180546000906118d790849067ffffffffffffffff16614581565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550808060010191505061157e565b507f7c3e3b7fa09a990b8501620414022e5e7e9a8d538426b535599c9896075739588585858560405161194094939291906145a2565b60405180910390a15050505050565b6119787ffc425f2263d0df187444b70e47283d622c70181c5baebb1306a01edba1ce184c61228b565b7f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fda547f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fcf906301000000900460ff16156119fd576040517f0dc149f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60078101805467ffffffffffffffff9093167fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000009093169290921790915560038101805473ffffffffffffffffffffffffffffffffffffffff95861668010000000000000000027fffffffff0000000000000000000000000000000000000000ffffffffffffffff9091161790556004810180549385167fffffffffffffffffffffffff0000000000000000000000000000000000000000948516179055600581018054929094169190921617909155600b0180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000ffff166301000000179055565b611b267fe85d5f1f8338cb18f500856d1568d0f3b0d0971f25b3ccd134475e991354edbf61228b565b611b306000612298565b6040517fbe5adf618cbdb160d8186c8f607a42f19897ec0d80fdbc9565484b3f09fba72f90600090a1565b611b847fe85d5f1f8338cb18f500856d1568d0f3b0d0971f25b3ccd134475e991354edbf61228b565b7f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fda80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690556040517f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fcf907f07f03cdf838d002e75546c9218388e1f0cd1e66b79264dc1016ea9720e13a5a690600090a150565b611c427f77f52ccf2f32e71a0cff8f14ad8c8303b7d2e4c7609b8fba963114f4db2af76761228b565b7f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fd2547f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fcf9073ffffffffffffffffffffffffffffffffffffffff858116680100000000000000009092041614611ce3576040517fa0f3feea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600003611d1d576040517f9cf8540c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600b81015462010000900460ff1615611d4d57611d4a8484611d456040860160208701613adb565b612523565b92505b6040805160028082526060820183526000926020830190803683370190505090508160030160089054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600081518110611da657611da6613f92565b73ffffffffffffffffffffffffffffffffffffffff92831660209182029290920101526004830154825191169082906001908110611de657611de6613f92565b73ffffffffffffffffffffffffffffffffffffffff9283166020918202929092010152600383015460058401546040517f095ea7b3000000000000000000000000000000000000000000000000000000008152908316600482015260248101879052680100000000000000009091049091169063095ea7b3906044016020604051808303816000875af1158015611e81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea59190614606565b50600582015460009073ffffffffffffffffffffffffffffffffffffffff1663676528d1866103e8611ed9826103e5614623565b611ee3919061463a565b8530426040518663ffffffff1660e01b8152600401611f06959493929190614675565b6000604051808303816000875af1158015611f25573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052611f6b919081019061432e565b90508060018251611f7c9190613ff0565b81518110611f8c57611f8c613f92565b6020026020010151945060008360060154118015611fad5750826006015485115b15611fd4576006830154611fc290339061272d565b6006830154611fd19086613ff0565b94505b600b83015462010000900460ff1661200257611fff85611ffa6040870160208801613adb565b612887565b94505b600060405180606001604052808781526020018660200160208101906120289190613adb565b73ffffffffffffffffffffffffffffffffffffffff16815260200161205060408801886146be565b905067ffffffffffffffff81111561206a5761206a614077565b6040519080825280602002602001820160405280156120af57816020015b60408051808201909152600080825260208201528152602001906001900390816120885790505b509052905060005b6120c460408701876146be565b905081101561217757600086356120de60408901896146be565b848181106120ee576120ee613f92565b90506040020160200135896121039190614623565b61210d919061463a565b9050604051806040016040528088806040019061212a91906146be565b8581811061213a5761213a613f92565b905060400201600001358152602001828152508360400151838151811061216357612163613f92565b6020908102919091010152506001016120b7565b5061218181612311565b50505050505050565b6121b37fe85d5f1f8338cb18f500856d1568d0f3b0d0971f25b3ccd134475e991354edbf61228b565b7f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fda80548215801562010000027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffff909216919091179091557f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fcf9061225d576040517f35b09a5aef366d1fa9b039d6ab84497c23bf2d93aff6aca91e252ba6105efe9c90600090a15050565b6040517fc6404b709113a544b9229863045494557d5b0fcdf02222b87f5feb8c4144f60390600090a15b5050565b6122958133612a13565b50565b6122c17f6c0757dc3e6b28b2580c03fd9e96c274acf4f99d91fbec9b418fa1d70604ff1c61228b565b7f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fda80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b6040810151517f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fcf90600003612372576040517fff47559b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600b81015460ff16156123f45760005b8260400151518110156123ef576123e76123bc846040015183815181106123ab576123ab613f92565b602002602001015160000151612aa4565b60200151846040015183815181106123d6576123d6613f92565b602002602001015160200151612bd6565b600101612382565b505050565b60018181018054808301825560009182526020808320865160039093020191825585015192810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909416939093179092555b8360400151518110156124f4578160020160405180604001604052808660400151848151811061249157612491613f92565b6020026020010151600001518152602001866040015184815181106124b8576124b8613f92565b6020908102919091018101518101519091528254600181810185556000948552938290208351600290920201908155910151908201550161245f565b506040517f1899e1ef2ab1c39f90ce7819a51f1bab74d6fe2da1b56995e43af8f8549654ed90600090a1505050565b7f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fda5482907f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fcf90610100900460ff16801561258a5750600781015467ffffffffffffffff1615155b80156125ab575073ffffffffffffffffffffffffffffffffffffffff831615155b15612725576007810154600090620f4240906125d19067ffffffffffffffff1685614623565b6125db919061463a565b90506125e78184613ff0565b92508082600a0160008282546125fd9190614726565b9091555050600982018190556008820180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8681169182179092556040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526004810191909152602481018390529087169063a9059cbb906044016020604051808303816000875af11580156126b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126d49190614606565b506040805182815273ffffffffffffffffffffffffffffffffffffffff861660208201527fb36d901fccb6f536689eeb11a0ae1432218e5e52acaf7a8e7eb7693197fb3fae910160405180910390a1505b509392505050565b80471015612797576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016105bf565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d80600081146127f1576040519150601f19603f3d011682016040523d82523d6000602084013e6127f6565b606091505b50509050806123ef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016105bf565b7f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fda5482907f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fcf90610100900460ff1680156128ee5750600781015467ffffffffffffffff1615155b801561290f575073ffffffffffffffffffffffffffffffffffffffff831615155b15612a0c576007810154600090620f4240906129359067ffffffffffffffff1685614623565b61293f919061463a565b905061294b8184613ff0565b92508082600a0160008282546129619190614726565b9091555050600982018190556008820180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86169081179091556129bc908261272d565b6040805182815273ffffffffffffffffffffffffffffffffffffffff861660208201527fb36d901fccb6f536689eeb11a0ae1432218e5e52acaf7a8e7eb7693197fb3fae910160405180910390a1505b5092915050565b612a1d828261359e565b61228757612a2a816135f7565b612a35836020613616565b604051602001612a46929190614739565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a00000000000000000000000000000000000000000000000000000000082526105bf916004016147ba565b612ace60408051608081018252600080825260208201819052909182019081526020016000905290565b60008281527f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbdc6020908152604091829020825160808101845281548152600182015473ffffffffffffffffffffffffffffffffffffffff8116938201939093527f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbd69390929083019074010000000000000000000000000000000000000000900460ff166003811115612b8257612b826147cd565b6003811115612b9357612b936147cd565b81526020016001820160159054906101000a900460ff166002811115612bbb57612bbb6147cd565b6002811115612bcc57612bcc6147cd565b9052509392505050565b7f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fcf73ffffffffffffffffffffffffffffffffffffffff831661352a578160005b8254811015613523576000612c2c826001614726565b8454149050600081612c95576003850154855467ffffffffffffffff90911690869085908110612c5e57612c5e613f92565b6000918252602090912060016003909202010154612c869067ffffffffffffffff1688614623565b612c90919061463a565b612c97565b835b905081612cad57612ca88185613ff0565b612cb0565b60005b93506001856000018481548110612cc957612cc9613f92565b9060005260206000209060030201600201805490501115613153576000856000018481548110612cfb57612cfb613f92565b90600052602060002090600302016002016001876000018681548110612d2357612d23613f92565b906000526020600020906003020160020180549050612d429190613ff0565b81548110612d5257612d52613f92565b60009182526020822001546005880154885473ffffffffffffffffffffffffffffffffffffffff928316945091169063a2a1623d90859084908b908a908110612d9d57612d9d613f92565b9060005260206000209060030201600201612e028c6000018b81548110612dc657612dc6613f92565b600091825260209091206003909102016001015468010000000000000000900473ffffffffffffffffffffffffffffffffffffffff163b151590565b612e52578b6000018a81548110612e1b57612e1b613f92565b906000526020600020906003020160010160089054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612e54565b305b426040518663ffffffff1660e01b8152600401612e7494939291906147fc565b60006040518083038185885af1158015612e92573d6000803e3d6000fd5b50505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052612ed9919081019061432e565b90508060018251612eea9190613ff0565b81518110612efa57612efa613f92565b60200260200101519250612f1c876000018681548110612dc657612dc6613f92565b156130c8578173ffffffffffffffffffffffffffffffffffffffff1663095ea7b3886000018781548110612f5257612f52613f92565b600091825260209091206003909102016001015460405160e083901b7fffffffff000000000000000000000000000000000000000000000000000000001681526801000000000000000090910473ffffffffffffffffffffffffffffffffffffffff166004820152602481018690526044016020604051808303816000875af1158015612fe3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130079190614606565b5086600001858154811061301d5761301d613f92565b60009182526020909120600390910201600101546040517f47e7ef2400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526024820186905268010000000000000000909204909116906347e7ef2490604401600060405180830381600087803b1580156130af57600080fd5b505af11580156130c3573d6000803e3d6000fd5b505050505b7fb649c98f58055c520df0dcb5709eff2e931217ff2fb1e21376130d31bbb1c0af8760000186815481106130fe576130fe613f92565b60009182526020918290206003919091020160010154604080516801000000000000000090920473ffffffffffffffffffffffffffffffffffffffff1682529181018690520160405180910390a1505061350e565b61316b856000018481548110612dc657612dc6613f92565b1561343457600480860154604080517fd0e30db0000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff9092169263d0e30db0928592808301926000929182900301818588803b1580156131dd57600080fd5b505af11580156131f1573d6000803e3d6000fd5b5050506004870154875473ffffffffffffffffffffffffffffffffffffffff909116925063095ea7b3915087908690811061322e5761322e613f92565b600091825260209091206003909102016001015460405160e083901b7fffffffff000000000000000000000000000000000000000000000000000000001681526801000000000000000090910473ffffffffffffffffffffffffffffffffffffffff166004820152602481018490526044016020604051808303816000875af11580156132bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132e39190614606565b508460000183815481106132f9576132f9613f92565b60009182526020909120600390910201600101546004868101546040517f47e7ef2400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff918216928101929092526024820184905268010000000000000000909204909116906347e7ef2490604401600060405180830381600087803b15801561339357600080fd5b505af11580156133a7573d6000803e3d6000fd5b505050507fb649c98f58055c520df0dcb5709eff2e931217ff2fb1e21376130d31bbb1c0af8560000184815481106133e1576133e1613f92565b60009182526020918290206003919091020160010154604080516801000000000000000090920473ffffffffffffffffffffffffffffffffffffffff1682529181018490520160405180910390a161350e565b6134898186600001858154811061344d5761344d613f92565b600091825260209091206003909102016001015468010000000000000000900473ffffffffffffffffffffffffffffffffffffffff169061272d565b7fb649c98f58055c520df0dcb5709eff2e931217ff2fb1e21376130d31bbb1c0af8560000184815481106134bf576134bf613f92565b60009182526020918290206003919091020160010154604080516801000000000000000090920473ffffffffffffffffffffffffffffffffffffffff1682529181018490520160405180910390a15b5050808061351b90614885565b915050612c16565b5050505050565b61354a73ffffffffffffffffffffffffffffffffffffffff84168361272d565b6040805173ffffffffffffffffffffffffffffffffffffffff85168152602081018490527fb649c98f58055c520df0dcb5709eff2e931217ff2fb1e21376130d31bbb1c0af910160405180910390a1505050565b60008281527ff72ca309d9a3d085eca8abc0d0f1efd7a9682e454e7a123eb852dac23bbd2afa6020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff165b92915050565b60606135f173ffffffffffffffffffffffffffffffffffffffff831660145b60606000613625836002614623565b613630906002614726565b67ffffffffffffffff81111561364857613648614077565b6040519080825280601f01601f191660200182016040528015613672576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106136a9576136a9613f92565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061370c5761370c613f92565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000613748846002614623565b613753906001614726565b90505b60018111156137f0577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061379457613794613f92565b1a60f81b8282815181106137aa576137aa613f92565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c936137e9816148bd565b9050613756565b508315613859576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016105bf565b9392505050565b508054600082556003029060005260206000209081019061229591906139c4565b8280548282559060005260206000209081019282156138c15760005260206000209182015b828111156138c15782548255916001019190600101906138a6565b506138cd929150613a19565b5090565b5080546138dd90614024565b6000825580601f106138ed575050565b601f0160209004906000526020600020908101906122959190613a19565b50805460008255906000526020600020908101906122959190613a19565b50805460008255600302906000526020600020908101906122959190613a2e565b8280548282559060005260206000209081019282156138c1579160200282015b828111156138c157825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90911617825560209092019160019091019061396a565b808211156138cd5760006139d882826138d1565b6001820180547fffffffff00000000000000000000000000000000000000000000000000000000169055613a1060028301600061390b565b506003016139c4565b5b808211156138cd5760008155600101613a1a565b808211156138cd5760008082556001820180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055613a726002830182613a7b565b50600301613a2e565b508054600082556002029060005260206000209081019061229591905b808211156138cd5760008082556001820155600201613a98565b803573ffffffffffffffffffffffffffffffffffffffff81168114613ad657600080fd5b919050565b600060208284031215613aed57600080fd5b61385982613ab2565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015613bce578984037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc00186528251805185528881015173ffffffffffffffffffffffffffffffffffffffff16898601528701516060888601819052815190860181905290890190608086019084905b80821015613bb9578351805184528c01518c840152928b0192918a019160019190910190613b90565b50509689019694505091870191600101613b1e565b50919998505050505050505050565b803567ffffffffffffffff81168114613ad657600080fd5b600060208284031215613c0757600080fd5b61385982613bdd565b600060208284031215613c2257600080fd5b5035919050565b600060208284031215613c3b57600080fd5b813567ffffffffffffffff811115613c5257600080fd5b82016080818503121561385957600080fd5b60005b83811015613c7f578181015183820152602001613c67565b50506000910152565b60008151808452613ca0816020860160208601613c64565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600081518084526020808501945080840160005b83811015613d1857815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101613ce6565b509495945050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015613def577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0898403018552815160808151818652613d8e82870182613c88565b91505067ffffffffffffffff89830151168986015273ffffffffffffffffffffffffffffffffffffffff88830151168886015260608083015192508582038187015250613ddb8183613cd2565b968901969450505090860190600101613d4a565b509098975050505050505050565b60008083601f840112613e0f57600080fd5b50813567ffffffffffffffff811115613e2757600080fd5b6020830191508360208260051b8501011115613e4257600080fd5b9250929050565b60008060008060408587031215613e5f57600080fd5b843567ffffffffffffffff80821115613e7757600080fd5b613e8388838901613dfd565b90965094506020870135915080821115613e9c57600080fd5b50613ea987828801613dfd565b95989497509550505050565b60008060008060808587031215613ecb57600080fd5b613ed485613ab2565b9350613ee260208601613ab2565b9250613ef060408601613ab2565b9150613efe60608601613bdd565b905092959194509250565b600080600060608486031215613f1e57600080fd5b613f2784613ab2565b925060208401359150604084013567ffffffffffffffff811115613f4a57600080fd5b840160608187031215613f5c57600080fd5b809150509250925092565b801515811461229557600080fd5b600060208284031215613f8757600080fd5b813561385981613f67565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b818103818111156135f1576135f1613fc1565b67ffffffffffffffff828116828216039080821115612a0c57612a0c613fc1565b600181811c9082168061403857607f821691505b602082108103614071577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b601f8211156123ef57600081815260208120601f850160051c810160208610156140cd5750805b601f850160051c820191505b818110156140ec578281556001016140d9565b505050505050565b8181036140ff575050565b6141098254614024565b67ffffffffffffffff81111561412157614121614077565b6141358161412f8454614024565b846140a6565b6000601f82116001811461418757600083156141515750848201545b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600385901b1c1916600184901b178455613523565b6000858152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0841690600086815260209020845b838110156141df57828601548255600195860195909101906020016141bf565b508583101561421b57818501547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261428f57600080fd5b83018035915067ffffffffffffffff8211156142aa57600080fd5b6020019150600581901b3603821315613e4257600080fd5b8183526000602080850194508260005b85811015613d185773ffffffffffffffffffffffffffffffffffffffff6142f883613ab2565b16875295820195908201906001016142d2565b8381526040602082015260006143256040830184866142c2565b95945050505050565b6000602080838503121561434157600080fd5b825167ffffffffffffffff8082111561435957600080fd5b818501915085601f83011261436d57600080fd5b81518181111561437f5761437f614077565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811085821117156143c2576143c2614077565b6040529182528482019250838101850191888311156143e057600080fd5b938501935b828510156143fe578451845293850193928501926143e5565b98975050505050505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261443f57600080fd5b83018035915067ffffffffffffffff82111561445a57600080fd5b602001915036819003821315613e4257600080fd5b815167ffffffffffffffff81111561448957614489614077565b6144978161412f8454614024565b602080601f8311600181146144ea57600084156144b45750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b1785556140ec565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b8281101561453757888601518255948401946001909101908401614518565b508582101561421b5793909601517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f8600387901b161c19169092555050600190811b01905550565b67ffffffffffffffff818116838216019080821115612a0c57612a0c613fc1565b6040815260006145b66040830186886142c2565b8281036020848101919091528482528591810160005b868110156145f95767ffffffffffffffff6145e685613bdd565b16825292820192908201906001016145cc565b5098975050505050505050565b60006020828403121561461857600080fd5b815161385981613f67565b80820281158282048414176135f1576135f1613fc1565b600082614670577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b85815284602082015260a06040820152600061469460a0830186613cd2565b73ffffffffffffffffffffffffffffffffffffffff94909416606083015250608001529392505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126146f357600080fd5b83018035915067ffffffffffffffff82111561470e57600080fd5b6020019150600681901b3603821315613e4257600080fd5b808201808211156135f1576135f1613fc1565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614771816017850160208801613c64565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516147ae816028840160208801613c64565b01602801949350505050565b6020815260006138596020830184613c88565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600060808201868352602060808185015281875480845260a0860191508860005282600020935060005b8181101561485857845473ffffffffffffffffffffffffffffffffffffffff1683526001948501949284019201614826565b505073ffffffffffffffffffffffffffffffffffffffff9690961660408501525050506060015292915050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036148b6576148b6613fc1565b5060010190565b6000816148cc576148cc613fc1565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fea2646970667358221220415e2900051318f0febe88e716d49ee9f0faa10fd720c3a2ee3f13a25605a0f364736f6c63430008130033",
  "deployedBytecode": "0x60806040526004361061016a5760003560e01c806385629f1e116100cb578063b0097e501161007f578063c3bca53f11610059578063c3bca53f14610492578063ca810097146104c9578063cbd877ab1461050657600080fd5b8063b0097e5014610455578063ba37993b1461046a578063c218d5e41461047f57600080fd5b80639140f486116100b05780639140f4861461037a578063a5acbb781461039a578063a61ee9c6146103ba57600080fd5b806385629f1e14610343578063882f192f1461036557600080fd5b80633b814245116101225780634d62b623116101075780634d62b623146102ee5780634e24cc1e1461030357806369bbd7ae1461032357600080fd5b80633b8142451461029057806348f47a49146102b057600080fd5b8063200383c611610153578063200383c6146101de57806322429073146102005780632eaa32ae1461023d57600080fd5b806308057f7e1461016f5780630c31e47114610191575b600080fd5b34801561017b57600080fd5b5061018f61018a366004613adb565b610526565b005b34801561019d57600080fd5b507f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fda54610100900460ff165b60405190151581526020015b60405180910390f35b3480156101ea57600080fd5b506101f36109c6565b6040516101d59190613af6565b34801561020c57600080fd5b507f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fd9546040519081526020016101d5565b34801561024957600080fd5b507f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fd65467ffffffffffffffff165b60405167ffffffffffffffff90911681526020016101d5565b34801561029c57600080fd5b5061018f6102ab366004613bf5565b610ade565b3480156102bc57600080fd5b507f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fd25467ffffffffffffffff16610277565b3480156102fa57600080fd5b5061018f610baf565b34801561030f57600080fd5b5061018f61031e366004613c10565b610ddb565b34801561032f57600080fd5b5061018f61033e366004613c29565b610e7a565b34801561034f57600080fd5b5061035861122a565b6040516101d59190613d23565b34801561037157600080fd5b5061018f6113e7565b34801561038657600080fd5b5061018f610395366004613e49565b6114a9565b3480156103a657600080fd5b5061018f6103b5366004613eb5565b61194f565b3480156103c657600080fd5b506104297f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fd7547f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fd85473ffffffffffffffffffffffffffffffffffffffff90911691565b6040805173ffffffffffffffffffffffffffffffffffffffff90931683526020830191909152016101d5565b34801561046157600080fd5b5061018f611afd565b34801561047657600080fd5b5061018f611b5b565b61018f61048d366004613f09565b611c19565b34801561049e57600080fd5b507f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fda5460ff166101c9565b3480156104d557600080fd5b507f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fda5462010000900460ff166101c9565b34801561051257600080fd5b5061018f610521366004613f75565b61218a565b61054f7fe85d5f1f8338cb18f500856d1568d0f3b0d0971f25b3ccd134475e991354edbf61228b565b7f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fcf80546000036105c8576040517f2c883a4e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024015b60405180910390fd5b805460010361065d576105dc816000613860565b73ffffffffffffffffffffffffffffffffffffffff821660009081526002820160205260408120556003810180547fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000169055600b810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055610978565b60005b81548110156108eb578273ffffffffffffffffffffffffffffffffffffffff1682600001828154811061069557610695613f92565b600091825260209091206003909102016001015468010000000000000000900473ffffffffffffffffffffffffffffffffffffffff16036108e35773ffffffffffffffffffffffffffffffffffffffff83166000908152600283016020819052604082208290558354839290859061070f90600190613ff0565b8154811061071f5761071f613f92565b600091825260208083206003929092029091016001015468010000000000000000900473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001902055815482908290811061077a5761077a613f92565b60009182526020822060039182020160010154908401805467ffffffffffffffff9283169391926107ad91859116614003565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555081600001600183600001805490506107eb9190613ff0565b815481106107fb576107fb613f92565b906000526020600020906003020182600001828154811061081e5761081e613f92565b600091825260209091206003909102018061083983826140f4565b506001828101805491830180547fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000811667ffffffffffffffff9094169384178255915473ffffffffffffffffffffffffffffffffffffffff680100000000000000009182900416027fffffffff00000000000000000000000000000000000000000000000000000000909216909217179055600280830180546108df9284019190613881565b5050505b600101610660565b5080548190806108fd576108fd61422b565b6000828152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019160038302019061093b82826138d1565b6001820180547fffffffff0000000000000000000000000000000000000000000000000000000016905561097360028301600061390b565b505090555b60405173ffffffffffffffffffffffffffffffffffffffff831681527f2771977f239a332de92ab37b7275685268f164e51cda8f1356692695f4708f2f906020015b60405180910390a15050565b606060007f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fcf6001810180546040805160208084028201810190925282815293945060009084015b82821015610ad45760008481526020808220604080516060810182526003870290920180548352600181015473ffffffffffffffffffffffffffffffffffffffff168385015260028101805483518187028101870185528181529496929593870194939192909184015b82821015610abd57838290600052602060002090600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190610a77565b505050508152505081526020019060010190610a0d565b5050505091505090565b610b077fe85d5f1f8338cb18f500856d1568d0f3b0d0971f25b3ccd134475e991354edbf61228b565b7f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fd680547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff83169081179091556040519081527f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fcf907faa207cc615c6c44dcee3fa661ad994d053cff5cdd9bca952728af0dad3563a40906020016109ba565b610bd87fe85d5f1f8338cb18f500856d1568d0f3b0d0971f25b3ccd134475e991354edbf61228b565b7f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fcf8054600003610c34576040517fa2743a7600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610c3e6001612298565b600b810154610100900460ff168015610c7c57600b820180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b600182015415610d795760005b6001830154811015610d6a57610d62836001018281548110610cad57610cad613f92565b6000918252602080832060408051606081018252600390940290910180548452600181015473ffffffffffffffffffffffffffffffffffffffff1684840152600281018054835181860281018601855281815295969295938701949192909184015b82821015610d5557838290600052602060002090600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190610d0f565b5050505081525050612311565b600101610c89565b50610d79600183016000613929565b8015610dae57600b820180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b6040517fcaec521e84e0f554a179e69c042f43833410c17af29a4385f244c61e24d3759a90600090a15050565b610e047fe85d5f1f8338cb18f500856d1568d0f3b0d0971f25b3ccd134475e991354edbf61228b565b7f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fd58190556040518181527f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fcf907fafe6e712b74180d809a4bac428e6e6a406f71406d3b40539633988706e34864f906020016109ba565b610ea37fe85d5f1f8338cb18f500856d1568d0f3b0d0971f25b3ccd134475e991354edbf61228b565b7f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fcf6001610ed3606084018461425a565b90501115610f8f57600581015473ffffffffffffffffffffffffffffffffffffffff1663d06ca61f620f4240610f0c606086018661425a565b6040518463ffffffff1660e01b8152600401610f2a9392919061430b565b600060405180830381865afa158015610f47573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610f8d919081019061432e565b505b8054600282016000610fa76060860160408701613adb565b73ffffffffffffffffffffffffffffffffffffffff1681526020810191909152604090810160002091909155805160808101909152819080610fe9858061440a565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050908252506020908101906110369060408701908701613bf5565b67ffffffffffffffff1681526020016110556060860160408701613adb565b73ffffffffffffffffffffffffffffffffffffffff16815260200161107d606086018661425a565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201829052509390945250508354600181018555938152602090208251929360030201918291506110d5908261446f565b50602082810151600183018054604086015173ffffffffffffffffffffffffffffffffffffffff1668010000000000000000027fffffffff0000000000000000000000000000000000000000000000000000000090911667ffffffffffffffff9093169290921791909117905560608301518051611159926002850192019061394a565b5061116d9150506040830160208401613bf5565b60038201805460009061118b90849067ffffffffffffffff16614581565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507f42ea758b36503bebd3662e8d5c70ce30b8e8978ba723afeb769bbc834895d25d8260400160208101906111e59190613adb565b6111f56040850160208601613bf5565b6040805173ffffffffffffffffffffffffffffffffffffffff909316835267ffffffffffffffff9091166020830152016109ba565b606060007f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fcf80546040805160208084028201810190925282815292935083919060009084015b82821015610ad457838290600052602060002090600302016040518060800160405290816000820180546112a390614024565b80601f01602080910402602001604051908101604052809291908181526020018280546112cf90614024565b801561131c5780601f106112f15761010080835404028352916020019161131c565b820191906000526020600020905b8154815290600101906020018083116112ff57829003601f168201915b5050509183525050600182015467ffffffffffffffff81166020808401919091526801000000000000000090910473ffffffffffffffffffffffffffffffffffffffff1660408084019190915260028401805482518185028101850190935280835260609094019391929091908301828280156113cf57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116113a4575b50505050508152505081526020019060010190611270565b6114107fe85d5f1f8338cb18f500856d1568d0f3b0d0971f25b3ccd134475e991354edbf61228b565b7f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fda80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790556040517f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fcf907fb3f9087a67093bfe032e3e51f7ad7f4e203dd5d04e59beac34ce16a8b344f12e90600090a150565b6114d27fe85d5f1f8338cb18f500856d1568d0f3b0d0971f25b3ccd134475e991354edbf61228b565b8215806114dd575080155b806114e85750828114155b1561151f576040517f036896be00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fcf805460000361157b576040517fff47559b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8481101561190a5785858281811061159857611598613f92565b90506020020160208101906115ad9190613adb565b73ffffffffffffffffffffffffffffffffffffffff16826002810160008989868181106115dc576115dc613f92565b90506020020160208101906115f19190613adb565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548154811061163c5761163c613f92565b600091825260209091206003909102016001015468010000000000000000900473ffffffffffffffffffffffffffffffffffffffff16146116e95785858281811061168957611689613f92565b905060200201602081019061169e9190613adb565b6040517f2c883a4e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911660048201526024016105bf565b8160028101600088888581811061170257611702613f92565b90506020020160208101906117179190613adb565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548154811061176257611762613f92565b60009182526020822060039182020160010154908401805467ffffffffffffffff92831693919261179591859116614003565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508383828181106117cd576117cd613f92565b90506020020160208101906117e29190613bf5565b826002810160008989868181106117fb576117fb613f92565b90506020020160208101906118109190613adb565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548154811061185b5761185b613f92565b906000526020600020906003020160010160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508383828181106118a4576118a4613f92565b90506020020160208101906118b99190613bf5565b6003830180546000906118d790849067ffffffffffffffff16614581565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550808060010191505061157e565b507f7c3e3b7fa09a990b8501620414022e5e7e9a8d538426b535599c9896075739588585858560405161194094939291906145a2565b60405180910390a15050505050565b6119787ffc425f2263d0df187444b70e47283d622c70181c5baebb1306a01edba1ce184c61228b565b7f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fda547f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fcf906301000000900460ff16156119fd576040517f0dc149f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60078101805467ffffffffffffffff9093167fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000009093169290921790915560038101805473ffffffffffffffffffffffffffffffffffffffff95861668010000000000000000027fffffffff0000000000000000000000000000000000000000ffffffffffffffff9091161790556004810180549385167fffffffffffffffffffffffff0000000000000000000000000000000000000000948516179055600581018054929094169190921617909155600b0180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000ffff166301000000179055565b611b267fe85d5f1f8338cb18f500856d1568d0f3b0d0971f25b3ccd134475e991354edbf61228b565b611b306000612298565b6040517fbe5adf618cbdb160d8186c8f607a42f19897ec0d80fdbc9565484b3f09fba72f90600090a1565b611b847fe85d5f1f8338cb18f500856d1568d0f3b0d0971f25b3ccd134475e991354edbf61228b565b7f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fda80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690556040517f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fcf907f07f03cdf838d002e75546c9218388e1f0cd1e66b79264dc1016ea9720e13a5a690600090a150565b611c427f77f52ccf2f32e71a0cff8f14ad8c8303b7d2e4c7609b8fba963114f4db2af76761228b565b7f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fd2547f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fcf9073ffffffffffffffffffffffffffffffffffffffff858116680100000000000000009092041614611ce3576040517fa0f3feea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600003611d1d576040517f9cf8540c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600b81015462010000900460ff1615611d4d57611d4a8484611d456040860160208701613adb565b612523565b92505b6040805160028082526060820183526000926020830190803683370190505090508160030160089054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600081518110611da657611da6613f92565b73ffffffffffffffffffffffffffffffffffffffff92831660209182029290920101526004830154825191169082906001908110611de657611de6613f92565b73ffffffffffffffffffffffffffffffffffffffff9283166020918202929092010152600383015460058401546040517f095ea7b3000000000000000000000000000000000000000000000000000000008152908316600482015260248101879052680100000000000000009091049091169063095ea7b3906044016020604051808303816000875af1158015611e81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea59190614606565b50600582015460009073ffffffffffffffffffffffffffffffffffffffff1663676528d1866103e8611ed9826103e5614623565b611ee3919061463a565b8530426040518663ffffffff1660e01b8152600401611f06959493929190614675565b6000604051808303816000875af1158015611f25573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052611f6b919081019061432e565b90508060018251611f7c9190613ff0565b81518110611f8c57611f8c613f92565b6020026020010151945060008360060154118015611fad5750826006015485115b15611fd4576006830154611fc290339061272d565b6006830154611fd19086613ff0565b94505b600b83015462010000900460ff1661200257611fff85611ffa6040870160208801613adb565b612887565b94505b600060405180606001604052808781526020018660200160208101906120289190613adb565b73ffffffffffffffffffffffffffffffffffffffff16815260200161205060408801886146be565b905067ffffffffffffffff81111561206a5761206a614077565b6040519080825280602002602001820160405280156120af57816020015b60408051808201909152600080825260208201528152602001906001900390816120885790505b509052905060005b6120c460408701876146be565b905081101561217757600086356120de60408901896146be565b848181106120ee576120ee613f92565b90506040020160200135896121039190614623565b61210d919061463a565b9050604051806040016040528088806040019061212a91906146be565b8581811061213a5761213a613f92565b905060400201600001358152602001828152508360400151838151811061216357612163613f92565b6020908102919091010152506001016120b7565b5061218181612311565b50505050505050565b6121b37fe85d5f1f8338cb18f500856d1568d0f3b0d0971f25b3ccd134475e991354edbf61228b565b7f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fda80548215801562010000027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffff909216919091179091557f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fcf9061225d576040517f35b09a5aef366d1fa9b039d6ab84497c23bf2d93aff6aca91e252ba6105efe9c90600090a15050565b6040517fc6404b709113a544b9229863045494557d5b0fcdf02222b87f5feb8c4144f60390600090a15b5050565b6122958133612a13565b50565b6122c17f6c0757dc3e6b28b2580c03fd9e96c274acf4f99d91fbec9b418fa1d70604ff1c61228b565b7f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fda80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b6040810151517f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fcf90600003612372576040517fff47559b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600b81015460ff16156123f45760005b8260400151518110156123ef576123e76123bc846040015183815181106123ab576123ab613f92565b602002602001015160000151612aa4565b60200151846040015183815181106123d6576123d6613f92565b602002602001015160200151612bd6565b600101612382565b505050565b60018181018054808301825560009182526020808320865160039093020191825585015192810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909416939093179092555b8360400151518110156124f4578160020160405180604001604052808660400151848151811061249157612491613f92565b6020026020010151600001518152602001866040015184815181106124b8576124b8613f92565b6020908102919091018101518101519091528254600181810185556000948552938290208351600290920201908155910151908201550161245f565b506040517f1899e1ef2ab1c39f90ce7819a51f1bab74d6fe2da1b56995e43af8f8549654ed90600090a1505050565b7f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fda5482907f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fcf90610100900460ff16801561258a5750600781015467ffffffffffffffff1615155b80156125ab575073ffffffffffffffffffffffffffffffffffffffff831615155b15612725576007810154600090620f4240906125d19067ffffffffffffffff1685614623565b6125db919061463a565b90506125e78184613ff0565b92508082600a0160008282546125fd9190614726565b9091555050600982018190556008820180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8681169182179092556040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526004810191909152602481018390529087169063a9059cbb906044016020604051808303816000875af11580156126b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126d49190614606565b506040805182815273ffffffffffffffffffffffffffffffffffffffff861660208201527fb36d901fccb6f536689eeb11a0ae1432218e5e52acaf7a8e7eb7693197fb3fae910160405180910390a1505b509392505050565b80471015612797576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016105bf565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d80600081146127f1576040519150601f19603f3d011682016040523d82523d6000602084013e6127f6565b606091505b50509050806123ef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016105bf565b7f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fda5482907f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fcf90610100900460ff1680156128ee5750600781015467ffffffffffffffff1615155b801561290f575073ffffffffffffffffffffffffffffffffffffffff831615155b15612a0c576007810154600090620f4240906129359067ffffffffffffffff1685614623565b61293f919061463a565b905061294b8184613ff0565b92508082600a0160008282546129619190614726565b9091555050600982018190556008820180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86169081179091556129bc908261272d565b6040805182815273ffffffffffffffffffffffffffffffffffffffff861660208201527fb36d901fccb6f536689eeb11a0ae1432218e5e52acaf7a8e7eb7693197fb3fae910160405180910390a1505b5092915050565b612a1d828261359e565b61228757612a2a816135f7565b612a35836020613616565b604051602001612a46929190614739565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a00000000000000000000000000000000000000000000000000000000082526105bf916004016147ba565b612ace60408051608081018252600080825260208201819052909182019081526020016000905290565b60008281527f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbdc6020908152604091829020825160808101845281548152600182015473ffffffffffffffffffffffffffffffffffffffff8116938201939093527f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbd69390929083019074010000000000000000000000000000000000000000900460ff166003811115612b8257612b826147cd565b6003811115612b9357612b936147cd565b81526020016001820160159054906101000a900460ff166002811115612bbb57612bbb6147cd565b6002811115612bcc57612bcc6147cd565b9052509392505050565b7f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fcf73ffffffffffffffffffffffffffffffffffffffff831661352a578160005b8254811015613523576000612c2c826001614726565b8454149050600081612c95576003850154855467ffffffffffffffff90911690869085908110612c5e57612c5e613f92565b6000918252602090912060016003909202010154612c869067ffffffffffffffff1688614623565b612c90919061463a565b612c97565b835b905081612cad57612ca88185613ff0565b612cb0565b60005b93506001856000018481548110612cc957612cc9613f92565b9060005260206000209060030201600201805490501115613153576000856000018481548110612cfb57612cfb613f92565b90600052602060002090600302016002016001876000018681548110612d2357612d23613f92565b906000526020600020906003020160020180549050612d429190613ff0565b81548110612d5257612d52613f92565b60009182526020822001546005880154885473ffffffffffffffffffffffffffffffffffffffff928316945091169063a2a1623d90859084908b908a908110612d9d57612d9d613f92565b9060005260206000209060030201600201612e028c6000018b81548110612dc657612dc6613f92565b600091825260209091206003909102016001015468010000000000000000900473ffffffffffffffffffffffffffffffffffffffff163b151590565b612e52578b6000018a81548110612e1b57612e1b613f92565b906000526020600020906003020160010160089054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612e54565b305b426040518663ffffffff1660e01b8152600401612e7494939291906147fc565b60006040518083038185885af1158015612e92573d6000803e3d6000fd5b50505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052612ed9919081019061432e565b90508060018251612eea9190613ff0565b81518110612efa57612efa613f92565b60200260200101519250612f1c876000018681548110612dc657612dc6613f92565b156130c8578173ffffffffffffffffffffffffffffffffffffffff1663095ea7b3886000018781548110612f5257612f52613f92565b600091825260209091206003909102016001015460405160e083901b7fffffffff000000000000000000000000000000000000000000000000000000001681526801000000000000000090910473ffffffffffffffffffffffffffffffffffffffff166004820152602481018690526044016020604051808303816000875af1158015612fe3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130079190614606565b5086600001858154811061301d5761301d613f92565b60009182526020909120600390910201600101546040517f47e7ef2400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526024820186905268010000000000000000909204909116906347e7ef2490604401600060405180830381600087803b1580156130af57600080fd5b505af11580156130c3573d6000803e3d6000fd5b505050505b7fb649c98f58055c520df0dcb5709eff2e931217ff2fb1e21376130d31bbb1c0af8760000186815481106130fe576130fe613f92565b60009182526020918290206003919091020160010154604080516801000000000000000090920473ffffffffffffffffffffffffffffffffffffffff1682529181018690520160405180910390a1505061350e565b61316b856000018481548110612dc657612dc6613f92565b1561343457600480860154604080517fd0e30db0000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff9092169263d0e30db0928592808301926000929182900301818588803b1580156131dd57600080fd5b505af11580156131f1573d6000803e3d6000fd5b5050506004870154875473ffffffffffffffffffffffffffffffffffffffff909116925063095ea7b3915087908690811061322e5761322e613f92565b600091825260209091206003909102016001015460405160e083901b7fffffffff000000000000000000000000000000000000000000000000000000001681526801000000000000000090910473ffffffffffffffffffffffffffffffffffffffff166004820152602481018490526044016020604051808303816000875af11580156132bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132e39190614606565b508460000183815481106132f9576132f9613f92565b60009182526020909120600390910201600101546004868101546040517f47e7ef2400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff918216928101929092526024820184905268010000000000000000909204909116906347e7ef2490604401600060405180830381600087803b15801561339357600080fd5b505af11580156133a7573d6000803e3d6000fd5b505050507fb649c98f58055c520df0dcb5709eff2e931217ff2fb1e21376130d31bbb1c0af8560000184815481106133e1576133e1613f92565b60009182526020918290206003919091020160010154604080516801000000000000000090920473ffffffffffffffffffffffffffffffffffffffff1682529181018490520160405180910390a161350e565b6134898186600001858154811061344d5761344d613f92565b600091825260209091206003909102016001015468010000000000000000900473ffffffffffffffffffffffffffffffffffffffff169061272d565b7fb649c98f58055c520df0dcb5709eff2e931217ff2fb1e21376130d31bbb1c0af8560000184815481106134bf576134bf613f92565b60009182526020918290206003919091020160010154604080516801000000000000000090920473ffffffffffffffffffffffffffffffffffffffff1682529181018490520160405180910390a15b5050808061351b90614885565b915050612c16565b5050505050565b61354a73ffffffffffffffffffffffffffffffffffffffff84168361272d565b6040805173ffffffffffffffffffffffffffffffffffffffff85168152602081018490527fb649c98f58055c520df0dcb5709eff2e931217ff2fb1e21376130d31bbb1c0af910160405180910390a1505050565b60008281527ff72ca309d9a3d085eca8abc0d0f1efd7a9682e454e7a123eb852dac23bbd2afa6020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff165b92915050565b60606135f173ffffffffffffffffffffffffffffffffffffffff831660145b60606000613625836002614623565b613630906002614726565b67ffffffffffffffff81111561364857613648614077565b6040519080825280601f01601f191660200182016040528015613672576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106136a9576136a9613f92565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061370c5761370c613f92565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000613748846002614623565b613753906001614726565b90505b60018111156137f0577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061379457613794613f92565b1a60f81b8282815181106137aa576137aa613f92565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c936137e9816148bd565b9050613756565b508315613859576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016105bf565b9392505050565b508054600082556003029060005260206000209081019061229591906139c4565b8280548282559060005260206000209081019282156138c15760005260206000209182015b828111156138c15782548255916001019190600101906138a6565b506138cd929150613a19565b5090565b5080546138dd90614024565b6000825580601f106138ed575050565b601f0160209004906000526020600020908101906122959190613a19565b50805460008255906000526020600020908101906122959190613a19565b50805460008255600302906000526020600020908101906122959190613a2e565b8280548282559060005260206000209081019282156138c1579160200282015b828111156138c157825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90911617825560209092019160019091019061396a565b808211156138cd5760006139d882826138d1565b6001820180547fffffffff00000000000000000000000000000000000000000000000000000000169055613a1060028301600061390b565b506003016139c4565b5b808211156138cd5760008155600101613a1a565b808211156138cd5760008082556001820180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055613a726002830182613a7b565b50600301613a2e565b508054600082556002029060005260206000209081019061229591905b808211156138cd5760008082556001820155600201613a98565b803573ffffffffffffffffffffffffffffffffffffffff81168114613ad657600080fd5b919050565b600060208284031215613aed57600080fd5b61385982613ab2565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015613bce578984037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc00186528251805185528881015173ffffffffffffffffffffffffffffffffffffffff16898601528701516060888601819052815190860181905290890190608086019084905b80821015613bb9578351805184528c01518c840152928b0192918a019160019190910190613b90565b50509689019694505091870191600101613b1e565b50919998505050505050505050565b803567ffffffffffffffff81168114613ad657600080fd5b600060208284031215613c0757600080fd5b61385982613bdd565b600060208284031215613c2257600080fd5b5035919050565b600060208284031215613c3b57600080fd5b813567ffffffffffffffff811115613c5257600080fd5b82016080818503121561385957600080fd5b60005b83811015613c7f578181015183820152602001613c67565b50506000910152565b60008151808452613ca0816020860160208601613c64565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600081518084526020808501945080840160005b83811015613d1857815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101613ce6565b509495945050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015613def577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0898403018552815160808151818652613d8e82870182613c88565b91505067ffffffffffffffff89830151168986015273ffffffffffffffffffffffffffffffffffffffff88830151168886015260608083015192508582038187015250613ddb8183613cd2565b968901969450505090860190600101613d4a565b509098975050505050505050565b60008083601f840112613e0f57600080fd5b50813567ffffffffffffffff811115613e2757600080fd5b6020830191508360208260051b8501011115613e4257600080fd5b9250929050565b60008060008060408587031215613e5f57600080fd5b843567ffffffffffffffff80821115613e7757600080fd5b613e8388838901613dfd565b90965094506020870135915080821115613e9c57600080fd5b50613ea987828801613dfd565b95989497509550505050565b60008060008060808587031215613ecb57600080fd5b613ed485613ab2565b9350613ee260208601613ab2565b9250613ef060408601613ab2565b9150613efe60608601613bdd565b905092959194509250565b600080600060608486031215613f1e57600080fd5b613f2784613ab2565b925060208401359150604084013567ffffffffffffffff811115613f4a57600080fd5b840160608187031215613f5c57600080fd5b809150509250925092565b801515811461229557600080fd5b600060208284031215613f8757600080fd5b813561385981613f67565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b818103818111156135f1576135f1613fc1565b67ffffffffffffffff828116828216039080821115612a0c57612a0c613fc1565b600181811c9082168061403857607f821691505b602082108103614071577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b601f8211156123ef57600081815260208120601f850160051c810160208610156140cd5750805b601f850160051c820191505b818110156140ec578281556001016140d9565b505050505050565b8181036140ff575050565b6141098254614024565b67ffffffffffffffff81111561412157614121614077565b6141358161412f8454614024565b846140a6565b6000601f82116001811461418757600083156141515750848201545b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600385901b1c1916600184901b178455613523565b6000858152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0841690600086815260209020845b838110156141df57828601548255600195860195909101906020016141bf565b508583101561421b57818501547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261428f57600080fd5b83018035915067ffffffffffffffff8211156142aa57600080fd5b6020019150600581901b3603821315613e4257600080fd5b8183526000602080850194508260005b85811015613d185773ffffffffffffffffffffffffffffffffffffffff6142f883613ab2565b16875295820195908201906001016142d2565b8381526040602082015260006143256040830184866142c2565b95945050505050565b6000602080838503121561434157600080fd5b825167ffffffffffffffff8082111561435957600080fd5b818501915085601f83011261436d57600080fd5b81518181111561437f5761437f614077565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811085821117156143c2576143c2614077565b6040529182528482019250838101850191888311156143e057600080fd5b938501935b828510156143fe578451845293850193928501926143e5565b98975050505050505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261443f57600080fd5b83018035915067ffffffffffffffff82111561445a57600080fd5b602001915036819003821315613e4257600080fd5b815167ffffffffffffffff81111561448957614489614077565b6144978161412f8454614024565b602080601f8311600181146144ea57600084156144b45750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b1785556140ec565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b8281101561453757888601518255948401946001909101908401614518565b508582101561421b5793909601517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f8600387901b161c19169092555050600190811b01905550565b67ffffffffffffffff818116838216019080821115612a0c57612a0c613fc1565b6040815260006145b66040830186886142c2565b8281036020848101919091528482528591810160005b868110156145f95767ffffffffffffffff6145e685613bdd565b16825292820192908201906001016145cc565b5098975050505050505050565b60006020828403121561461857600080fd5b815161385981613f67565b80820281158282048414176135f1576135f1613fc1565b600082614670577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b85815284602082015260a06040820152600061469460a0830186613cd2565b73ffffffffffffffffffffffffffffffffffffffff94909416606083015250608001529392505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126146f357600080fd5b83018035915067ffffffffffffffff82111561470e57600080fd5b6020019150600681901b3603821315613e4257600080fd5b808201808211156135f1576135f1613fc1565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614771816017850160208801613c64565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516147ae816028840160208801613c64565b01602801949350505050565b6020815260006138596020830184613c88565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600060808201868352602060808185015281875480845260a0860191508860005282600020935060005b8181101561485857845473ffffffffffffffffffffffffffffffffffffffff1683526001948501949284019201614826565b505073ffffffffffffffffffffffffffffffffffffffff9690961660408501525050506060015292915050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036148b6576148b6613fc1565b5060010190565b6000816148cc576148cc613fc1565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fea2646970667358221220415e2900051318f0febe88e716d49ee9f0faa10fd720c3a2ee3f13a25605a0f364736f6c63430008130033",
  "devdoc": {
    "author": "Daniel <danieldegendev@gmail.com>",
    "custom:version": "1.0.0",
    "kind": "dev",
    "methods": {
      "addFeeDistributionReceiver((string,uint64,address,address[]))": {
        "details": "swapPath[] needs to have the base token address on position 0This method also checks if there is a valid swap path existing, otherwise it will be reverted by the aggregatoronly available to FEE_DISTRIBUTIOR_MANAGER role",
        "params": {
          "_params": "contains the name, points, account address und swapPath for the receiver"
        }
      },
      "disableFeeDistributorBounty()": {
        "details": "Disables the bounty possibilityonly available to FEE_DISTRIBUTIOR_MANAGER role"
      },
      "enableBountyInToken(bool)": {
        "details": "only available to FEE_DISTRIBUTIOR_MANAGER role",
        "params": {
          "_bountyInToken": "flag if enabled or not"
        }
      },
      "enableFeeDistributorBounty()": {
        "details": "Enables the bounty possibilityonly available to FEE_DISTRIBUTIOR_MANAGER role"
      },
      "getFeeDistributorBountyShare()": {
        "details": "Gets the bounty share",
        "returns": {
          "_share": "current bounty share"
        }
      },
      "getFeeDistributorLastBounty()": {
        "details": "Gets last bounty information",
        "returns": {
          "_payout": "amount being paid to recent receiver",
          "_receiver": "address of recent receiver"
        }
      },
      "getFeeDistributorQueue()": {
        "details": "Gets all items in queue",
        "returns": {
          "_queue": "array of sync items"
        }
      },
      "getFeeDistributorReceivers()": {
        "details": "Gets all shares",
        "returns": {
          "_shares": "array of configured shares"
        }
      },
      "getFeeDistributorTotalBounties()": {
        "details": "Gets the total bounties being paid",
        "returns": {
          "_totalBounties": "total bounties"
        }
      },
      "getFeeDistributorTotalPoints()": {
        "details": "Gets the current total points of all shares",
        "returns": {
          "_totalPoints": "points"
        }
      },
      "initFeeDistributorFacet(address,address,address,uint64)": {
        "details": "only available to DEPLOYER_ROLE",
        "params": {
          "_baseToken": "address of the expected token we get from the bridge",
          "_bountyShare": "share of bounty  (10000 = 1%, 1000 = 0.1%)",
          "_nativeWrapper": "address of native wrapper token on the operating chain",
          "_router": "uniswap v2 based router"
        }
      },
      "isFeeDistributorBountyActive()": {
        "details": "check whether the bounty is active of not",
        "returns": {
          "_is": "if true, it's on"
        }
      },
      "isFeeDistributorBountyInToken()": {
        "details": "check whether the distributors bounty is paid in the token or not",
        "returns": {
          "_is": "if true, it's paid in token"
        }
      },
      "isFeeDistributorRunning()": {
        "details": "check whether the distributor is running of not",
        "returns": {
          "_is": "if true, it's on"
        }
      },
      "pushFees(address,uint256,(uint256,address,(bytes32,uint256)[]))": {
        "details": "an updated dto needs to be created since the receiving amount is not      matching the sent amount anymore. The contract will 100% receive the      _token _amount before being executedonly available to FEE_DISTRIBUTOR_PUSH_ROLE roleif the token doesn't match, it will fail.",
        "params": {
          "_amount": "amount of tokens being received",
          "_dto": "the dto of the fee store to determine the split of _amount",
          "_token": "the token address being received"
        }
      },
      "removeFeeDistributionReceiver(address)": {
        "details": "only available to FEE_DISTRIBUTIOR_MANAGER role",
        "params": {
          "_account": "address of the receiver"
        }
      },
      "setFeeDistributorBountyShare(uint64)": {
        "details": "only available to FEE_DISTRIBUTIOR_MANAGER role",
        "params": {
          "_share": "share of the bounty"
        }
      },
      "setPushFeesGasCompensationForCaller(uint256)": {
        "details": "only available to FEE_DISTRIBUTIOR_MANAGER role",
        "params": {
          "_amountInWei": "share of the bounty"
        }
      },
      "startFeeDistribution()": {
        "details": "It will be also check if the bounties are being activated and if there are already fees in the queue to process. If so, it'll be process on activating the fee distribution.only available to FEE_DISTRIBUTIOR_MANAGER role"
      },
      "stopFeeDistribution()": {
        "details": "only available to FEE_DISTRIBUTIOR_MANAGER role"
      },
      "updateFeeDistributionShares(address[],uint64[])": {
        "details": "if a receiver is not existing, it'll be revertedonly available to FEE_DISTRIBUTIOR_MANAGER role",
        "params": {
          "_receivers": "array of existing receivers",
          "_shares": "array of new shares to be set"
        }
      }
    },
    "title": "Fee Distributor Facet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addFeeDistributionReceiver((string,uint64,address,address[]))": {
        "notice": "Adds a fee receiver"
      },
      "enableBountyInToken(bool)": {
        "notice": "Enables  or disables the bountyInToken flag based on the given parameter"
      },
      "initFeeDistributorFacet(address,address,address,uint64)": {
        "notice": "Initializes the facet"
      },
      "pushFees(address,uint256,(uint256,address,(bytes32,uint256)[]))": {
        "notice": "Pushes the fee to the desired receivers"
      },
      "removeFeeDistributionReceiver(address)": {
        "notice": "Removes a receiver based on the receiver address"
      },
      "setFeeDistributorBountyShare(uint64)": {
        "notice": "Sets the share of the bounty"
      },
      "setPushFeesGasCompensationForCaller(uint256)": {
        "notice": "Sets the gas compensation for the caller of the push fee method"
      },
      "startFeeDistribution()": {
        "notice": "Starts the fee distribution"
      },
      "stopFeeDistribution()": {
        "notice": "Stops the fee distribution"
      },
      "updateFeeDistributionShares(address[],uint64[])": {
        "notice": "Updates the shares of existing receivers"
      }
    },
    "notice": "It is responsible for distributing received fees to its configured receivers",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}