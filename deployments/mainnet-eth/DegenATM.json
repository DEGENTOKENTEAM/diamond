{
  "address": "0x3689BC8cE160394e141aCf63dA145Ccc238A9220",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "candidate",
          "type": "address"
        }
      ],
      "name": "AddToWhitelist",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "ClaimingDisabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "ClaimingEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "CollectingDisabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "CollectingEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "depositer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "locker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LockJoin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "locker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "penalty",
          "type": "uint256"
        }
      ],
      "name": "LockLeave",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "LockingDisabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "LockingEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "candidate",
          "type": "address"
        }
      ],
      "name": "RemoveFromWhitelist",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "StartLockPeriod",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "UpdatedAllocationLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "UpdatedAllocationRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "UpdatedToken",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LOCK_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_PENALTY_BPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOTAL_REWARD_BPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "addToWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_accounts",
          "type": "address[]"
        }
      ],
      "name": "addToWhitelistInBulk",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allocationLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claiming",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collecting",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "deposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_enable",
          "type": "bool"
        }
      ],
      "name": "enableClaiming",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_enable",
          "type": "bool"
        }
      ],
      "name": "enableCollecting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStats",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "collecting",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "claiming",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "lockPeriodActive",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "allocationLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokensPerOneNative",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalDeposits",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalLockedTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalClaimedTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "estimatedTotalLockedTokensRewards",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "estimatedTotalLockedTokensPayouts",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "estimatedTotalTokensPayout",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockPeriodStarts",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockPeriodEnds",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockPeriodInSeconds",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardPenaltyBps",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalRewardBps",
              "type": "uint256"
            }
          ],
          "internalType": "struct DegenATM.Stats",
          "name": "_stats",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_qualifier",
          "type": "address"
        }
      ],
      "name": "getStatsForQualifier",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isWhitelisted",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasClaimed",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasLocked",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "tokenBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalDeposited",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentRewardAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentPenaltyAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentRewardAmountNet",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "estimatedTotalRewardAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "estimatedTotalClaimAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct DegenATM.StatsForQualifier",
          "name": "_stats",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockJoin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockLeave",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "locked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lockedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "recoverNative",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "recoverTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "removeFromWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "setAllocationLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        }
      ],
      "name": "setAllocationRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "setToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startLockPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokensPerOneNative",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalClaimedTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLockedTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xbee091fbf8b245fcb9f62053fb7181e040621dc1560b84e1defb391be4520ca5",
  "receipt": {
    "to": null,
    "from": "0x0000000022D4802541320DB7F22693405Db19422",
    "contractAddress": "0x3689BC8cE160394e141aCf63dA145Ccc238A9220",
    "transactionIndex": 96,
    "gasUsed": "2378635",
    "logsBloom": "0x
    "blockHash": "0xcc8b646ac251ac1e2b12a65c16f0b753f3d3e99e5a953999d3603fb5b9a90faa",
    "transactionHash": "0xbee091fbf8b245fcb9f62053fb7181e040621dc1560b84e1defb391be4520ca5",
    "logs": [
      {
        "transactionIndex": 96,
        "blockNumber": 18808554,
        "transactionHash": "0xbee091fbf8b245fcb9f62053fb7181e040621dc1560b84e1defb391be4520ca5",
        "address": "0x3689BC8cE160394e141aCf63dA145Ccc238A9220",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000022d4802541320db7f22693405db19422"
        ],
        "data": "0x",
        "logIndex": 218,
        "blockHash": "0xcc8b646ac251ac1e2b12a65c16f0b753f3d3e99e5a953999d3603fb5b9a90faa"
      }
    ],
    "blockNumber": 18808554,
    "cumulativeGasUsed": "20194359",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ab1b8e45ec943447e24d132ebc1c295a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"AddToWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ClaimingDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ClaimingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CollectingDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CollectingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockJoin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"name\":\"LockLeave\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LockingDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LockingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"RemoveFromWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"StartLockPeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"UpdatedAllocationLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"UpdatedAllocationRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"UpdatedToken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOCK_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_PENALTY_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_REWARD_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"}],\"name\":\"addToWhitelistInBulk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allocationLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claiming\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collecting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"enableClaiming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"enableCollecting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStats\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"collecting\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"claiming\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"lockPeriodActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocationLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensPerOneNative\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLockedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimatedTotalLockedTokensRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimatedTotalLockedTokensPayouts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimatedTotalTokensPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriodStarts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriodEnds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriodInSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPenaltyBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewardBps\",\"type\":\"uint256\"}],\"internalType\":\"struct DegenATM.Stats\",\"name\":\"_stats\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_qualifier\",\"type\":\"address\"}],\"name\":\"getStatsForQualifier\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isWhitelisted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasClaimed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasLocked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentRewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPenaltyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentRewardAmountNet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimatedTotalRewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimatedTotalClaimAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct DegenATM.StatsForQualifier\",\"name\":\"_stats\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockJoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockLeave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"setAllocationLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setAllocationRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startLockPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensPerOneNative\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLockedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Daniel <danieldegendev@gmail.com>\",\"custom:version\":\"1.0.0\",\"kind\":\"dev\",\"methods\":{\"addToWhitelist(address)\":{\"params\":{\"_account\":\"address of the participant\"}},\"addToWhitelistInBulk(address[])\":{\"params\":{\"_accounts\":\"array of addresses of participants\"}},\"claimTokens()\":{\"details\":\"it also makes some qualify checks whether sender is allowed to execute, otherwise it revertspossible to execute when claming is started\"},\"enableClaiming(bool)\":{\"details\":\"when enabling, automaticall disabled collectiong flag and vice versa\",\"params\":{\"_enable\":\"true enables, false disables\"}},\"enableCollecting(bool)\":{\"params\":{\"_enable\":\"true enables, false disables\"}},\"getStats()\":{\"details\":\"`collecting` flag if the native token collection has started or not`claiming` flag if the claiming has started or not (will enable claiming and locking functionality)`lockPeriodActive` flag is the lock period has started`token` address of the token`tokenBalance` contract balance of the token`allocationLimit` defined alloctaion limit`tokensPerOneNative` defined tokens per one native`totalDeposits` total amount of native deposits`totalLockedTokens` total amount of locked tokens`totalClaimedTokens` total amount of claimed tokens`estimatedTotalLockedTokensRewards` estimated amount of total rewards paid for current locked tokens`estimatedTotalLockedTokensPayouts` estimated amount of tokens incl. rewards which are getting paid out`estimatedTotalTokensPayout` estimated amount of ALL possible paid out tokens (claimed + locked + rewards)`lockPeriodStarts` the timestamp when the lock period starts`lockPeriodEnds` the timestamp when the lock period ends`lockPeriodInSeconds` lock period in seconds which result in 365d or 1y`rewardPenaltyBps` % loyalty penalty in basis points`totalRewardBps` % reward in basis points\",\"returns\":{\"_stats\":\"statistics for a qualifier\"}},\"getStatsForQualifier(address)\":{\"details\":\"`isWhitelisted` flag if the qualifier is whitelisted or not`hasClaimed` flag if the qualifier has claimed his tokens`hasLocked` flag if the qualifier has locked his tokens`tokenBalance` qualifiers balance of the token`lockedAmount` amount of locked tokens`claimedAmount` amount of claimed tokens`totalDeposited` amount of deposited native`currentRewardAmount` returns the current reward amount (only if lock period has started, else 0)`currentPenaltyAmount` returns the current penalty amount if the qualifier leaves the lock (only if lock period has started, else 0)`currentRewardAmountNet` returns the current rewart amount excl. penalty amount (only if lock period has started, else 0)`estimatedTotalRewardAmount` potential amount of rewards qualifier receives after whole lock period`estimatedTotalClaimAmount` potential total amount (accumulated + rewards) which the qualifier will receive after whole lock period\",\"params\":{\"_qualifier\":\"address of the account\"},\"returns\":{\"_stats\":\"statistics for a qualifier\"}},\"lockJoin()\":{\"details\":\"it also makes some qualify checks whether sender is allowed to execute, otherwise it revertspossible to execute when claming is started\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeFromWhitelist(address)\":{\"params\":{\"_account\":\"address of the participant\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setAllocationLimit(uint256)\":{\"params\":{\"_limit\":\"amount of native token a participant can deposit\"}},\"setAllocationRate(uint256)\":{\"params\":{\"_rate\":\"amount of tokens\"}},\"setToken(address)\":{\"params\":{\"_token\":\"address of the token\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Degen ATM\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addToWhitelist(address)\":{\"notice\":\"Adds an account to the whitelist\"},\"addToWhitelistInBulk(address[])\":{\"notice\":\"Adds multiple accounts to the whitelist\"},\"claimTokens()\":{\"notice\":\"Claiming the tokensclaiming is only possible when the claiming period has started\"},\"deposit()\":{\"notice\":\"Deposit native token\"},\"enableClaiming(bool)\":{\"notice\":\"Sets the state of the claiming\"},\"enableCollecting(bool)\":{\"notice\":\"Sets the state of the collecting\"},\"getStats()\":{\"notice\":\"Returns general atm stats\"},\"getStatsForQualifier(address)\":{\"notice\":\"Returns atm stats for a given qualifier\"},\"lockJoin()\":{\"notice\":\"Locks the tokensthe sender will enter a lock state with his allocated amount of tokens\"},\"lockLeave()\":{\"notice\":\"Leaves the lock of the tokensThe sender will leave the locked state if he has joined it.After leaving, he will auto claim the tokens and not be able to join the lock anymore.The sender can leave at any time. Before the lock period, he has not gained any rewardsand claims only his initial allocated amount of tokens. If the lock period has startedand not ended yet, the sender will receive his initial allocated tokens with 30% of therewards, because of the desined penalty when leaving the locked state before end of period.After the lock period has ended, the sender will receive the allocated amount of tokensand the full amount of rewards.\"},\"recoverNative()\":{\"notice\":\"Recovers the native funds and sends it to the owner\"},\"recoverTokens(address)\":{\"notice\":\"Recovers the tokens and sends it to the owner\"},\"removeFromWhitelist(address)\":{\"notice\":\"Removes the address from the whitelistWhen the address is being removed and has already deposited, this amount will be sent back to the account\"},\"setAllocationLimit(uint256)\":{\"notice\":\"Sets the deposit limit for accounts\"},\"setAllocationRate(uint256)\":{\"notice\":\"Sets the allocation ratethis number is used to calculate the accumulated token\"},\"setToken(address)\":{\"notice\":\"Sets the token address which to pay out\"},\"startLockPeriod()\":{\"notice\":\"Starts the lock period\"}},\"notice\":\"Funds collecting and vesting smart contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DegenATM.sol\":\"DegenATM\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/DegenATM.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.19;\\n\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport { IERC20Facet } from \\\"./diamond/interfaces/IERC20Facet.sol\\\";\\n\\n/// @title Degen ATM\\n/// @author Daniel <danieldegendev@gmail.com>\\n/// @notice Funds collecting and vesting smart contract\\n/// @custom:version 1.0.0\\ncontract DegenATM is Ownable, ReentrancyGuard {\\n    using Address for address payable;\\n\\n    uint256 public constant LOCK_PERIOD = 31_536_000; // 365 days\\n    uint256 public constant DENOMINATOR = 10_000_000;\\n    uint256 public constant TOTAL_REWARD_BPS = 2_400; // 24%\\n    uint256 public constant REWARD_PENALTY_BPS = 7_000; // 70%\\n\\n    bool public claiming;\\n    bool public collecting;\\n    uint256 public totalDeposits;\\n    uint256 public startTimestamp;\\n    uint256 public allocationLimit = 3 * 10 ** 18;\\n    uint256 public totalLockedTokens;\\n    uint256 public tokensPerOneNative;\\n    uint256 public totalClaimedTokens;\\n    address public token;\\n    mapping(address => bool) public locked;\\n    mapping(address => bool) public claimed;\\n    mapping(address => bool) public whitelist;\\n    mapping(address => uint256) public deposits;\\n    mapping(address => uint256) public lockedAmount;\\n    mapping(address => uint256) public claimedAmount;\\n\\n    event Deposit(address depositer, uint256 amount);\\n    event Claimed(address claimer, uint256 amount);\\n    event LockJoin(address locker, uint256 amount);\\n    event LockLeave(address locker, uint256 amount, uint256 reward, uint256 penalty);\\n    event CollectingEnabled();\\n    event CollectingDisabled();\\n    event ClaimingEnabled();\\n    event ClaimingDisabled();\\n    event LockingEnabled();\\n    event LockingDisabled();\\n    event UpdatedAllocationRate(uint256 rate);\\n    event UpdatedAllocationLimit(uint256 limit);\\n    event UpdatedToken(address token);\\n    event AddToWhitelist(address candidate);\\n    event RemoveFromWhitelist(address candidate);\\n    event StartLockPeriod();\\n\\n    modifier qualifyCheck() {\\n        _checkQualification();\\n        _;\\n    }\\n\\n    /// Deposit native token\\n    function deposit() external payable {\\n        _deposit(msg.value, _msgSender());\\n    }\\n\\n    /// Claiming the tokens\\n    /// @notice claiming is only possible when the claiming period has started\\n    /// @dev it also makes some qualify checks whether sender is allowed to execute, otherwise it reverts\\n    /// @dev possible to execute when claming is started\\n    function claimTokens() external nonReentrant qualifyCheck {\\n        if (!claiming) revert(\\\"not started\\\");\\n        uint256 _amount = _calcClaimAmount(_msgSender());\\n        if (!IERC20(token).transfer(_msgSender(), _amount)) revert(\\\"payout failed\\\");\\n        claimed[_msgSender()] = true;\\n        claimedAmount[_msgSender()] = _amount;\\n        totalClaimedTokens += _amount;\\n        emit Claimed(_msgSender(), _amount);\\n    }\\n\\n    /// Locks the tokens\\n    /// @notice the sender will enter a lock state with his allocated amount of tokens\\n    /// @dev it also makes some qualify checks whether sender is allowed to execute, otherwise it reverts\\n    /// @dev possible to execute when claming is started\\n    function lockJoin() external qualifyCheck {\\n        if (!claiming) revert(\\\"not started\\\");\\n        if (startTimestamp > 0) revert(\\\"lock not possible anymore\\\");\\n        uint256 _amount = _calcClaimAmount(_msgSender());\\n        locked[_msgSender()] = true;\\n        lockedAmount[_msgSender()] = _amount;\\n        totalLockedTokens += _amount;\\n        emit LockJoin(_msgSender(), _amount);\\n    }\\n\\n    /// Leaves the lock of the tokens\\n    /// @notice The sender will leave the locked state if he has joined it.\\n    /// @notice After leaving, he will auto claim the tokens and not be able to join the lock anymore.\\n    /// @notice The sender can leave at any time. Before the lock period, he has not gained any rewards\\n    /// @notice and claims only his initial allocated amount of tokens. If the lock period has started\\n    /// @notice and not ended yet, the sender will receive his initial allocated tokens with 30% of the\\n    /// @notice rewards, because of the desined penalty when leaving the locked state before end of period.\\n    /// @notice After the lock period has ended, the sender will receive the allocated amount of tokens\\n    /// @notice and the full amount of rewards.\\n    function lockLeave() external nonReentrant {\\n        if (!locked[_msgSender()]) revert(\\\"not locked\\\");\\n        uint256 _penalty = 0;\\n        uint256 _reward = 0;\\n        uint256 _amount = lockedAmount[_msgSender()];\\n        locked[_msgSender()] = false;\\n        lockedAmount[_msgSender()] = 0;\\n        totalLockedTokens -= _amount;\\n\\n        if (startTimestamp > 0) {\\n            (, _penalty, _reward) = _calcRewards(_amount, startTimestamp);\\n            _amount += _reward;\\n        } else emit Claimed(_msgSender(), _amount);\\n\\n        if (!IERC20(token).transfer(_msgSender(), _amount)) revert(\\\"payout failed\\\");\\n        claimed[_msgSender()] = true;\\n        claimedAmount[_msgSender()] = _amount;\\n        totalClaimedTokens += _amount;\\n\\n        emit LockLeave(_msgSender(), _amount, _reward, _penalty);\\n    }\\n\\n    /// viewables\\n\\n    struct StatsForQualifier {\\n        bool isWhitelisted;\\n        bool hasClaimed;\\n        bool hasLocked;\\n        uint256 tokenBalance;\\n        uint256 lockedAmount;\\n        uint256 claimedAmount;\\n        uint256 totalDeposited;\\n        uint256 currentRewardAmount;\\n        uint256 currentPenaltyAmount;\\n        uint256 currentRewardAmountNet;\\n        uint256 estimatedTotalRewardAmount;\\n        uint256 estimatedTotalClaimAmount;\\n    }\\n\\n    /// Returns atm stats for a given qualifier\\n    /// @param _qualifier address of the account\\n    /// @return _stats statistics for a qualifier\\n    /// @dev `isWhitelisted` flag if the qualifier is whitelisted or not\\n    /// @dev `hasClaimed` flag if the qualifier has claimed his tokens\\n    /// @dev `hasLocked` flag if the qualifier has locked his tokens\\n    /// @dev `tokenBalance` qualifiers balance of the token\\n    /// @dev `lockedAmount` amount of locked tokens\\n    /// @dev `claimedAmount` amount of claimed tokens\\n    /// @dev `totalDeposited` amount of deposited native\\n    /// @dev `currentRewardAmount` returns the current reward amount (only if lock period has started, else 0)\\n    /// @dev `currentPenaltyAmount` returns the current penalty amount if the qualifier leaves the lock (only if lock period has started, else 0)\\n    /// @dev `currentRewardAmountNet` returns the current rewart amount excl. penalty amount (only if lock period has started, else 0)\\n    /// @dev `estimatedTotalRewardAmount` potential amount of rewards qualifier receives after whole lock period\\n    /// @dev `estimatedTotalClaimAmount` potential total amount (accumulated + rewards) which the qualifier will receive after whole lock period\\n    function getStatsForQualifier(address _qualifier) external view returns (StatsForQualifier memory _stats) {\\n        uint256 _amount = locked[_qualifier] ? lockedAmount[_qualifier] : _calcClaimAmount(_qualifier);\\n        (uint256 _currentRewardAmount, uint256 _currentPenaltyAmount, uint256 _currentRewardAmountNet) = _calcRewards(\\n            lockedAmount[_qualifier],\\n            startTimestamp > 0 ? startTimestamp : block.timestamp\\n        );\\n        _stats = StatsForQualifier(\\n            whitelist[_qualifier],\\n            claimed[_qualifier],\\n            locked[_qualifier],\\n            token != address(0) ? IERC20(token).balanceOf(_qualifier) : 0,\\n            lockedAmount[_qualifier],\\n            claimedAmount[_qualifier],\\n            deposits[_qualifier],\\n            _currentRewardAmount,\\n            _currentPenaltyAmount,\\n            _currentRewardAmountNet,\\n            (_amount * TOTAL_REWARD_BPS) / 10_000,\\n            _amount + (_amount * TOTAL_REWARD_BPS) / 10_000\\n        );\\n    }\\n\\n    struct Stats {\\n        bool collecting;\\n        bool claiming;\\n        bool lockPeriodActive;\\n        address token;\\n        uint256 tokenBalance;\\n        uint256 allocationLimit;\\n        uint256 tokensPerOneNative;\\n        uint256 totalDeposits;\\n        uint256 totalLockedTokens;\\n        uint256 totalClaimedTokens;\\n        uint256 estimatedTotalLockedTokensRewards;\\n        uint256 estimatedTotalLockedTokensPayouts;\\n        uint256 estimatedTotalTokensPayout;\\n        uint256 lockPeriodStarts;\\n        uint256 lockPeriodEnds;\\n        uint256 lockPeriodInSeconds;\\n        uint256 rewardPenaltyBps;\\n        uint256 totalRewardBps;\\n    }\\n\\n    /// Returns general atm stats\\n    /// @return _stats statistics for a qualifier\\n    /// @dev `collecting` flag if the native token collection has started or not\\n    /// @dev `claiming` flag if the claiming has started or not (will enable claiming and locking functionality)\\n    /// @dev `lockPeriodActive` flag is the lock period has started\\n    /// @dev `token` address of the token\\n    /// @dev `tokenBalance` contract balance of the token\\n    /// @dev `allocationLimit` defined alloctaion limit\\n    /// @dev `tokensPerOneNative` defined tokens per one native\\n    /// @dev `totalDeposits` total amount of native deposits\\n    /// @dev `totalLockedTokens` total amount of locked tokens\\n    /// @dev `totalClaimedTokens` total amount of claimed tokens\\n    /// @dev `estimatedTotalLockedTokensRewards` estimated amount of total rewards paid for current locked tokens\\n    /// @dev `estimatedTotalLockedTokensPayouts` estimated amount of tokens incl. rewards which are getting paid out\\n    /// @dev `estimatedTotalTokensPayout` estimated amount of ALL possible paid out tokens (claimed + locked + rewards)\\n    /// @dev `lockPeriodStarts` the timestamp when the lock period starts\\n    /// @dev `lockPeriodEnds` the timestamp when the lock period ends\\n    /// @dev `lockPeriodInSeconds` lock period in seconds which result in 365d or 1y\\n    /// @dev `rewardPenaltyBps` % loyalty penalty in basis points\\n    /// @dev `totalRewardBps` % reward in basis points\\n    function getStats() external view returns (Stats memory _stats) {\\n        _stats = Stats(\\n            collecting,\\n            claiming,\\n            startTimestamp > 0,\\n            token,\\n            token != address(0) ? IERC20(token).balanceOf(address(this)) : 0,\\n            allocationLimit,\\n            tokensPerOneNative,\\n            totalDeposits,\\n            totalLockedTokens,\\n            totalClaimedTokens,\\n            (totalLockedTokens * TOTAL_REWARD_BPS) / 10_000,\\n            totalLockedTokens + ((totalLockedTokens * TOTAL_REWARD_BPS) / 10_000),\\n            ((totalDeposits * tokensPerOneNative) / 10 ** 18) + ((totalLockedTokens * TOTAL_REWARD_BPS) / 10_000),\\n            startTimestamp,\\n            startTimestamp > 0 ? startTimestamp + LOCK_PERIOD : 0,\\n            LOCK_PERIOD,\\n            REWARD_PENALTY_BPS,\\n            TOTAL_REWARD_BPS\\n        );\\n    }\\n\\n    /// admin\\n\\n    /// Starts the lock period\\n    function startLockPeriod() external onlyOwner {\\n        if (!claiming) revert(\\\"not started\\\");\\n        if (startTimestamp > 0) revert(\\\"lock period already started\\\");\\n        startTimestamp = block.timestamp;\\n        emit StartLockPeriod();\\n    }\\n\\n    /// Recovers the native funds and sends it to the owner\\n    function recoverNative() external onlyOwner {\\n        uint256 _balance = address(this).balance;\\n        if (_balance > 0) payable(owner()).sendValue(_balance);\\n    }\\n\\n    /// Recovers the tokens and sends it to the owner\\n    function recoverTokens(address _asset) external onlyOwner {\\n        uint256 _balance = IERC20(_asset).balanceOf(address(this));\\n        if (_balance > 0) IERC20(_asset).transfer(owner(), _balance);\\n    }\\n\\n    /// Sets the state of the claiming\\n    /// @param _enable true enables, false disables\\n    /// @dev when enabling, automaticall disabled collectiong flag and vice versa\\n    function enableClaiming(bool _enable) external onlyOwner {\\n        if (_enable && tokensPerOneNative == 0) revert(\\\"no rate set\\\");\\n        claiming = _enable;\\n        enableCollecting(!_enable);\\n        if (_enable) emit ClaimingEnabled();\\n        else emit ClaimingDisabled();\\n    }\\n\\n    /// Sets the state of the collecting\\n    /// @param _enable true enables, false disables\\n    function enableCollecting(bool _enable) public onlyOwner {\\n        collecting = _enable;\\n        if (_enable) emit CollectingEnabled();\\n        else emit CollectingDisabled();\\n    }\\n\\n    /// Sets the allocation rate\\n    /// @param _rate amount of tokens\\n    /// @notice this number is used to calculate the accumulated token\\n    function setAllocationRate(uint256 _rate) external onlyOwner {\\n        tokensPerOneNative = _rate;\\n        emit UpdatedAllocationRate(_rate);\\n    }\\n\\n    /// Sets the deposit limit for accounts\\n    /// @param _limit amount of native token a participant can deposit\\n    function setAllocationLimit(uint256 _limit) external onlyOwner {\\n        allocationLimit = _limit;\\n        emit UpdatedAllocationLimit(_limit);\\n    }\\n\\n    /// Sets the token address which to pay out\\n    /// @param _token address of the token\\n    function setToken(address _token) external onlyOwner {\\n        if (claiming) revert(\\\"claiming already started\\\");\\n        token = _token;\\n        emit UpdatedToken(_token);\\n    }\\n\\n    /// Adds an account to the whitelist\\n    /// @param _account address of the participant\\n    function addToWhitelist(address _account) public onlyOwner {\\n        whitelist[_account] = true;\\n        emit AddToWhitelist(_account);\\n    }\\n\\n    /// Adds multiple accounts to the whitelist\\n    /// @param _accounts array of addresses of participants\\n    function addToWhitelistInBulk(address[] calldata _accounts) external onlyOwner {\\n        for (uint256 i = 0; i < _accounts.length; i++) addToWhitelist(_accounts[i]);\\n    }\\n\\n    /// Removes the address from the whitelist\\n    /// @param _account address of the participant\\n    /// @notice When the address is being removed and has already deposited, this amount will be sent back to the account\\n    function removeFromWhitelist(address payable _account) external onlyOwner {\\n        uint256 _returnAmount = deposits[_account];\\n        if (_returnAmount > 0) {\\n            delete deposits[_account];\\n            totalDeposits -= _returnAmount;\\n            _account.sendValue(_returnAmount);\\n        }\\n        delete whitelist[_account];\\n        emit RemoveFromWhitelist(_account);\\n    }\\n\\n    /// internals\\n\\n    function _checkQualification() internal view {\\n        if (!whitelist[_msgSender()]) revert(\\\"not whitelisted\\\");\\n        if (deposits[_msgSender()] == 0) revert(\\\"not deposited\\\");\\n        if (claimed[_msgSender()]) revert(\\\"already claimed\\\");\\n        if (locked[_msgSender()]) revert(\\\"already locked\\\");\\n    }\\n\\n    function _deposit(uint256 _amount, address _sender) internal nonReentrant {\\n        if (!collecting) revert(\\\"not started\\\");\\n        if (!whitelist[_sender]) revert(\\\"not whitelisted\\\");\\n        uint256 _depositAmount = _amount;\\n        uint256 _actual = deposits[_sender] + _depositAmount;\\n        if (_actual > allocationLimit) {\\n            uint256 _sendBack = _actual - allocationLimit;\\n            payable(_sender).sendValue(_sendBack);\\n            _depositAmount = allocationLimit - deposits[_sender];\\n        }\\n        deposits[_sender] += _depositAmount;\\n        totalDeposits += _depositAmount;\\n        emit Deposit(_sender, _amount);\\n    }\\n\\n    function _calcClaimAmount(address _depositer) internal view returns (uint256 _amount) {\\n        return (tokensPerOneNative * deposits[_depositer]) / 10 ** 18;\\n    }\\n\\n    // function _calcClaimAmountTotal() internal view returns (uint256 _amount) {\\n    //     return (tokensPerOneNative * totalDeposits) / 10 ** 18;\\n    // }\\n\\n    function _calcRewards(\\n        uint256 _lockedAmount,\\n        uint256 _startTimestamp\\n    ) internal view returns (uint256 _amount, uint256 _penalty, uint256 _amountNet) {\\n        _amount = (_lockedAmount * TOTAL_REWARD_BPS) / 10_000;\\n        _amountNet = _amount;\\n        if (block.timestamp > _startTimestamp && block.timestamp < _startTimestamp + LOCK_PERIOD) {\\n            _amount = (((_amount * DENOMINATOR) / LOCK_PERIOD) * (block.timestamp - _startTimestamp)) / DENOMINATOR;\\n            _penalty = (_amount * REWARD_PENALTY_BPS) / 10_000;\\n        } else if (block.timestamp <= _startTimestamp) {\\n            _amount = 0;\\n            _amountNet = 0;\\n        }\\n\\n        _amountNet = _amount - _penalty;\\n    }\\n\\n    /// receiver\\n    receive() external payable {\\n        _deposit(msg.value, _msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x34651c7594bfe0c13f04ca3c8f76fdd62307d2950871b2195925b2ea5b90a0c8\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/interfaces/IERC20Facet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.19;\\n\\n/// @title ERC20 Facet Interface\\n/// @author Daniel <danieldegendev@gmail.com>\\ninterface IERC20Facet {\\n    /// Minting an amount of tokens for a designated receiver\\n    /// @param _to receiver address of the token\\n    /// @param _amount receiving amount\\n    /// @notice This can only be executed by the MINTER_ROLE which will be bridge related contracts\\n    function mint(address _to, uint256 _amount) external;\\n\\n    /// Burning an amount of tokens from a designated holder\\n    /// @param _from holder address to burn the tokens from\\n    /// @param _amount burnable amount\\n    function burn(address _from, uint256 _amount) external;\\n\\n    /// @notice This enables the transfers of this tokens\\n    function enable() external;\\n\\n    /// @notice This disables the transfers of this tokens\\n    function disable() external;\\n\\n    /// Exclude an account from being charged on fees\\n    /// @param _account address to exclude\\n    function excludeAccountFromTax(address _account) external;\\n\\n    /// Includes an account againt to pay fees\\n    /// @param _account address to include\\n    function includeAccountForTax(address _account) external;\\n\\n    /// Sets the liquidity pool address\\n    /// @param _lp address of the liquidity pool of the token\\n    function setLP(address _lp) external;\\n}\\n\",\"keccak256\":\"0x1b61d8aeea4610f7de75e384c2993be765b64f409da45390d97d79361577650d\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60806040526729a2241af62c000060055534801561001c57600080fd5b506100263361002f565b6001805561007f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61290b8061008e6000396000f3fe6080604052600436106102a45760003560e01c8063a153e7081161016e578063d4a40b62116100cb578063f2fde38b1161007f578063fc0c546a11610064578063fc0c546a1461072a578063fc7e286d14610757578063fcb56f471461078457600080fd5b8063f2fde38b146106f4578063f5c476f91461071457600080fd5b8063e43252d7116100b0578063e43252d71461069e578063e6fd48bc146106be578063ee39190e146106d457600080fd5b8063d4a40b6214610673578063dc5f4cc21461068857600080fd5b8063c3e73b8311610122578063c884ef8311610107578063c884ef831461060b578063cbf9fe5f1461063b578063d0e30db01461066b57600080fd5b8063c3e73b83146105d3578063c59d4847146105e957600080fd5b8063ad10a2ed11610153578063ad10a2ed14610566578063b2a64e5114610586578063b6c99b58146105a657600080fd5b8063a153e70814610524578063ab5a47a71461055157600080fd5b8063502162721161021c5780637d882097116101d05780638da5cb5b116101b55780638da5cb5b14610491578063918f8674146104dd5780639b19251a146104f457600080fd5b80637d8820971461045b5780638ab1d6811461047157600080fd5b80636e96d0b8116102015780636e96d0b814610411578063715018a6146104275780637a2b2cb91461043c57600080fd5b806350216272146103dc5780635a54db86146103fc57600080fd5b806316114acd1161027357806324d6169c1161025857806324d6169c14610392578063476d7a5e146103a757806348c54b9d146103c757600080fd5b806316114acd1461035a5780631820cabb1461037a57600080fd5b806304e86903146102ba578063078d504c146102fa5780630defc08a14610310578063144fa6d71461033a57600080fd5b366102b5576102b3343361079a565b005b600080fd5b3480156102c657600080fd5b506102e76102d5366004612521565b600f6020526000908152604090205481565b6040519081526020015b60405180910390f35b34801561030657600080fd5b506102e760075481565b34801561031c57600080fd5b5060025461032a9060ff1681565b60405190151581526020016102f1565b34801561034657600080fd5b506102b3610355366004612521565b610a01565b34801561036657600080fd5b506102b3610375366004612521565b610af0565b34801561038657600080fd5b506102e76301e1338081565b34801561039e57600080fd5b506102b3610c67565b3480156103b357600080fd5b506102b36103c2366004612545565b610d74565b3480156103d357600080fd5b506102b3610db1565b3480156103e857600080fd5b506102b36103f736600461256c565b610ff9565b34801561040857600080fd5b506102b3611095565b34801561041d57600080fd5b506102e760055481565b34801561043357600080fd5b506102b36110e3565b34801561044857600080fd5b5060025461032a90610100900460ff1681565b34801561046757600080fd5b506102e760035481565b34801561047d57600080fd5b506102b361048c366004612521565b6110f5565b34801561049d57600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016102f1565b3480156104e957600080fd5b506102e76298968081565b34801561050057600080fd5b5061032a61050f366004612521565b600c6020526000908152604090205460ff1681565b34801561053057600080fd5b506102e761053f366004612521565b600e6020526000908152604090205481565b34801561055d57600080fd5b506102b361120c565b34801561057257600080fd5b506102b3610581366004612545565b611538565b34801561059257600080fd5b506102b36105a136600461256c565b611575565b3480156105b257600080fd5b506105c66105c1366004612521565b611689565b6040516102f19190612589565b3480156105df57600080fd5b506102e761096081565b3480156105f557600080fd5b506105fe61197f565b6040516102f19190612624565b34801561061757600080fd5b5061032a610626366004612521565b600b6020526000908152604090205460ff1681565b34801561064757600080fd5b5061032a610656366004612521565b600a6020526000908152604090205460ff1681565b6102b3611c34565b34801561067f57600080fd5b506102b3611c3e565b34801561069457600080fd5b506102e7611b5881565b3480156106aa57600080fd5b506102b36106b9366004612521565b611dbe565b3480156106ca57600080fd5b506102e760045481565b3480156106e057600080fd5b506102b36106ef36600461271c565b611e45565b34801561070057600080fd5b506102b361070f366004612521565b611e94565b34801561072057600080fd5b506102e760065481565b34801561073657600080fd5b506009546104b89073ffffffffffffffffffffffffffffffffffffffff1681565b34801561076357600080fd5b506102e7610772366004612521565b600d6020526000908152604090205481565b34801561079057600080fd5b506102e760085481565b6107a2611f48565b600254610100900460ff16610818576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f6e6f74207374617274656400000000000000000000000000000000000000000060448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff81166000908152600c602052604090205460ff166108a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f6e6f742077686974656c69737465640000000000000000000000000000000000604482015260640161080f565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600d60205260408120548391906108db9083906127c0565b9050600554811115610950576000600554826108f791906127d3565b905061091973ffffffffffffffffffffffffffffffffffffffff851682611fbb565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600d602052604090205460055461094c91906127d3565b9250505b73ffffffffffffffffffffffffffffffffffffffff83166000908152600d6020526040812080548492906109859084906127c0565b92505081905550816003600082825461099e91906127c0565b90915550506040805173ffffffffffffffffffffffffffffffffffffffff85168152602081018690527fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c910160405180910390a150506109fd60018055565b5050565b610a09612115565b60025460ff1615610a76576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f636c61696d696e6720616c726561647920737461727465640000000000000000604482015260640161080f565b600980547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f025651be99be0c3d17ca5fd468528159932539a42311b28b8f726404de8cb982906020015b60405180910390a150565b610af8612115565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015610b65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8991906127e6565b905080156109fd578173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb610bcc60005473ffffffffffffffffffffffffffffffffffffffff1690565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602481018490526044016020604051808303816000875af1158015610c3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6291906127ff565b505050565b610c6f612115565b60025460ff16610cdb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f6e6f742073746172746564000000000000000000000000000000000000000000604482015260640161080f565b60045415610d45576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f6c6f636b20706572696f6420616c726561647920737461727465640000000000604482015260640161080f565b426004556040517f293356658af20f2c40b7f4f571cfc2c17bb115e5b0bd31b64eaf07056005c78e90600090a1565b610d7c612115565b60058190556040518181527fb7691dbfc9650ab34f123a17c404d36c594d71624951bd5c2e75dc12ab84beb390602001610ae5565b610db9611f48565b610dc1612196565b60025460ff16610e2d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f6e6f742073746172746564000000000000000000000000000000000000000000604482015260640161080f565b6000610e383361237b565b60095490915073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb336040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602481018490526044016020604051808303816000875af1158015610ecc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef091906127ff565b610f56576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f7061796f7574206661696c656400000000000000000000000000000000000000604482015260640161080f565b336000908152600b6020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055600f909152812082905560088054839290610fad9084906127c0565b9091555050604080513381526020810183905281517fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a929181900390910190a150610ff760018055565b565b611001612115565b6002805482158015610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff90921691909117909155611068576040517f7ff59854dcd16ec009a04057678214b8ead37aa05fa90250e7633a867edd2fcf90600090a150565b6040517f7e67c9c573abf5b29a2bd6a8e18bbf737bd401653253a3b0ada461342d1a8b9a90600090a15b50565b61109d612115565b47801561109257611092816110c760005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690611fbb565b6110eb612115565b610ff760006123c7565b6110fd612115565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600d602052604090205480156111895773ffffffffffffffffffffffffffffffffffffffff82166000908152600d60205260408120819055600380548392906111639084906127d3565b90915550611189905073ffffffffffffffffffffffffffffffffffffffff831682611fbb565b73ffffffffffffffffffffffffffffffffffffffff82166000818152600c602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905590519182527f1f756c8b089af6b33ee121fee8badac2553a2fa89c0575ea91ff8792617746c2910160405180910390a15050565b611214611f48565b336000908152600a602052604090205460ff1661128d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f6e6f74206c6f636b656400000000000000000000000000000000000000000000604482015260640161080f565b336000908152600e602081815260408084208054600a845291852080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055929091529082905560068054839291829184906112ec9084906127d3565b90915550506004541561131d576113058160045461243c565b9094509250611316905082826127c0565b905061136e565b7fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a336040805173ffffffffffffffffffffffffffffffffffffffff9092168252602082018490520160405180910390a15b60095473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb336040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602481018490526044016020604051808303816000875af11580156113ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142391906127ff565b611489576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f7061796f7574206661696c656400000000000000000000000000000000000000604482015260640161080f565b336000908152600b6020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055600f9091528120829055600880548392906114e09084906127c0565b909155505060408051338152602081018390528082018490526060810185905290517f0e13278627a82e478575521362ac044ac9b5071703b94f70880c93b2ebe83d9e9181900360800190a1505050610ff760018055565b611540612115565b60078190556040518181527f2bd8c7e532533c76efd105e7baa7d7d9c1ee13c46a5421e726b12878d411959390602001610ae5565b61157d612115565b80801561158a5750600754155b156115f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f6e6f207261746520736574000000000000000000000000000000000000000000604482015260640161080f565b600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016821580159190911790915561162b90610ff9565b801561165d576040517f25b238f97b16f614c2cc471460ad0d72c33c632bde1300d098e531ed9b5a627a90600090a150565b6040517f30562835bc9d4c0a1d983181efa2572ef67b639546114d477dacfbeb72bb4f4990600090a150565b6116f36040518061018001604052806000151581526020016000151581526020016000151581526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600a602052604081205460ff1661172e576117298361237b565b611755565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600e60205260409020545b905060008060006117b7600e60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546000600454116117af574261243c565b60045461243c565b604080516101808101825273ffffffffffffffffffffffffffffffffffffffff808c166000818152600c60209081528582205460ff90811615158652838352600b8252868320548116151582870152928252600a90528490205416151592820192909252600954949750929550909350909160608301911661183a5760006118ce565b6009546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a81166004830152909116906370a0823190602401602060405180830381865afa1580156118aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ce91906127e6565b815273ffffffffffffffffffffffffffffffffffffffff88166000818152600e602090815260408083205482860152838352600f82528083205481860152928252600d9052205460608201526080810185905260a0810184905260c0810183905260e0016127106119416109608861281c565b61194b9190612833565b815260200161271061195f6109608861281c565b6119699190612833565b61197390876127c0565b90529695505050505050565b611a29604051806102400160405280600015158152602001600015158152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604080516102408101825260025460ff6101008204811615158352161515602082015260045415159181019190915260095473ffffffffffffffffffffffffffffffffffffffff16606082018190526080820190611a88576000611b1a565b6009546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015611af6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b1a91906127e6565b815260200160055481526020016007548152602001600354815260200160065481526020016008548152602001612710610960600654611b5a919061281c565b611b649190612833565b8152602001612710610960600654611b7c919061281c565b611b869190612833565b600654611b9391906127c0565b8152602001612710610960600654611bab919061281c565b611bb59190612833565b670de0b6b3a7640000600754600354611bce919061281c565b611bd89190612833565b611be291906127c0565b81526020016004548152602001600060045411611c00576000611c12565b6301e13380600454611c1291906127c0565b81526020016301e133808152602001611b588152602001610960815250905090565b610ff7343361079a565b611c46612196565b60025460ff16611cb2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f6e6f742073746172746564000000000000000000000000000000000000000000604482015260640161080f565b60045415611d1c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f6c6f636b206e6f7420706f737369626c6520616e796d6f726500000000000000604482015260640161080f565b6000611d273361237b565b336000908152600a6020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055600e9091528120829055600680549293508392909190611d839084906127c0565b909155505060408051338152602081018390527fe9d3f00334d723db78571dfd6c49a7d69c01505d2d18498a0f89d38650e8fcf99101610ae5565b611dc6612115565b73ffffffffffffffffffffffffffffffffffffffff81166000818152600c602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905590519182527f75b2135d1c8c3519f3c09c43fe6527089ef09f40c7981ebf0ed46e79e79032c79101610ae5565b611e4d612115565b60005b81811015610c6257611e82838383818110611e6d57611e6d61286e565b90506020020160208101906106b99190612521565b80611e8c8161289d565b915050611e50565b611e9c612115565b73ffffffffffffffffffffffffffffffffffffffff8116611f3f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161080f565b611092816123c7565b600260015403611fb4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161080f565b6002600155565b80471015612025576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161080f565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d806000811461207f576040519150601f19603f3d011682016040523d82523d6000602084013e612084565b606091505b5050905080610c62576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161080f565b60005473ffffffffffffffffffffffffffffffffffffffff163314610ff7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161080f565b336000908152600c602052604090205460ff1661220f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f6e6f742077686974656c69737465640000000000000000000000000000000000604482015260640161080f565b336000908152600d60205260408120549003612287576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f6e6f74206465706f736974656400000000000000000000000000000000000000604482015260640161080f565b336000908152600b602052604090205460ff1615612301576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f616c726561647920636c61696d65640000000000000000000000000000000000604482015260640161080f565b336000908152600a602052604090205460ff1615610ff7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f616c7265616479206c6f636b6564000000000000000000000000000000000000604482015260640161080f565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600d6020526040812054600754670de0b6b3a7640000916123b79161281c565b6123c19190612833565b92915050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000808061271061244f6109608761281c565b6124599190612833565b9250829050834211801561247957506124766301e13380856127c0565b42105b156124de576298968061248c85426127d3565b6301e1338061249e629896808761281c565b6124a89190612833565b6124b2919061281c565b6124bc9190612833565b92506127106124cd611b588561281c565b6124d79190612833565b91506124ec565b8342116124ec575060009150815b6124f682846127d3565b90509250925092565b73ffffffffffffffffffffffffffffffffffffffff8116811461109257600080fd5b60006020828403121561253357600080fd5b813561253e816124ff565b9392505050565b60006020828403121561255757600080fd5b5035919050565b801515811461109257600080fd5b60006020828403121561257e57600080fd5b813561253e8161255e565b815115158152610180810160208301516125a7602084018215159052565b5060408301516125bb604084018215159052565b50606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525061014080840151818401525061016080840151818401525092915050565b81511515815261024081016020830151612642602084018215159052565b506040830151612656604084018215159052565b50606083015161267e606084018273ffffffffffffffffffffffffffffffffffffffff169052565b506080838101519083015260a0808401519083015260c0808401519083015260e08084015190830152610100808401519083015261012080840151908301526101408084015190830152610160808401519083015261018080840151908301526101a080840151908301526101c080840151908301526101e08084015190830152610200808401519083015261022092830151929091019190915290565b6000806020838503121561272f57600080fd5b823567ffffffffffffffff8082111561274757600080fd5b818501915085601f83011261275b57600080fd5b81358181111561276a57600080fd5b8660208260051b850101111561277f57600080fd5b60209290920196919550909350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156123c1576123c1612791565b818103818111156123c1576123c1612791565b6000602082840312156127f857600080fd5b5051919050565b60006020828403121561281157600080fd5b815161253e8161255e565b80820281158282048414176123c1576123c1612791565b600082612869577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036128ce576128ce612791565b506001019056fea26469706673582212204d0439cb854bdcbeaa841df5a5d33c088b62d04a66dffd36ec246c0021e8030964736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106102a45760003560e01c8063a153e7081161016e578063d4a40b62116100cb578063f2fde38b1161007f578063fc0c546a11610064578063fc0c546a1461072a578063fc7e286d14610757578063fcb56f471461078457600080fd5b8063f2fde38b146106f4578063f5c476f91461071457600080fd5b8063e43252d7116100b0578063e43252d71461069e578063e6fd48bc146106be578063ee39190e146106d457600080fd5b8063d4a40b6214610673578063dc5f4cc21461068857600080fd5b8063c3e73b8311610122578063c884ef8311610107578063c884ef831461060b578063cbf9fe5f1461063b578063d0e30db01461066b57600080fd5b8063c3e73b83146105d3578063c59d4847146105e957600080fd5b8063ad10a2ed11610153578063ad10a2ed14610566578063b2a64e5114610586578063b6c99b58146105a657600080fd5b8063a153e70814610524578063ab5a47a71461055157600080fd5b8063502162721161021c5780637d882097116101d05780638da5cb5b116101b55780638da5cb5b14610491578063918f8674146104dd5780639b19251a146104f457600080fd5b80637d8820971461045b5780638ab1d6811461047157600080fd5b80636e96d0b8116102015780636e96d0b814610411578063715018a6146104275780637a2b2cb91461043c57600080fd5b806350216272146103dc5780635a54db86146103fc57600080fd5b806316114acd1161027357806324d6169c1161025857806324d6169c14610392578063476d7a5e146103a757806348c54b9d146103c757600080fd5b806316114acd1461035a5780631820cabb1461037a57600080fd5b806304e86903146102ba578063078d504c146102fa5780630defc08a14610310578063144fa6d71461033a57600080fd5b366102b5576102b3343361079a565b005b600080fd5b3480156102c657600080fd5b506102e76102d5366004612521565b600f6020526000908152604090205481565b6040519081526020015b60405180910390f35b34801561030657600080fd5b506102e760075481565b34801561031c57600080fd5b5060025461032a9060ff1681565b60405190151581526020016102f1565b34801561034657600080fd5b506102b3610355366004612521565b610a01565b34801561036657600080fd5b506102b3610375366004612521565b610af0565b34801561038657600080fd5b506102e76301e1338081565b34801561039e57600080fd5b506102b3610c67565b3480156103b357600080fd5b506102b36103c2366004612545565b610d74565b3480156103d357600080fd5b506102b3610db1565b3480156103e857600080fd5b506102b36103f736600461256c565b610ff9565b34801561040857600080fd5b506102b3611095565b34801561041d57600080fd5b506102e760055481565b34801561043357600080fd5b506102b36110e3565b34801561044857600080fd5b5060025461032a90610100900460ff1681565b34801561046757600080fd5b506102e760035481565b34801561047d57600080fd5b506102b361048c366004612521565b6110f5565b34801561049d57600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016102f1565b3480156104e957600080fd5b506102e76298968081565b34801561050057600080fd5b5061032a61050f366004612521565b600c6020526000908152604090205460ff1681565b34801561053057600080fd5b506102e761053f366004612521565b600e6020526000908152604090205481565b34801561055d57600080fd5b506102b361120c565b34801561057257600080fd5b506102b3610581366004612545565b611538565b34801561059257600080fd5b506102b36105a136600461256c565b611575565b3480156105b257600080fd5b506105c66105c1366004612521565b611689565b6040516102f19190612589565b3480156105df57600080fd5b506102e761096081565b3480156105f557600080fd5b506105fe61197f565b6040516102f19190612624565b34801561061757600080fd5b5061032a610626366004612521565b600b6020526000908152604090205460ff1681565b34801561064757600080fd5b5061032a610656366004612521565b600a6020526000908152604090205460ff1681565b6102b3611c34565b34801561067f57600080fd5b506102b3611c3e565b34801561069457600080fd5b506102e7611b5881565b3480156106aa57600080fd5b506102b36106b9366004612521565b611dbe565b3480156106ca57600080fd5b506102e760045481565b3480156106e057600080fd5b506102b36106ef36600461271c565b611e45565b34801561070057600080fd5b506102b361070f366004612521565b611e94565b34801561072057600080fd5b506102e760065481565b34801561073657600080fd5b506009546104b89073ffffffffffffffffffffffffffffffffffffffff1681565b34801561076357600080fd5b506102e7610772366004612521565b600d6020526000908152604090205481565b34801561079057600080fd5b506102e760085481565b6107a2611f48565b600254610100900460ff16610818576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f6e6f74207374617274656400000000000000000000000000000000000000000060448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff81166000908152600c602052604090205460ff166108a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f6e6f742077686974656c69737465640000000000000000000000000000000000604482015260640161080f565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600d60205260408120548391906108db9083906127c0565b9050600554811115610950576000600554826108f791906127d3565b905061091973ffffffffffffffffffffffffffffffffffffffff851682611fbb565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600d602052604090205460055461094c91906127d3565b9250505b73ffffffffffffffffffffffffffffffffffffffff83166000908152600d6020526040812080548492906109859084906127c0565b92505081905550816003600082825461099e91906127c0565b90915550506040805173ffffffffffffffffffffffffffffffffffffffff85168152602081018690527fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c910160405180910390a150506109fd60018055565b5050565b610a09612115565b60025460ff1615610a76576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f636c61696d696e6720616c726561647920737461727465640000000000000000604482015260640161080f565b600980547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f025651be99be0c3d17ca5fd468528159932539a42311b28b8f726404de8cb982906020015b60405180910390a150565b610af8612115565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015610b65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8991906127e6565b905080156109fd578173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb610bcc60005473ffffffffffffffffffffffffffffffffffffffff1690565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602481018490526044016020604051808303816000875af1158015610c3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6291906127ff565b505050565b610c6f612115565b60025460ff16610cdb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f6e6f742073746172746564000000000000000000000000000000000000000000604482015260640161080f565b60045415610d45576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f6c6f636b20706572696f6420616c726561647920737461727465640000000000604482015260640161080f565b426004556040517f293356658af20f2c40b7f4f571cfc2c17bb115e5b0bd31b64eaf07056005c78e90600090a1565b610d7c612115565b60058190556040518181527fb7691dbfc9650ab34f123a17c404d36c594d71624951bd5c2e75dc12ab84beb390602001610ae5565b610db9611f48565b610dc1612196565b60025460ff16610e2d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f6e6f742073746172746564000000000000000000000000000000000000000000604482015260640161080f565b6000610e383361237b565b60095490915073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb336040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602481018490526044016020604051808303816000875af1158015610ecc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef091906127ff565b610f56576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f7061796f7574206661696c656400000000000000000000000000000000000000604482015260640161080f565b336000908152600b6020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055600f909152812082905560088054839290610fad9084906127c0565b9091555050604080513381526020810183905281517fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a929181900390910190a150610ff760018055565b565b611001612115565b6002805482158015610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff90921691909117909155611068576040517f7ff59854dcd16ec009a04057678214b8ead37aa05fa90250e7633a867edd2fcf90600090a150565b6040517f7e67c9c573abf5b29a2bd6a8e18bbf737bd401653253a3b0ada461342d1a8b9a90600090a15b50565b61109d612115565b47801561109257611092816110c760005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690611fbb565b6110eb612115565b610ff760006123c7565b6110fd612115565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600d602052604090205480156111895773ffffffffffffffffffffffffffffffffffffffff82166000908152600d60205260408120819055600380548392906111639084906127d3565b90915550611189905073ffffffffffffffffffffffffffffffffffffffff831682611fbb565b73ffffffffffffffffffffffffffffffffffffffff82166000818152600c602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905590519182527f1f756c8b089af6b33ee121fee8badac2553a2fa89c0575ea91ff8792617746c2910160405180910390a15050565b611214611f48565b336000908152600a602052604090205460ff1661128d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f6e6f74206c6f636b656400000000000000000000000000000000000000000000604482015260640161080f565b336000908152600e602081815260408084208054600a845291852080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055929091529082905560068054839291829184906112ec9084906127d3565b90915550506004541561131d576113058160045461243c565b9094509250611316905082826127c0565b905061136e565b7fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a336040805173ffffffffffffffffffffffffffffffffffffffff9092168252602082018490520160405180910390a15b60095473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb336040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602481018490526044016020604051808303816000875af11580156113ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142391906127ff565b611489576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f7061796f7574206661696c656400000000000000000000000000000000000000604482015260640161080f565b336000908152600b6020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055600f9091528120829055600880548392906114e09084906127c0565b909155505060408051338152602081018390528082018490526060810185905290517f0e13278627a82e478575521362ac044ac9b5071703b94f70880c93b2ebe83d9e9181900360800190a1505050610ff760018055565b611540612115565b60078190556040518181527f2bd8c7e532533c76efd105e7baa7d7d9c1ee13c46a5421e726b12878d411959390602001610ae5565b61157d612115565b80801561158a5750600754155b156115f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f6e6f207261746520736574000000000000000000000000000000000000000000604482015260640161080f565b600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016821580159190911790915561162b90610ff9565b801561165d576040517f25b238f97b16f614c2cc471460ad0d72c33c632bde1300d098e531ed9b5a627a90600090a150565b6040517f30562835bc9d4c0a1d983181efa2572ef67b639546114d477dacfbeb72bb4f4990600090a150565b6116f36040518061018001604052806000151581526020016000151581526020016000151581526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600a602052604081205460ff1661172e576117298361237b565b611755565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600e60205260409020545b905060008060006117b7600e60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546000600454116117af574261243c565b60045461243c565b604080516101808101825273ffffffffffffffffffffffffffffffffffffffff808c166000818152600c60209081528582205460ff90811615158652838352600b8252868320548116151582870152928252600a90528490205416151592820192909252600954949750929550909350909160608301911661183a5760006118ce565b6009546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a81166004830152909116906370a0823190602401602060405180830381865afa1580156118aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ce91906127e6565b815273ffffffffffffffffffffffffffffffffffffffff88166000818152600e602090815260408083205482860152838352600f82528083205481860152928252600d9052205460608201526080810185905260a0810184905260c0810183905260e0016127106119416109608861281c565b61194b9190612833565b815260200161271061195f6109608861281c565b6119699190612833565b61197390876127c0565b90529695505050505050565b611a29604051806102400160405280600015158152602001600015158152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604080516102408101825260025460ff6101008204811615158352161515602082015260045415159181019190915260095473ffffffffffffffffffffffffffffffffffffffff16606082018190526080820190611a88576000611b1a565b6009546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015611af6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b1a91906127e6565b815260200160055481526020016007548152602001600354815260200160065481526020016008548152602001612710610960600654611b5a919061281c565b611b649190612833565b8152602001612710610960600654611b7c919061281c565b611b869190612833565b600654611b9391906127c0565b8152602001612710610960600654611bab919061281c565b611bb59190612833565b670de0b6b3a7640000600754600354611bce919061281c565b611bd89190612833565b611be291906127c0565b81526020016004548152602001600060045411611c00576000611c12565b6301e13380600454611c1291906127c0565b81526020016301e133808152602001611b588152602001610960815250905090565b610ff7343361079a565b611c46612196565b60025460ff16611cb2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f6e6f742073746172746564000000000000000000000000000000000000000000604482015260640161080f565b60045415611d1c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f6c6f636b206e6f7420706f737369626c6520616e796d6f726500000000000000604482015260640161080f565b6000611d273361237b565b336000908152600a6020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055600e9091528120829055600680549293508392909190611d839084906127c0565b909155505060408051338152602081018390527fe9d3f00334d723db78571dfd6c49a7d69c01505d2d18498a0f89d38650e8fcf99101610ae5565b611dc6612115565b73ffffffffffffffffffffffffffffffffffffffff81166000818152600c602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905590519182527f75b2135d1c8c3519f3c09c43fe6527089ef09f40c7981ebf0ed46e79e79032c79101610ae5565b611e4d612115565b60005b81811015610c6257611e82838383818110611e6d57611e6d61286e565b90506020020160208101906106b99190612521565b80611e8c8161289d565b915050611e50565b611e9c612115565b73ffffffffffffffffffffffffffffffffffffffff8116611f3f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161080f565b611092816123c7565b600260015403611fb4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161080f565b6002600155565b80471015612025576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161080f565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d806000811461207f576040519150601f19603f3d011682016040523d82523d6000602084013e612084565b606091505b5050905080610c62576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161080f565b60005473ffffffffffffffffffffffffffffffffffffffff163314610ff7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161080f565b336000908152600c602052604090205460ff1661220f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f6e6f742077686974656c69737465640000000000000000000000000000000000604482015260640161080f565b336000908152600d60205260408120549003612287576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f6e6f74206465706f736974656400000000000000000000000000000000000000604482015260640161080f565b336000908152600b602052604090205460ff1615612301576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f616c726561647920636c61696d65640000000000000000000000000000000000604482015260640161080f565b336000908152600a602052604090205460ff1615610ff7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f616c7265616479206c6f636b6564000000000000000000000000000000000000604482015260640161080f565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600d6020526040812054600754670de0b6b3a7640000916123b79161281c565b6123c19190612833565b92915050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000808061271061244f6109608761281c565b6124599190612833565b9250829050834211801561247957506124766301e13380856127c0565b42105b156124de576298968061248c85426127d3565b6301e1338061249e629896808761281c565b6124a89190612833565b6124b2919061281c565b6124bc9190612833565b92506127106124cd611b588561281c565b6124d79190612833565b91506124ec565b8342116124ec575060009150815b6124f682846127d3565b90509250925092565b73ffffffffffffffffffffffffffffffffffffffff8116811461109257600080fd5b60006020828403121561253357600080fd5b813561253e816124ff565b9392505050565b60006020828403121561255757600080fd5b5035919050565b801515811461109257600080fd5b60006020828403121561257e57600080fd5b813561253e8161255e565b815115158152610180810160208301516125a7602084018215159052565b5060408301516125bb604084018215159052565b50606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525061014080840151818401525061016080840151818401525092915050565b81511515815261024081016020830151612642602084018215159052565b506040830151612656604084018215159052565b50606083015161267e606084018273ffffffffffffffffffffffffffffffffffffffff169052565b506080838101519083015260a0808401519083015260c0808401519083015260e08084015190830152610100808401519083015261012080840151908301526101408084015190830152610160808401519083015261018080840151908301526101a080840151908301526101c080840151908301526101e08084015190830152610200808401519083015261022092830151929091019190915290565b6000806020838503121561272f57600080fd5b823567ffffffffffffffff8082111561274757600080fd5b818501915085601f83011261275b57600080fd5b81358181111561276a57600080fd5b8660208260051b850101111561277f57600080fd5b60209290920196919550909350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156123c1576123c1612791565b818103818111156123c1576123c1612791565b6000602082840312156127f857600080fd5b5051919050565b60006020828403121561281157600080fd5b815161253e8161255e565b80820281158282048414176123c1576123c1612791565b600082612869577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036128ce576128ce612791565b506001019056fea26469706673582212204d0439cb854bdcbeaa841df5a5d33c088b62d04a66dffd36ec246c0021e8030964736f6c63430008130033",
  "devdoc": {
    "author": "Daniel <danieldegendev@gmail.com>",
    "custom:version": "1.0.0",
    "kind": "dev",
    "methods": {
      "addToWhitelist(address)": {
        "params": {
          "_account": "address of the participant"
        }
      },
      "addToWhitelistInBulk(address[])": {
        "params": {
          "_accounts": "array of addresses of participants"
        }
      },
      "claimTokens()": {
        "details": "it also makes some qualify checks whether sender is allowed to execute, otherwise it revertspossible to execute when claming is started"
      },
      "enableClaiming(bool)": {
        "details": "when enabling, automaticall disabled collectiong flag and vice versa",
        "params": {
          "_enable": "true enables, false disables"
        }
      },
      "enableCollecting(bool)": {
        "params": {
          "_enable": "true enables, false disables"
        }
      },
      "getStats()": {
        "details": "`collecting` flag if the native token collection has started or not`claiming` flag if the claiming has started or not (will enable claiming and locking functionality)`lockPeriodActive` flag is the lock period has started`token` address of the token`tokenBalance` contract balance of the token`allocationLimit` defined alloctaion limit`tokensPerOneNative` defined tokens per one native`totalDeposits` total amount of native deposits`totalLockedTokens` total amount of locked tokens`totalClaimedTokens` total amount of claimed tokens`estimatedTotalLockedTokensRewards` estimated amount of total rewards paid for current locked tokens`estimatedTotalLockedTokensPayouts` estimated amount of tokens incl. rewards which are getting paid out`estimatedTotalTokensPayout` estimated amount of ALL possible paid out tokens (claimed + locked + rewards)`lockPeriodStarts` the timestamp when the lock period starts`lockPeriodEnds` the timestamp when the lock period ends`lockPeriodInSeconds` lock period in seconds which result in 365d or 1y`rewardPenaltyBps` % loyalty penalty in basis points`totalRewardBps` % reward in basis points",
        "returns": {
          "_stats": "statistics for a qualifier"
        }
      },
      "getStatsForQualifier(address)": {
        "details": "`isWhitelisted` flag if the qualifier is whitelisted or not`hasClaimed` flag if the qualifier has claimed his tokens`hasLocked` flag if the qualifier has locked his tokens`tokenBalance` qualifiers balance of the token`lockedAmount` amount of locked tokens`claimedAmount` amount of claimed tokens`totalDeposited` amount of deposited native`currentRewardAmount` returns the current reward amount (only if lock period has started, else 0)`currentPenaltyAmount` returns the current penalty amount if the qualifier leaves the lock (only if lock period has started, else 0)`currentRewardAmountNet` returns the current rewart amount excl. penalty amount (only if lock period has started, else 0)`estimatedTotalRewardAmount` potential amount of rewards qualifier receives after whole lock period`estimatedTotalClaimAmount` potential total amount (accumulated + rewards) which the qualifier will receive after whole lock period",
        "params": {
          "_qualifier": "address of the account"
        },
        "returns": {
          "_stats": "statistics for a qualifier"
        }
      },
      "lockJoin()": {
        "details": "it also makes some qualify checks whether sender is allowed to execute, otherwise it revertspossible to execute when claming is started"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeFromWhitelist(address)": {
        "params": {
          "_account": "address of the participant"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setAllocationLimit(uint256)": {
        "params": {
          "_limit": "amount of native token a participant can deposit"
        }
      },
      "setAllocationRate(uint256)": {
        "params": {
          "_rate": "amount of tokens"
        }
      },
      "setToken(address)": {
        "params": {
          "_token": "address of the token"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Degen ATM",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addToWhitelist(address)": {
        "notice": "Adds an account to the whitelist"
      },
      "addToWhitelistInBulk(address[])": {
        "notice": "Adds multiple accounts to the whitelist"
      },
      "claimTokens()": {
        "notice": "Claiming the tokensclaiming is only possible when the claiming period has started"
      },
      "deposit()": {
        "notice": "Deposit native token"
      },
      "enableClaiming(bool)": {
        "notice": "Sets the state of the claiming"
      },
      "enableCollecting(bool)": {
        "notice": "Sets the state of the collecting"
      },
      "getStats()": {
        "notice": "Returns general atm stats"
      },
      "getStatsForQualifier(address)": {
        "notice": "Returns atm stats for a given qualifier"
      },
      "lockJoin()": {
        "notice": "Locks the tokensthe sender will enter a lock state with his allocated amount of tokens"
      },
      "lockLeave()": {
        "notice": "Leaves the lock of the tokensThe sender will leave the locked state if he has joined it.After leaving, he will auto claim the tokens and not be able to join the lock anymore.The sender can leave at any time. Before the lock period, he has not gained any rewardsand claims only his initial allocated amount of tokens. If the lock period has startedand not ended yet, the sender will receive his initial allocated tokens with 30% of therewards, because of the desined penalty when leaving the locked state before end of period.After the lock period has ended, the sender will receive the allocated amount of tokensand the full amount of rewards."
      },
      "recoverNative()": {
        "notice": "Recovers the native funds and sends it to the owner"
      },
      "recoverTokens(address)": {
        "notice": "Recovers the tokens and sends it to the owner"
      },
      "removeFromWhitelist(address)": {
        "notice": "Removes the address from the whitelistWhen the address is being removed and has already deposited, this amount will be sent back to the account"
      },
      "setAllocationLimit(uint256)": {
        "notice": "Sets the deposit limit for accounts"
      },
      "setAllocationRate(uint256)": {
        "notice": "Sets the allocation ratethis number is used to calculate the accumulated token"
      },
      "setToken(address)": {
        "notice": "Sets the token address which to pay out"
      },
      "startLockPeriod()": {
        "notice": "Starts the lock period"
      }
    },
    "notice": "Funds collecting and vesting smart contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 105,
        "contract": "contracts/DegenATM.sol:DegenATM",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 412,
        "contract": "contracts/DegenATM.sol:DegenATM",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 9601,
        "contract": "contracts/DegenATM.sol:DegenATM",
        "label": "claiming",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 9603,
        "contract": "contracts/DegenATM.sol:DegenATM",
        "label": "collecting",
        "offset": 1,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 9605,
        "contract": "contracts/DegenATM.sol:DegenATM",
        "label": "totalDeposits",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 9607,
        "contract": "contracts/DegenATM.sol:DegenATM",
        "label": "startTimestamp",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 9614,
        "contract": "contracts/DegenATM.sol:DegenATM",
        "label": "allocationLimit",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 9616,
        "contract": "contracts/DegenATM.sol:DegenATM",
        "label": "totalLockedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 9618,
        "contract": "contracts/DegenATM.sol:DegenATM",
        "label": "tokensPerOneNative",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 9620,
        "contract": "contracts/DegenATM.sol:DegenATM",
        "label": "totalClaimedTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 9622,
        "contract": "contracts/DegenATM.sol:DegenATM",
        "label": "token",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 9626,
        "contract": "contracts/DegenATM.sol:DegenATM",
        "label": "locked",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 9630,
        "contract": "contracts/DegenATM.sol:DegenATM",
        "label": "claimed",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 9634,
        "contract": "contracts/DegenATM.sol:DegenATM",
        "label": "whitelist",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 9638,
        "contract": "contracts/DegenATM.sol:DegenATM",
        "label": "deposits",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9642,
        "contract": "contracts/DegenATM.sol:DegenATM",
        "label": "lockedAmount",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9646,
        "contract": "contracts/DegenATM.sol:DegenATM",
        "label": "claimedAmount",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}