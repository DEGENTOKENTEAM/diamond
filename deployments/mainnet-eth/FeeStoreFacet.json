{
  "address": "0xC4daAb2243B91AC5280E9684FA5167211792183E",
  "abi": [
    {
      "inputs": [],
      "name": "AddressZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DataMissing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "FeeExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "FeeNotExisting",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "InvalidFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroFees",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroValueNotAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_feeConfigId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "FeeAmountDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "FeeConfigAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "FeeConfigDeleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "FeeConfigMarkedAsDeleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "FeeConfigUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalFees",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "bountyReceiver",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "id",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct FeeConfigSyncHomeFees[]",
              "name": "fees",
              "type": "tuple[]"
            }
          ],
          "indexed": false,
          "internalType": "struct FeeConfigSyncHomeDTO",
          "name": "candidate",
          "type": "tuple"
        }
      ],
      "name": "FeesCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalFees",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "bountyReceiver",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "id",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct FeeConfigSyncHomeFees[]",
              "name": "fees",
              "type": "tuple[]"
            }
          ],
          "indexed": false,
          "internalType": "struct FeeConfigSyncHomeDTO",
          "name": "candidate",
          "type": "tuple"
        }
      ],
      "name": "FeesPrepared",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalFees",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "bountyReceiver",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "id",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct FeeConfigSyncHomeFees[]",
              "name": "fees",
              "type": "tuple[]"
            }
          ],
          "indexed": false,
          "internalType": "struct FeeConfigSyncHomeDTO",
          "name": "candidate",
          "type": "tuple"
        }
      ],
      "name": "FeesRestored",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "enum FeeSyncAction",
              "name": "action",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct FeeConfigSyncDTO[]",
          "name": "candidates",
          "type": "tuple[]"
        }
      ],
      "name": "FeesSynced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "intermediateAsset",
          "type": "address"
        }
      ],
      "name": "UpdatedIntermediateAsset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "UpdatedOperator",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "collectFeesFromFeeStore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_feeConfigId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "feeStoreDepositFeeAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        }
      ],
      "name": "getCollectedFeesByConfigId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_collectedFees",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCollectedFeesTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_collectedFeesTotal",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeeConfigIds",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "_feeConfigIds",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        }
      ],
      "name": "getFeeStoreConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "deleted",
              "type": "bool"
            }
          ],
          "internalType": "struct FeeStoreConfig",
          "name": "_feeStoreConfig",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getIntermediateAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "_intermediateAsset",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOperator",
      "outputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_intermediateAsset",
          "type": "address"
        }
      ],
      "name": "initFeeStoreFacet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalFees",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "bountyReceiver",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "id",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct FeeConfigSyncHomeFees[]",
              "name": "fees",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct FeeConfigSyncHomeDTO",
          "name": "_dto",
          "type": "tuple"
        }
      ],
      "name": "restoreFeesFromSendFees",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_intermediateAsset",
          "type": "address"
        }
      ],
      "name": "setIntermediateAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "setOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "enum FeeSyncAction",
              "name": "action",
              "type": "uint8"
            }
          ],
          "internalType": "struct FeeConfigSyncDTO[]",
          "name": "_feeConfigSyncDTO",
          "type": "tuple[]"
        }
      ],
      "name": "syncFees",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x05838efd3a537287498cce22ad14e92f93a65dc235803630d2cbde42b12f201c",
  "receipt": {
    "to": null,
    "from": "0x0000000022D4802541320DB7F22693405Db19422",
    "contractAddress": "0xC4daAb2243B91AC5280E9684FA5167211792183E",
    "transactionIndex": 98,
    "gasUsed": "2117509",
    "logsBloom": "0x
    "blockHash": "0x69fb2464b1596be1ddf6a7ab96e8378085794bfe34b8d287ac12bf4643965eff",
    "transactionHash": "0x05838efd3a537287498cce22ad14e92f93a65dc235803630d2cbde42b12f201c",
    "logs": [],
    "blockNumber": 18806927,
    "cumulativeGasUsed": "18321069",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ab1b8e45ec943447e24d132ebc1c295a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DataMissing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"FeeExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"FeeNotExisting\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"InvalidFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroFees\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroValueNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_feeConfigId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"FeeAmountDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"FeeConfigAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"FeeConfigDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"FeeConfigMarkedAsDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"FeeConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalFees\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bountyReceiver\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct FeeConfigSyncHomeFees[]\",\"name\":\"fees\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct FeeConfigSyncHomeDTO\",\"name\":\"candidate\",\"type\":\"tuple\"}],\"name\":\"FeesCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalFees\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bountyReceiver\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct FeeConfigSyncHomeFees[]\",\"name\":\"fees\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct FeeConfigSyncHomeDTO\",\"name\":\"candidate\",\"type\":\"tuple\"}],\"name\":\"FeesPrepared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalFees\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bountyReceiver\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct FeeConfigSyncHomeFees[]\",\"name\":\"fees\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct FeeConfigSyncHomeDTO\",\"name\":\"candidate\",\"type\":\"tuple\"}],\"name\":\"FeesRestored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"enum FeeSyncAction\",\"name\":\"action\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct FeeConfigSyncDTO[]\",\"name\":\"candidates\",\"type\":\"tuple[]\"}],\"name\":\"FeesSynced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"intermediateAsset\",\"type\":\"address\"}],\"name\":\"UpdatedIntermediateAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"UpdatedOperator\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"collectFeesFromFeeStore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_feeConfigId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"feeStoreDepositFeeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"getCollectedFeesByConfigId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_collectedFees\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollectedFeesTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_collectedFeesTotal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeConfigIds\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_feeConfigIds\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"getFeeStoreConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"deleted\",\"type\":\"bool\"}],\"internalType\":\"struct FeeStoreConfig\",\"name\":\"_feeStoreConfig\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIntermediateAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_intermediateAsset\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_intermediateAsset\",\"type\":\"address\"}],\"name\":\"initFeeStoreFacet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalFees\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bountyReceiver\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct FeeConfigSyncHomeFees[]\",\"name\":\"fees\",\"type\":\"tuple[]\"}],\"internalType\":\"struct FeeConfigSyncHomeDTO\",\"name\":\"_dto\",\"type\":\"tuple\"}],\"name\":\"restoreFeesFromSendFees\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_intermediateAsset\",\"type\":\"address\"}],\"name\":\"setIntermediateAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"enum FeeSyncAction\",\"name\":\"action\",\"type\":\"uint8\"}],\"internalType\":\"struct FeeConfigSyncDTO[]\",\"name\":\"_feeConfigSyncDTO\",\"type\":\"tuple[]\"}],\"name\":\"syncFees\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Daniel <danieldegendev@gmail.com>\",\"custom:version\":\"1.0.0\",\"kind\":\"dev\",\"methods\":{\"feeStoreDepositFeeAmount(bytes32,uint256)\":{\"details\":\"can only be executed from the fee store manager role\",\"params\":{\"_amount\":\"amount to deposit\",\"_feeConfigId\":\"fee config id\"}},\"getCollectedFeesByConfigId(bytes32)\":{\"params\":{\"_id\":\"fee config id\"},\"returns\":{\"_collectedFees\":\"amount of fees collected\"}},\"getCollectedFeesTotal()\":{\"details\":\"this is a cumulative number of all fees collected on this store until it get's send to the home chain\",\"returns\":{\"_collectedFeesTotal\":\"amount of total fees collected\"}},\"getFeeConfigIds()\":{\"returns\":{\"_feeConfigIds\":\"array of fee ids\"}},\"getFeeStoreConfig(bytes32)\":{\"params\":{\"_id\":\"fee config id\"},\"returns\":{\"_feeStoreConfig\":\"FeeStoreConfig, see {contracts/diamond/helpers/Structs.sol#FeeStoreConfig}\"}},\"getIntermediateAsset()\":{\"returns\":{\"_intermediateAsset\":\"address of the intermadiate asset\"}},\"getOperator()\":{\"returns\":{\"_operator\":\"address of the operator\"}},\"initFeeStoreFacet(address,address)\":{\"params\":{\"_operator\":\"address of account that is receiving fees if this contracts automations are failing\"}},\"restoreFeesFromSendFees((uint256,address,(bytes32,uint256)[]))\":{\"details\":\"this function restores the fees based on refunds from bridge providers, in case someone starts try to sync fees home and it's failing on the bridge sideif the fee config is not configured anymore, the funds that are getting restored, will be send to the operator\",\"params\":{\"_dto\":\"data which is primarily used for sending fees to the home chain\"}},\"setIntermediateAsset(address)\":{\"details\":\"_intermediateAsset can't be a zero address\",\"params\":{\"_intermediateAsset\":\"address of the asset\"}},\"setOperator(address)\":{\"details\":\"_operator can't be a zero address\",\"params\":{\"_operator\":\"address of the operator\"}},\"syncFees((bytes32,uint256,address,uint8)[])\":{\"details\":\"it will check wheter an array is sufficient and add, updates or removes fee configs based on the fee sync action create by the fee manager\",\"params\":{\"_feeConfigSyncDTO\":\"array of fee configs to process in the fee store\"}}},\"title\":\"Fee Store Facet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"collectFeesFromFeeStore()\":{\"notice\":\"Sends the current collected fees to the Manager in case no bridge provider is working and the job needs to be done manually\"},\"feeStoreDepositFeeAmount(bytes32,uint256)\":{\"notice\":\"Deposit a fee manually\"},\"getCollectedFeesByConfigId(bytes32)\":{\"notice\":\"Gets the collected fees for a specific fee id\"},\"getCollectedFeesTotal()\":{\"notice\":\"Gets the current collected total fees on this store\"},\"getFeeConfigIds()\":{\"notice\":\"Gets all fee config ids defined on this fee store\"},\"getFeeStoreConfig(bytes32)\":{\"notice\":\"Gets a fee store config based on the fee id\"},\"getIntermediateAsset()\":{\"notice\":\"Gets the current intermediate asset\"},\"getOperator()\":{\"notice\":\"Gets the current operator\"},\"initFeeStoreFacet(address,address)\":{\"notice\":\"Initializes the facet\"},\"restoreFeesFromSendFees((uint256,address,(bytes32,uint256)[]))\":{\"notice\":\"Restores fees which are actually intended to be sent to the home chain\"},\"setIntermediateAsset(address)\":{\"notice\":\"Sets the intermediate asset\"},\"setOperator(address)\":{\"notice\":\"Sets a new operator\"},\"syncFees((bytes32,uint256,address,uint8)[])\":{\"notice\":\"Synchronizes fee configs\"}},\"notice\":\"every contract needs to take care of the fees they collect. ITS JUST STORAGE HERE\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/diamond/facets/FeeStoreFacet.sol\":\"FeeStoreFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC20Internal } from './IERC20Internal.sol';\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface IERC20 is IERC20Internal {\\n    /**\\n     * @notice query the total minted token supply\\n     * @return token supply\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice query the token balance of given account\\n     * @param account address to query\\n     * @return token balance\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice query the allowance granted from given holder to given spender\\n     * @param holder approver of allowance\\n     * @param spender recipient of allowance\\n     * @return token allowance\\n     */\\n    function allowance(\\n        address holder,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice grant approval to spender to spend tokens\\n     * @dev prefer ERC20Extended functions to avoid transaction-ordering vulnerability (see https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729)\\n     * @param spender recipient of allowance\\n     * @param amount quantity of tokens approved for spending\\n     * @return success status (always true; otherwise function should revert)\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @notice transfer tokens to given recipient\\n     * @param recipient beneficiary of token transfer\\n     * @param amount quantity of tokens to transfer\\n     * @return success status (always true; otherwise function should revert)\\n     */\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice transfer tokens to given recipient on behalf of given holder\\n     * @param holder holder of tokens prior to transfer\\n     * @param recipient beneficiary of token transfer\\n     * @param amount quantity of tokens to transfer\\n     * @return success status (always true; otherwise function should revert)\\n     */\\n    function transferFrom(\\n        address holder,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc4554dc5c7fdc1a333511876ea1ab7a932bfdcdf092e658bf66049956c0f8aca\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC20Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC20 interface needed by internal functions\\n */\\ninterface IERC20Internal {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x5dc63954123c58280a48da71f91c435dd7373f56bd472867c80177359c885e53\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC20/metadata/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC20MetadataInternal } from './IERC20MetadataInternal.sol';\\n\\n/**\\n * @title ERC20 metadata interface\\n */\\ninterface IERC20Metadata is IERC20MetadataInternal {\\n    /**\\n     * @notice return token name\\n     * @return token name\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @notice return token symbol\\n     * @return token symbol\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @notice return token decimals, generally used only for display purposes\\n     * @return token decimals\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x22eefd0dbd7637f41c8bfc3662a4b1ae6f084f27f26e34cc9bf124e0aee10a01\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC20/metadata/IERC20MetadataInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title ERC20 metadata internal interface\\n */\\ninterface IERC20MetadataInternal {\\n\\n}\\n\",\"keccak256\":\"0x32464590a972a9325d20c7125d157594df9473b6496ce6a66df617c41c4039ec\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from './UintUtils.sol';\\n\\nlibrary AddressUtils {\\n    using UintUtils for uint256;\\n\\n    error AddressUtils__InsufficientBalance();\\n    error AddressUtils__NotContract();\\n    error AddressUtils__SendValueFailed();\\n\\n    function toString(address account) internal pure returns (string memory) {\\n        return uint256(uint160(account)).toHexString(20);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        if (!success) revert AddressUtils__SendValueFailed();\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        if (value > address(this).balance)\\n            revert AddressUtils__InsufficientBalance();\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    /**\\n     * @notice execute arbitrary external call with limited gas usage and amount of copied return data\\n     * @dev derived from https://github.com/nomad-xyz/ExcessivelySafeCall (MIT License)\\n     * @param target recipient of call\\n     * @param gasAmount gas allowance for call\\n     * @param value native token value to include in call\\n     * @param maxCopy maximum number of bytes to copy from return data\\n     * @param data encoded call data\\n     * @return success whether call is successful\\n     * @return returnData copied return data\\n     */\\n    function excessivelySafeCall(\\n        address target,\\n        uint256 gasAmount,\\n        uint256 value,\\n        uint16 maxCopy,\\n        bytes memory data\\n    ) internal returns (bool success, bytes memory returnData) {\\n        returnData = new bytes(maxCopy);\\n\\n        assembly {\\n            // execute external call via assembly to avoid automatic copying of return data\\n            success := call(\\n                gasAmount,\\n                target,\\n                value,\\n                add(data, 0x20),\\n                mload(data),\\n                0,\\n                0\\n            )\\n\\n            // determine whether to limit amount of data to copy\\n            let toCopy := returndatasize()\\n\\n            if gt(toCopy, maxCopy) {\\n                toCopy := maxCopy\\n            }\\n\\n            // store the length of the copied bytes\\n            mstore(returnData, toCopy)\\n\\n            // copy the bytes from returndata[0:toCopy]\\n            returndatacopy(add(returnData, 0x20), 0, toCopy)\\n        }\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        if (!isContract(target)) revert AddressUtils__NotContract();\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7d924db4dbd9210923ab08db77db3c77438014c255fd49fa208ebce283d991bf\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC20 } from '../interfaces/IERC20.sol';\\nimport { AddressUtils } from './AddressUtils.sol';\\n\\n/**\\n * @title Safe ERC20 interaction library\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary SafeERC20 {\\n    using AddressUtils for address;\\n\\n    error SafeERC20__ApproveFromNonZeroToNonZero();\\n    error SafeERC20__DecreaseAllowanceBelowZero();\\n    error SafeERC20__OperationFailed();\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    /**\\n     * @dev safeApprove (like approve) should only be called when setting an initial allowance or when resetting it to zero; otherwise prefer safeIncreaseAllowance and safeDecreaseAllowance\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        if ((value != 0) && (token.allowance(address(this), spender) != 0))\\n            revert SafeERC20__ApproveFromNonZeroToNonZero();\\n\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            if (oldAllowance < value)\\n                revert SafeERC20__DecreaseAllowanceBelowZero();\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(\\n                token,\\n                abi.encodeWithSelector(\\n                    token.approve.selector,\\n                    spender,\\n                    newAllowance\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice send transaction data and check validity of return value, if present\\n     * @param token ERC20 token interface\\n     * @param data transaction data\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        bytes memory returndata = address(token).functionCall(\\n            data,\\n            'SafeERC20: low-level call failed'\\n        );\\n\\n        if (returndata.length > 0) {\\n            if (!abi.decode(returndata, (bool)))\\n                revert SafeERC20__OperationFailed();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd1d6d797898b4cfd575c8c9aca1194e9de7bb88fe6c8fb2afaf2b100e5992826\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/UintUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title utility functions for uint256 operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary UintUtils {\\n    error UintUtils__InsufficientHexLength();\\n\\n    bytes16 private constant HEX_SYMBOLS = '0123456789abcdef';\\n\\n    function add(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? sub(a, -b) : a + uint256(b);\\n    }\\n\\n    function sub(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? add(a, -b) : a - uint256(b);\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0';\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0x00';\\n        }\\n\\n        uint256 length = 0;\\n\\n        for (uint256 temp = value; temp != 0; temp >>= 8) {\\n            unchecked {\\n                length++;\\n            }\\n        }\\n\\n        return toHexString(value, length);\\n    }\\n\\n    function toHexString(\\n        uint256 value,\\n        uint256 length\\n    ) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n\\n        unchecked {\\n            for (uint256 i = 2 * length + 1; i > 1; --i) {\\n                buffer[i] = HEX_SYMBOLS[value & 0xf];\\n                value >>= 4;\\n            }\\n        }\\n\\n        if (value != 0) revert UintUtils__InsufficientHexLength();\\n\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x5aaeaea22a0800402c6f2d8ce6185293bc64f74f6c390c1b1c53b624b43972f8\",\"license\":\"MIT\"},\"contracts/diamond/facets/FeeStoreFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.19;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { IFeeStoreFacet } from \\\"./../interfaces/IFeeStoreFacet.sol\\\";\\nimport { LibAccessControlEnumerable } from \\\"./../libraries/LibAccessControlEnumerable.sol\\\";\\nimport { LibFeeStoreStorage } from \\\"./../libraries/LibFeeStoreStorage.sol\\\";\\nimport { LibFeeStore } from \\\"./../libraries/LibFeeStore.sol\\\";\\nimport { FeeConfig, FeeConfigSyncDTO, FeeConfigSyncHomeDTO, FeeStoreConfig, FeeConfigSyncHomeFees } from \\\"./../helpers/Structs.sol\\\";\\nimport { AlreadyInitialized } from \\\"./../helpers/GenericErrors.sol\\\";\\nimport { addressZeroCheck } from \\\"./../helpers/Functions.sol\\\";\\nimport { FeeSyncAction } from \\\"./../helpers/Enums.sol\\\";\\nimport { Constants } from \\\"./../helpers/Constants.sol\\\";\\n\\n/// @title Fee Store Facet\\n/// @author Daniel <danieldegendev@gmail.com>\\n/// @notice every contract needs to take care of the fees they collect. ITS JUST STORAGE HERE\\n/// @custom:version 1.0.0\\ncontract FeeStoreFacet is IFeeStoreFacet {\\n    bytes32 constant STORAGE_NAMESPACE = keccak256(\\\"degenx.fee-store-internal.storage.v1\\\");\\n\\n    event FeeConfigAdded(bytes32 indexed id);\\n    event FeeConfigUpdated(bytes32 indexed id);\\n    event FeeConfigDeleted(bytes32 indexed id);\\n    event FeeConfigMarkedAsDeleted(bytes32 indexed id);\\n    event FeesPrepared(uint256 amount, FeeConfigSyncHomeDTO candidate);\\n    event FeesSynced(FeeConfigSyncDTO[] candidates);\\n    event FeesRestored(FeeConfigSyncHomeDTO candidate);\\n    event FeesCollected(FeeConfigSyncHomeDTO candidate);\\n    event UpdatedOperator(address operator);\\n    event UpdatedIntermediateAsset(address intermediateAsset);\\n    event FeeAmountDeposited(address indexed _asset, bytes32 indexed _feeConfigId, uint256 _amount);\\n    event Initialized();\\n\\n    error InvalidFee(bytes32 id);\\n    error DataMissing();\\n    error TransferFailed();\\n\\n    struct Storage {\\n        // initialized flag\\n        bool initialized;\\n    }\\n\\n    /// Initializes the facet\\n    /// @param _operator address of account that is receiving fees if this contracts automations are failing\\n    function initFeeStoreFacet(address _operator, address _intermediateAsset) external {\\n        LibAccessControlEnumerable.checkRole(Constants.DEPLOYER_ROLE);\\n        LibFeeStoreStorage.FeeStoreStorage storage s = _store();\\n        Storage storage si = _storeInternal();\\n        if (si.initialized) revert AlreadyInitialized();\\n        s.operator = _operator;\\n        s.intermediateAsset = _intermediateAsset;\\n        si.initialized = true;\\n        emit Initialized();\\n    }\\n\\n    /// @inheritdoc IFeeStoreFacet\\n    /// @dev it will check wheter an array is sufficient and add, updates or removes fee configs based on the fee sync action create by the fee manager\\n    function syncFees(FeeConfigSyncDTO[] calldata _feeConfigSyncDTO) external payable {\\n        LibAccessControlEnumerable.checkRole(Constants.FEE_STORE_MANAGER_ROLE);\\n        if (_feeConfigSyncDTO.length == 0) revert DataMissing();\\n        for (uint256 i = 0; i < _feeConfigSyncDTO.length; ) {\\n            FeeConfigSyncDTO memory _dto = _feeConfigSyncDTO[i];\\n            if (_dto.id == bytes32(0)) revert InvalidFee(_dto.id);\\n            if (_dto.fee == 0) revert InvalidFee(_dto.id);\\n            if (_dto.action == FeeSyncAction.Add) {\\n                _addFee(_dto.id, _dto.fee, _dto.target);\\n            }\\n            if (_dto.action == FeeSyncAction.Update) {\\n                _updateFee(_dto.id, _dto.fee, _dto.target);\\n            }\\n            if (_dto.action == FeeSyncAction.Delete) {\\n                _deleteFee(_dto.id);\\n            }\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        emit FeesSynced(_feeConfigSyncDTO);\\n    }\\n\\n    /// @dev this function restores the fees based on refunds from bridge providers, in case someone starts try to sync fees home and it's failing on the bridge side\\n    /// @dev if the fee config is not configured anymore, the funds that are getting restored, will be send to the operator\\n    /// @inheritdoc IFeeStoreFacet\\n    function restoreFeesFromSendFees(FeeConfigSyncHomeDTO memory _dto) external payable {\\n        LibAccessControlEnumerable.checkRole(Constants.FEE_STORE_MANAGER_ROLE);\\n        LibFeeStoreStorage.FeeStoreStorage storage s = _store();\\n        try IERC20(s.intermediateAsset).transferFrom(msg.sender, address(this), _dto.totalFees) returns (bool _success) {\\n            if (_success) {\\n                for (uint256 i = 0; i < _dto.fees.length; ) {\\n                    if (s.feeConfigs[_dto.fees[i].id].id == bytes32(\\\"\\\")) {\\n                        IERC20(s.intermediateAsset).transfer(s.operator, _dto.fees[i].amount);\\n                    } else {\\n                        s.collectedFeesTotal += _dto.fees[i].amount;\\n                        s.collectedFees[_dto.fees[i].id] += _dto.fees[i].amount;\\n                    }\\n                    unchecked {\\n                        i++;\\n                    }\\n                }\\n                emit FeesRestored(_dto);\\n            } else revert TransferFailed();\\n        } catch Error(string memory reason) {\\n            revert(reason);\\n        }\\n    }\\n\\n    /// @notice Sends the current collected fees to the Manager in case no bridge provider is working and the job needs to be done manually\\n    function collectFeesFromFeeStore() external {\\n        LibAccessControlEnumerable.checkRole(Constants.FEE_STORE_MANAGER_ROLE);\\n        LibFeeStoreStorage.FeeStoreStorage storage s = _store();\\n        addressZeroCheck(s.operator);\\n        FeeConfigSyncHomeDTO memory _dto = LibFeeStore.prepareToSendFees();\\n        // slither-disable-next-line unchecked-transfer\\n        IERC20(s.intermediateAsset).transfer(s.operator, _dto.totalFees);\\n        emit FeesCollected(_dto);\\n    }\\n\\n    /// Sets a new operator\\n    /// @param _operator address of the operator\\n    /// @dev _operator can't be a zero address\\n    function setOperator(address _operator) external {\\n        LibAccessControlEnumerable.checkRole(Constants.DEPLOYER_ROLE);\\n        addressZeroCheck(_operator);\\n        LibFeeStore.setOperator(_operator);\\n        emit UpdatedOperator(_operator);\\n    }\\n\\n    /// Sets the intermediate asset\\n    /// @param _intermediateAsset address of the asset\\n    /// @dev _intermediateAsset can't be a zero address\\n    function setIntermediateAsset(address _intermediateAsset) external {\\n        LibAccessControlEnumerable.checkRole(Constants.DEPLOYER_ROLE);\\n        addressZeroCheck(_intermediateAsset);\\n        LibFeeStore.setIntermediateAsset(_intermediateAsset);\\n        emit UpdatedIntermediateAsset(_intermediateAsset);\\n    }\\n\\n    /// Deposit a fee manually\\n    /// @param _feeConfigId fee config id\\n    /// @param _amount amount to deposit\\n    /// @dev can only be executed from the fee store manager role\\n    function feeStoreDepositFeeAmount(bytes32 _feeConfigId, uint256 _amount) external {\\n        LibAccessControlEnumerable.checkRole(Constants.FEE_STORE_MANAGER_ROLE);\\n        address _asset = LibFeeStore.getIntermediateAsset();\\n        IERC20(_asset).transferFrom(msg.sender, address(this), _amount);\\n        LibFeeStore.putFees(_feeConfigId, _amount);\\n        emit FeeAmountDeposited(_asset, _feeConfigId, _amount);\\n    }\\n\\n    /// viewables\\n\\n    /// Gets a fee store config based on the fee id\\n    /// @param _id fee config id\\n    /// @return _feeStoreConfig FeeStoreConfig, see {contracts/diamond/helpers/Structs.sol#FeeStoreConfig}\\n    function getFeeStoreConfig(bytes32 _id) external view returns (FeeStoreConfig memory _feeStoreConfig) {\\n        LibFeeStoreStorage.FeeStoreStorage storage s = _store();\\n        _feeStoreConfig = s.feeConfigs[_id];\\n    }\\n\\n    /// Gets the current collected total fees on this store\\n    /// @return _collectedFeesTotal amount of total fees collected\\n    /// @dev this is a cumulative number of all fees collected on this store until it get's send to the home chain\\n    function getCollectedFeesTotal() external view returns (uint256 _collectedFeesTotal) {\\n        LibFeeStoreStorage.FeeStoreStorage storage s = _store();\\n        _collectedFeesTotal = s.collectedFeesTotal;\\n    }\\n\\n    /// Gets the collected fees for a specific fee id\\n    /// @param _id fee config id\\n    /// @return _collectedFees amount of fees collected\\n    function getCollectedFeesByConfigId(bytes32 _id) external view returns (uint256 _collectedFees) {\\n        LibFeeStoreStorage.FeeStoreStorage storage s = _store();\\n        _collectedFees = s.collectedFees[_id];\\n    }\\n\\n    /// Gets all fee config ids defined on this fee store\\n    /// @return _feeConfigIds array of fee ids\\n    function getFeeConfigIds() external view returns (bytes32[] memory _feeConfigIds) {\\n        LibFeeStoreStorage.FeeStoreStorage storage s = _store();\\n        _feeConfigIds = s.feeConfigIds;\\n    }\\n\\n    /// Gets the current operator\\n    /// @return _operator address of the operator\\n    function getOperator() external view returns (address _operator) {\\n        _operator = LibFeeStore.getOperator();\\n    }\\n\\n    /// Gets the current intermediate asset\\n    /// @return _intermediateAsset address of the intermadiate asset\\n    function getIntermediateAsset() external view returns (address _intermediateAsset) {\\n        _intermediateAsset = LibFeeStore.getIntermediateAsset();\\n    }\\n\\n    /// internals\\n\\n    /// Wrapper function to add a fee to the store\\n    /// @param _id fee id\\n    /// @param _fee fee value\\n    /// @param _target the target address\\n    function _addFee(bytes32 _id, uint256 _fee, address _target) internal {\\n        LibFeeStore.addFee(_id, _fee, _target);\\n    }\\n\\n    /// Wrapper function to update a fee in the store\\n    /// @param _id fee id\\n    /// @param _fee fee value\\n    /// @param _target the target address\\n    function _updateFee(bytes32 _id, uint256 _fee, address _target) internal {\\n        LibFeeStore.updateFee(_id, _fee, _target);\\n    }\\n\\n    /// Removes a fee from the store\\n    /// @param _id fee id\\n    function _deleteFee(bytes32 _id) internal {\\n        LibFeeStore.deleteFee(_id);\\n    }\\n\\n    /// Store\\n    function _store() internal pure returns (LibFeeStoreStorage.FeeStoreStorage storage s) {\\n        s = LibFeeStoreStorage.feeStoreStorage();\\n    }\\n\\n    /// InternalStore\\n    function _storeInternal() internal pure returns (Storage storage s) {\\n        bytes32 position = STORAGE_NAMESPACE;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf91ff1dca42b6267a15c09062607c09e7598a63fdb7c8086f4dbc5bf96fade28\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/helpers/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nlibrary Constants {\\n    /*-------------------------------- Role --------------------------------*/\\n    // 0x0000000000000000000000000000000000000000000000000000000000000000\\n    bytes32 constant DEFAULT_ADMIN_ROLE = 0x00;\\n    // 0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775\\n    bytes32 constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    // 0xfc425f2263d0df187444b70e47283d622c70181c5baebb1306a01edba1ce184c\\n    bytes32 constant DEPLOYER_ROLE = keccak256(\\\"DEPLOYER_ROLE\\\");\\n    // 0x6c0757dc3e6b28b2580c03fd9e96c274acf4f99d91fbec9b418fa1d70604ff1c\\n    bytes32 constant FEE_MANAGER_ROLE = keccak256(\\\"FEE_MANAGER_ROLE\\\");\\n    // 0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6\\n    bytes32 constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    // 0x3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a848\\n    bytes32 constant BURNER_ROLE = keccak256(\\\"BURNER_ROLE\\\");\\n    // 0x63eb04268b235ac1afacf3bcf4b19c5c175d0417a1555fb3ff79ae190f71ee7c\\n    bytes32 constant FEE_STORE_MANAGER_ROLE = keccak256(\\\"FEE_STORE_MANAGER_ROLE\\\");\\n    // 0x77f52ccf2f32e71a0cff8f14ad8c8303b7d2e4c7609b8fba963114f4db2af767\\n    bytes32 constant FEE_DISTRIBUTOR_PUSH_ROLE = keccak256(\\\"FEE_DISTRIBUTOR_PUSH_ROLE\\\");\\n    // 0xe85d5f1f8338cb18f500856d1568d0f3b0d0971f25b3ccd134475e991354edbf\\n    bytes32 constant FEE_DISTRIBUTOR_MANAGER = keccak256(\\\"FEE_DISTRIBUTOR_MANAGER\\\");\\n    /*----------------------------------------------------------------------*/\\n\\n    /*------------------------------- Fee ID -------------------------------*/\\n    // 0xacfc432e98ad100d9f8c385f3782bc88a17e1de7e53f69678cbcc41e8ffe72b0\\n    bytes32 constant ERC20_MARKETING_FEE = keccak256(\\\"ERC20_MARKETING_FEE\\\");\\n    // 0x6b78196f16f828b24a5a6584d4a1bcc5ce2f3154ba57839db273e6a4ebbe92c2\\n    bytes32 constant ERC20_REWARD_FEE = keccak256(\\\"ERC20_REWARD_FEE\\\");\\n    // 0x6e3678bee6f77c8a6179922c9a518b08407e6d9d2593ac683a87c979c8b31a12\\n    bytes32 constant ERC20_PLATFORM_FEE = keccak256(\\\"ERC20_PLATFORM_FEE\\\");\\n    // 0x6e2178bb28988b4c92cd3092e9e342e7639bfda2f68a02ac478cb084759607cf\\n    bytes32 constant ERC20_DEVELOPER_FEE = keccak256(\\\"ERC20_DEVELOPER_FEE\\\");\\n    /*----------------------------------------------------------------------*/\\n\\n    /*--------------------------- Relayer Actions --------------------------*/\\n    // 0xf145583e6e33d9da99af75b579493b11db4229a339336b82c748312f152b29a9\\n    bytes32 constant RELAYER_ACTION_DEPLOY_FEES = keccak256(\\\"RELAYER_ACTION_DEPLOY_FEES\\\");\\n    // 0xf375f410a0dc135af0d9a16e273eac999064981d8813a68af762e93567a43aac\\n    bytes32 constant RELAYER_ACTION_DEPLOY_FEES_CONFIRM = keccak256(\\\"RELAYER_ACTION_DEPLOY_FEES_CONFIRM\\\");\\n    // 0x9d62257b25ea052fe7cd5123fd6b791268b8673b073aae5de4a823c4dc7d7607\\n    bytes32 constant RELAYER_ACTION_SEND_FEES = keccak256(\\\"RELAYER_ACTION_SEND_FEES\\\");\\n    /*----------------------------------------------------------------------*/\\n}\\n\",\"keccak256\":\"0xd97d83c120a78ed4d7d6cc2ca3b62d2e9fd2fd82d3ffebfffb1659f05218c6cf\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/helpers/Enums.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/// enums\\nenum FeeCurrency {\\n    Null,\\n    // L1\\n    Native,\\n    // different asset\\n    Token\\n}\\n\\nenum FeeType {\\n    Null,\\n    // absolute/onetime\\n    Default,\\n    // buy/sell depending on target\\n    From,\\n    // buy/sell depending on target\\n    To\\n}\\n\\nenum FeeSyncAction {\\n    Null,\\n    // adding a fee\\n    Add,\\n    // updating a fee\\n    Update,\\n    // removing a fee\\n    Delete\\n}\\n\\nenum FeeDeployState {\\n    Null,\\n    // a fee is recently added, updated or removed\\n    Queued,\\n    // a fee config is deployed\\n    Pending,\\n    // a fee gets receives information about being deployed\\n    Deployed\\n}\\n\",\"keccak256\":\"0x0c969525e1a2602179c6b12648cd070a7850be970ae4845b2857d1e888799873\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/helpers/Functions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.17;\\n\\nimport { AddressZero } from \\\"./GenericErrors.sol\\\";\\n\\nfunction addressZeroCheck(address _candidate) pure {\\n    if (_candidate == address(0)) revert AddressZero();\\n}\\n\",\"keccak256\":\"0x944f958352170d69f64999ddbf8d0045b888b1ea3fe73dda77bf435fa80ee763\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/helpers/GenericErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nerror AddressZero();\\nerror ZeroValueNotAllowed();\\nerror InsufficientAllowance();\\nerror InsufficientBalance();\\nerror InsufficientFunds();\\nerror NotAllowed();\\nerror AlreadyInitialized();\\nerror NoReetrancy();\\nerror WrongChain();\\nerror UnexpectedBalance();\\nerror FailToSendNative();\\n\",\"keccak256\":\"0xa32b95f0bbd73e6900f30956dc9a0019ec3637eb09f7bab6454bff46d662403d\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/helpers/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport { FeeCurrency, FeeType, FeeSyncAction, FeeDeployState } from \\\"./Enums.sol\\\";\\n\\n/// General Fee Config\\n\\nstruct FeeConfig {\\n    // relative: 10000 = 1% or 100 = 0.01%\\n    // absolute: 10000 = 1 or 1 = 0.0001\\n    uint256 fee;\\n    // Assets are always going to the fee distributor on the home chain. This config is necessary to define which receiver gets this asset.\\n    // It's purpose can be overwritten by the FeeDistributor. So it will serve as a fallback.\\n    address receiver;\\n    // defines the type. It does not have a purpose yet but may have in the future\\n    // see {Enums->FeeType}\\n    FeeType ftype;\\n    // type of how the fees should be handles\\n    // see {Enums->FeeCurrency}\\n    FeeCurrency currency;\\n    // // Deploy state of a fee config\\n    // // see {Enums->FeeDeployState}\\n    // FeeDeployState deployState;\\n}\\n\\n/// Fee Management\\n\\nstruct AddFeeConfigParams {\\n    // fee id which can be defined elsewhere but needs to be a bytes32\\n    bytes32 id;\\n    // see {struct FeeConfig->fee}\\n    uint256 fee;\\n    // see {struct FeeConfig->receiver}\\n    address receiver;\\n    // see {struct FeeConfig->ftype}\\n    FeeType ftype;\\n    // see {struct FeeConfig->currency}\\n    FeeCurrency currency;\\n}\\n\\nstruct UpdateFeeConfigParams {\\n    // see {struct AddFeeConfigParams->id}\\n    bytes32 id;\\n    // see {struct FeeConfig->fee}\\n    uint256 fee;\\n    // see {struct FeeConfig->fee}\\n    address receiver;\\n}\\n\\nstruct RemoveFeeConfigParams {\\n    // see {struct AddFeeConfigParams->id}\\n    bytes32 id;\\n}\\n\\n/// Chain Management\\n\\nstruct AddChainParams {\\n    // chain id\\n    uint256 chainId;\\n    // address of the participant, most likely the diamon address of the target chain\\n    address target;\\n}\\nstruct RemoveChainParams {\\n    // chain id\\n    uint256 chainId;\\n}\\n\\n/// Fee & Chain Management\\n\\nstruct AssignFeeConfigToChainParams {\\n    // fee config id\\n    bytes32 id;\\n    // chain id to assign the fee config id to\\n    uint256 chainId;\\n}\\nstruct UnassignFeeConfigFromChainParams {\\n    // fee config id\\n    bytes32 id;\\n    // chain id to unassign the fee config id from\\n    uint256 chainId;\\n}\\nstruct UnassignFeeConfigFromAllChainsParams {\\n    // fee config id\\n    bytes32 id;\\n}\\n\\n/// Syncing\\n\\nstruct FeeSyncQueue {\\n    // fee config id\\n    bytes32 id;\\n    // chain id\\n    uint256 chainId;\\n    // action to execute on the target chain\\n    FeeSyncAction action;\\n}\\n\\nstruct FeeConfigDeployState {\\n    bytes32 id;\\n    FeeDeployState state;\\n}\\n\\n/// Data Transfer Objects\\n\\nstruct FeeConfigSyncDTO {\\n    // fee config id\\n    bytes32 id;\\n    // fee value\\n    uint256 fee;\\n    // address to make conditional charged based on a specific token\\n    // a contract can decide by itself whether to it or not\\n    // if defined and used, this fee should be restricted and charged onto a specific token\\n    address target;\\n    // desired action to execute on the target chain\\n    FeeSyncAction action;\\n}\\nstruct FeeConfigSyncHomeFees {\\n    // fee config id\\n    bytes32 id;\\n    // amount of the collected fees of this if\\n    uint256 amount;\\n}\\nstruct FeeConfigSyncHomeDTO {\\n    // total amount of collected fees\\n    uint256 totalFees;\\n    // address of the bounty receiver on the home chain\\n    address bountyReceiver;\\n    // containing fee information that will moved to the home chain\\n    FeeConfigSyncHomeFees[] fees;\\n}\\n\\nstruct CelerRelayerData {\\n    // bytes32 hash which defined the action that should be taken\\n    bytes32 what;\\n    // address of the contract which what is being executed to\\n    address target;\\n    // encoded message of the desired scope\\n    bytes message;\\n}\\n\\n/// Fee Store\\n\\nstruct FeeStoreConfig {\\n    // fee config id\\n    bytes32 id;\\n    // fee\\n    uint256 fee;\\n    // address of the contract which what is being executed to\\n    address target;\\n    // flag for being markes as deleted\\n    bool deleted;\\n}\\n\\n/// Fee Distributor\\n\\nstruct AddReceiverParams {\\n    // public name for the receiver\\n    // can be \\\"Staking\\\", \\\"Liquidity Backing\\\" or whatever\\n    string name;\\n    // potion of share in points. Points will be summarized in the distribution to calculate the relative share\\n    uint64 points;\\n    // address of the contract/account that receives the share\\n    address account;\\n    // swap path in case a share receiver expects another token then the intermediate token of the bridge\\n    address[] swapPath;\\n}\\n\",\"keccak256\":\"0x4ce7534af69a6112e17237cd7b86f9c679ce510d363025c6a946ddd27a61527d\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/interfaces/IFeeStoreFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.17;\\n\\nimport { FeeStoreConfig, FeeConfigSyncDTO, FeeConfigSyncHomeDTO } from \\\"./../helpers/Structs.sol\\\";\\n\\n/// @title Fee Store Facet Interface\\n/// @author Daniel <danieldegendev@gmail.com>\\ninterface IFeeStoreFacet {\\n    /// Synchronizes fee configs\\n    /// @param _feeConfigSyncDTO array of fee configs to process in the fee store\\n    function syncFees(FeeConfigSyncDTO[] calldata _feeConfigSyncDTO) external payable;\\n\\n    /// Restores fees which are actually intended to be sent to the home chain\\n    /// @param _dto data which is primarily used for sending fees to the home chain\\n    function restoreFeesFromSendFees(FeeConfigSyncHomeDTO memory _dto) external payable;\\n}\\n\",\"keccak256\":\"0x1715a44bf34b9384d32a3890aa463f4bbb005b2c8cdd31c293f785f77ce476e9\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/libraries/LibAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nlibrary LibAccessControlEnumerable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    bytes32 constant ACCESS_CONTROL_STORAGE_POSITION = keccak256(\\\"degenx.access.control.storage\\\");\\n\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct AccessControlStorage {\\n        mapping(bytes32 => RoleData) roles;\\n        mapping(bytes32 => EnumerableSet.AddressSet) roleMembers;\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    function accessControlStorage() internal pure returns (AccessControlStorage storage acs) {\\n        bytes32 position = ACCESS_CONTROL_STORAGE_POSITION;\\n        assembly {\\n            acs.slot := position\\n        }\\n    }\\n\\n    function checkRole(bytes32 role) internal view {\\n        checkRole(role, msg.sender);\\n    }\\n\\n    function checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    function hasRole(bytes32 role, address account) internal view returns (bool) {\\n        AccessControlStorage storage acs = accessControlStorage();\\n        return acs.roles[role].members[account];\\n    }\\n\\n    function grantRole(bytes32 role, address account) internal {\\n        AccessControlStorage storage acs = accessControlStorage();\\n        if (!hasRole(role, account)) {\\n            acs.roles[role].members[account] = true;\\n            emit RoleGranted(role, account, msg.sender);\\n            acs.roleMembers[role].add(account);\\n        }\\n    }\\n\\n    function revokeRole(bytes32 role, address account) internal {\\n        AccessControlStorage storage acs = accessControlStorage();\\n        if (hasRole(role, account)) {\\n            acs.roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, msg.sender);\\n            acs.roleMembers[role].remove(account);\\n        }\\n    }\\n\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        AccessControlStorage storage acs = accessControlStorage();\\n        bytes32 previousAdminRole = acs.roles[role].adminRole;\\n        acs.roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n}\\n\",\"keccak256\":\"0xd72f7b388e9d30e2f0dfeaf2dabf1f85785802488695de9b6db540744c7179f3\",\"license\":\"MIT\"},\"contracts/diamond/libraries/LibFeeStore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.17;\\n\\nimport { IERC20Metadata } from \\\"@solidstate/contracts/token/ERC20/metadata/IERC20Metadata.sol\\\";\\nimport { SafeERC20 } from \\\"@solidstate/contracts/utils/SafeERC20.sol\\\";\\nimport { IERC20 } from \\\"@solidstate/contracts/interfaces/IERC20.sol\\\";\\n\\nimport { LibFeeStoreStorage } from \\\"./LibFeeStoreStorage.sol\\\";\\nimport { ZeroValueNotAllowed, NotAllowed } from \\\"./../helpers/GenericErrors.sol\\\";\\nimport { FeeStoreConfig, FeeConfigSyncHomeDTO, FeeConfigSyncHomeFees } from \\\"./../helpers/Structs.sol\\\";\\n\\n/// @title Fee Store Library\\n/// @author Daniel <danieldegendev@gmail.com>\\n/// @notice Functions to help with the fee store for other instances\\nlibrary LibFeeStore {\\n    using SafeERC20 for IERC20;\\n    uint256 constant DENOMINATOR_RELATIVE = 10 ** 5; // bps denominator\\n    uint256 constant DENOMINATOR_ABSOLUTE = 10 ** 4;\\n\\n    error ZeroFees();\\n    error FeeNotExisting(bytes32 id);\\n    error FeeExists(bytes32 id);\\n\\n    event FeeConfigAdded(bytes32 indexed id);\\n    event FeeConfigUpdated(bytes32 indexed id);\\n    event FeeConfigDeleted(bytes32 indexed id);\\n    event FeeConfigMarkedAsDeleted(bytes32 indexed id);\\n    event FeesPrepared(uint256 amount, FeeConfigSyncHomeDTO candidate);\\n\\n    /// Store a specific amount of fees in the store\\n    /// @param _feeConfigId fee config id\\n    /// @param _amount amount of tokens\\n    function putFees(bytes32 _feeConfigId, uint256 _amount) internal {\\n        if (_amount == 0) revert ZeroValueNotAllowed();\\n        LibFeeStoreStorage.FeeStoreStorage storage s = LibFeeStoreStorage.feeStoreStorage();\\n        FeeStoreConfig memory _config = s.feeConfigs[_feeConfigId];\\n        if (_config.id == bytes32(\\\"\\\")) revert NotAllowed();\\n        s.collectedFees[_config.id] += _amount;\\n        s.collectedFeesTotal += _amount;\\n    }\\n\\n    /// Prepares the fees collected on the store to be send to the home chain\\n    /// @return _dto the dto that will be used on the home chain for receiving and process fees\\n    /// @dev this method will also clean up every fee collected and sets it to 0\\n    function prepareToSendFees() internal returns (FeeConfigSyncHomeDTO memory _dto) {\\n        LibFeeStoreStorage.FeeStoreStorage storage s = LibFeeStoreStorage.feeStoreStorage();\\n        if (s.collectedFeesTotal == 0) revert ZeroFees();\\n\\n        uint256 _feeIndex = 0;\\n        uint256 _noOfExpectedFees = 0;\\n\\n        // get how many fees need to get sent\\n        for (uint256 i = 0; i < s.feeConfigIds.length; ) {\\n            if (s.collectedFees[s.feeConfigIds[i]] > 0) _noOfExpectedFees++;\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        // collect amounts and gathers configs\\n        _dto.fees = new FeeConfigSyncHomeFees[](_noOfExpectedFees);\\n        for (uint256 i = 0; i < s.feeConfigIds.length; ) {\\n            bytes32 _id = s.feeConfigIds[i];\\n            if (s.collectedFees[_id] > 0) {\\n                uint256 _amount = s.collectedFees[_id];\\n                s.collectedFees[_id] = 0;\\n                if (s.feeConfigs[_id].deleted) deleteFee(_id);\\n                _dto.totalFees += _amount;\\n                _dto.fees[_feeIndex] = FeeConfigSyncHomeFees({ id: _id, amount: _amount });\\n                unchecked {\\n                    _feeIndex++;\\n                }\\n            }\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        s.collectedFeesTotal = 0;\\n        emit FeesPrepared(_dto.totalFees, _dto);\\n    }\\n\\n    /// Removes a fee from the store\\n    /// @param _id fee id\\n    /// @dev if a fee is still in use, it will be marked as deleted. Once fees get moved to home chain, it will be deleted properly\\n    function deleteFee(bytes32 _id) internal {\\n        LibFeeStoreStorage.FeeStoreStorage storage s = LibFeeStoreStorage.feeStoreStorage();\\n        if (s.feeConfigs[_id].id == bytes32(0)) revert FeeNotExisting(_id);\\n        if (s.collectedFees[_id] > 0) {\\n            s.feeConfigs[_id].deleted = true;\\n            emit FeeConfigMarkedAsDeleted(_id);\\n        } else {\\n            delete s.collectedFees[_id];\\n            delete s.feeConfigs[_id];\\n            for (uint256 i = 0; i < s.feeConfigIds.length; ) {\\n                if (s.feeConfigIds[i] == _id) {\\n                    s.feeConfigIds[i] = s.feeConfigIds[s.feeConfigIds.length - 1];\\n                    break;\\n                }\\n                unchecked {\\n                    i++;\\n                }\\n            }\\n            s.feeConfigIds.pop();\\n            emit FeeConfigDeleted(_id);\\n        }\\n    }\\n\\n    /// Adds a fee to the store\\n    /// @param _id fee id\\n    /// @param _fee fee value\\n    /// @param _target the target address\\n    function addFee(bytes32 _id, uint256 _fee, address _target) internal {\\n        LibFeeStoreStorage.FeeStoreStorage storage s = LibFeeStoreStorage.feeStoreStorage();\\n        if (s.feeConfigs[_id].id != bytes32(0)) revert FeeExists(_id);\\n        s.feeConfigs[_id] = FeeStoreConfig({ id: _id, fee: _fee, target: _target, deleted: false });\\n        s.feeConfigIds.push(_id);\\n        emit FeeConfigAdded(_id);\\n    }\\n\\n    /// Updates a fee on the store\\n    /// @param _id fee id\\n    /// @param _fee fee value\\n    /// @param _target the target address\\n    function updateFee(bytes32 _id, uint256 _fee, address _target) internal {\\n        LibFeeStoreStorage.FeeStoreStorage storage s = LibFeeStoreStorage.feeStoreStorage();\\n        if (s.feeConfigs[_id].id == bytes32(0)) revert FeeNotExisting(_id);\\n        s.feeConfigs[_id] = FeeStoreConfig({ id: _id, fee: _fee, target: _target, deleted: false });\\n        emit FeeConfigUpdated(_id);\\n    }\\n\\n    /// viewables\\n\\n    /// Calculates the relative fee based on the inserted amount\\n    /// @param _feeConfigId fee config id\\n    /// @param _asset address of the token\\n    /// @param _amount amount that fees are based on\\n    /// @return _amountNet amount excluding fee\\n    /// @return _fee amount of fee\\n    /// @return _feePoints fee value that is applied\\n    function calcFeesRelative(\\n        bytes32 _feeConfigId,\\n        address _asset,\\n        uint256 _amount\\n    ) internal view returns (uint256 _amountNet, uint256 _fee, uint256 _feePoints) {\\n        return calcFees(_feeConfigId, _asset, _amount, false);\\n    }\\n\\n    /// Calculates the absolute fee based on the inserted amount\\n    /// @param _feeConfigId fee config id\\n    /// @param _asset address of the token\\n    /// @param _amount amount that fees are based on\\n    /// @return _amountNet amount excluding fee\\n    /// @return _fee amount of fee\\n    /// @return _feePoints fee value that is applied\\n    function calcFeesAbsolute(\\n        bytes32 _feeConfigId,\\n        address _asset,\\n        uint256 _amount\\n    ) internal view returns (uint256 _amountNet, uint256 _fee, uint256 _feePoints) {\\n        return calcFees(_feeConfigId, _asset, _amount, true);\\n    }\\n\\n    /// Calculates the relative or absolute fees based on the inserted amount\\n    /// @param _feeConfigId fee config id\\n    /// @param _asset address of the token\\n    /// @param _amount amount that fees are based on\\n    /// @param _absolute whether a calculation is relative or absolute\\n    /// @return _amountNet amount excluding fee\\n    /// @return _fee amount of fee\\n    /// @return _feePoints fee value that is applied\\n    function calcFees(\\n        bytes32 _feeConfigId,\\n        address _asset,\\n        uint256 _amount,\\n        bool _absolute\\n    ) internal view returns (uint256 _amountNet, uint256 _fee, uint256 _feePoints) {\\n        if (_amount == 0) revert ZeroValueNotAllowed();\\n        LibFeeStoreStorage.FeeStoreStorage storage s = LibFeeStoreStorage.feeStoreStorage();\\n        FeeStoreConfig memory _config = s.feeConfigs[_feeConfigId];\\n        if (_config.id == bytes32(\\\"\\\")) return (_amount, 0, 0);\\n        _feePoints = _config.fee;\\n        _fee = _absolute\\n            ? ((_feePoints * (10 ** IERC20Metadata(_asset).decimals())) / DENOMINATOR_ABSOLUTE)\\n            : ((_amount * _feePoints) / DENOMINATOR_RELATIVE);\\n        _amountNet = _amount - _fee;\\n    }\\n\\n    function getOperator() internal view returns (address _operator) {\\n        LibFeeStoreStorage.FeeStoreStorage storage s = LibFeeStoreStorage.feeStoreStorage();\\n        _operator = s.operator;\\n    }\\n\\n    function setOperator(address _operator) internal {\\n        LibFeeStoreStorage.FeeStoreStorage storage s = LibFeeStoreStorage.feeStoreStorage();\\n        s.operator = _operator;\\n    }\\n\\n    function getIntermediateAsset() internal view returns (address _intermediateAsset) {\\n        LibFeeStoreStorage.FeeStoreStorage storage s = LibFeeStoreStorage.feeStoreStorage();\\n        _intermediateAsset = s.intermediateAsset;\\n    }\\n\\n    function setIntermediateAsset(address _intermediateAsset) internal {\\n        LibFeeStoreStorage.FeeStoreStorage storage s = LibFeeStoreStorage.feeStoreStorage();\\n        s.intermediateAsset = _intermediateAsset;\\n    }\\n}\\n\",\"keccak256\":\"0x1a5ac9ab50f2ec2407ce8fddbb0546f0c89781dcd90caa90095921ed4d6d761e\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/libraries/LibFeeStoreStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.19;\\n\\nimport { FeeStoreConfig } from \\\"./../helpers/Structs.sol\\\";\\n\\nlibrary LibFeeStoreStorage {\\n    bytes32 constant FEE_STORE_STORAGE_POSITION = keccak256(\\\"degenx.fee-store.storage.v1\\\");\\n\\n    struct FeeStoreStorage {\\n        // feeConfigId => FeeStoreConfig\\n        mapping(bytes32 => FeeStoreConfig) feeConfigs;\\n        // feeConfigId => amount of fees collected\\n        mapping(bytes32 => uint256) collectedFees;\\n        // represents a sum of each amount in collectedFees\\n        uint256 collectedFeesTotal;\\n        bytes32[] feeConfigIds;\\n        address operator;\\n        address intermediateAsset;\\n    }\\n\\n    function feeStoreStorage() internal pure returns (FeeStoreStorage storage fss) {\\n        bytes32 position = FEE_STORE_STORAGE_POSITION;\\n        assembly {\\n            fss.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x397c3b0f45509218df7e843804c84408b399b33bdc7cd29e30e2366f3c1d5a5d\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061258a806100206000396000f3fe6080604052600436106100d25760003560e01c80636b8e9f8d1161007f578063b3ab15fb11610059578063b3ab15fb14610333578063be65e43314610353578063e7f43c6814610387578063f174bdaf1461039c57600080fd5b80636b8e9f8d146102c6578063a1707e0a146102e6578063a2ffce2d1461032057600080fd5b80634c358768116100b05780634c358768146101715780634e5c3c8b146102865780636632b58b146102a657600080fd5b80630c846a95146100d75780631b9e4bbb1461010257806331949c7514610117575b600080fd5b3480156100e357600080fd5b506100ec6103b1565b6040516100f99190611ce3565b60405180910390f35b610115610110366004611e10565b61042c565b005b34801561012357600080fd5b50610163610132366004611f27565b60009081527f1ef17e9a165a4e1a08bf7c7a70090c7711ef4b97027937554becb896058c668a602052604090205490565b6040519081526020016100f9565b34801561017d57600080fd5b5061023b61018c366004611f27565b60408051608080820183526000808352602080840182905283850182905260609384018290529481527f1ef17e9a165a4e1a08bf7c7a70090c7711ef4b97027937554becb896058c66898552839020835191820184528054825260018101549482019490945260029093015473ffffffffffffffffffffffffffffffffffffffff8116928401929092527401000000000000000000000000000000000000000090910460ff1615159082015290565b6040516100f99190815181526020808301519082015260408083015173ffffffffffffffffffffffffffffffffffffffff169082015260609182015115159181019190915260800190565b34801561029257600080fd5b506101156102a1366004611f40565b6107fe565b3480156102b257600080fd5b506101156102c1366004611f73565b610958565b3480156102d257600080fd5b506101156102e1366004611f8e565b610a36565b3480156102f257600080fd5b506102fb610ba0565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100f9565b61011561032e366004611fb0565b610be5565b34801561033f57600080fd5b5061011561034e366004611f73565b610dda565b34801561035f57600080fd5b507f1ef17e9a165a4e1a08bf7c7a70090c7711ef4b97027937554becb896058c668b54610163565b34801561039357600080fd5b506102fb610eb1565b3480156103a857600080fd5b50610115610ef1565b606060007f1ef17e9a165a4e1a08bf7c7a70090c7711ef4b97027937554becb896058c66896003810180546040805160208084028201810190925282815293945083018282801561042157602002820191906000526020600020905b81548152602001906001019080831161040d575b505050505091505090565b6104557f63eb04268b235ac1afacf3bcf4b19c5c175d0417a1555fb3ff79ae190f71ee7c611060565b60007f1ef17e9a165a4e1a08bf7c7a70090c7711ef4b97027937554becb896058c6689600581015483516040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481019190915291925073ffffffffffffffffffffffffffffffffffffffff16906323b872dd906064016020604051808303816000875af1925050508015610535575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261053291810190612025565b60015b6105a957610541612047565b806308c379a00361059d5750610555612063565b80610560575061059f565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610594919061212f565b60405180910390fd5b505b3d6000803e3d6000fd5b80156107c65760005b836040015151811015610789576000801916836000016000866040015184815181106105e0576105e0612180565b602002602001015160000151815260200190815260200160002060000154036106d957600583015460048401546040860151805173ffffffffffffffffffffffffffffffffffffffff9384169363a9059cbb931691908590811061064657610646612180565b6020026020010151602001516040518363ffffffff1660e01b815260040161069092919073ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b6020604051808303816000875af11580156106af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d39190612025565b50610781565b836040015181815181106106ef576106ef612180565b60200260200101516020015183600201600082825461070e91906121de565b9091555050604084015180518290811061072a5761072a612180565b6020026020010151602001518360010160008660400151848151811061075257610752612180565b6020026020010151600001518152602001908152602001600020600082825461077b91906121de565b90915550505b6001016105b2565b507f29dfe2e366c991317cd0b30b8789da7ea23828016722b25939e8a566a392b3da836040516107b99190612272565b60405180910390a16107f8565b6040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b5050565b6108277ffc425f2263d0df187444b70e47283d622c70181c5baebb1306a01edba1ce184c611060565b7f681f515a15f67ebc09d8182d1993d56e18e1ce0c3a136e91667cc1a97c17a3ec80547f1ef17e9a165a4e1a08bf7c7a70090c7711ef4b97027937554becb896058c6689919060ff16156108a7576040517f0dc149f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60048201805473ffffffffffffffffffffffffffffffffffffffff8087167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179092556005840180549286169290911691909117905580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011781556040517f5daa87a0e9463431830481fd4b6e3403442dfb9a12b9c07597e9f61d50b633c890600090a150505050565b6109817ffc425f2263d0df187444b70e47283d622c70181c5baebb1306a01edba1ce184c611060565b61098a8161106d565b7f1ef17e9a165a4e1a08bf7c7a70090c7711ef4b97027937554becb896058c668e80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831617905560405173ffffffffffffffffffffffffffffffffffffffff821681527f8b51240ea03722814a2dceffa1132bb98e62fa16b0ee86c625d8a1100fdcbfac906020015b60405180910390a150565b610a5f7f63eb04268b235ac1afacf3bcf4b19c5c175d0417a1555fb3ff79ae190f71ee7c611060565b6000610a9f7f1ef17e9a165a4e1a08bf7c7a70090c7711ef4b97027937554becb896058c668e5473ffffffffffffffffffffffffffffffffffffffff1690565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810184905290915073ffffffffffffffffffffffffffffffffffffffff8216906323b872dd906064016020604051808303816000875af1158015610b1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3f9190612025565b50610b4a83836110ba565b828173ffffffffffffffffffffffffffffffffffffffff167fcb915c9d2892389798ca768ff1b944b065d4f1c7f2f1c162f8e3916d122ba67884604051610b9391815260200190565b60405180910390a3505050565b6000610be07f1ef17e9a165a4e1a08bf7c7a70090c7711ef4b97027937554becb896058c668e5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b610c0e7f63eb04268b235ac1afacf3bcf4b19c5c175d0417a1555fb3ff79ae190f71ee7c611060565b6000819003610c49576040517f731eab5700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b81811015610d9c576000838383818110610c6857610c68612180565b905060800201803603810190610c7e9190612294565b8051909150610cbf5780516040517f42a247cb0000000000000000000000000000000000000000000000000000000081526004810191909152602401610594565b8060200151600003610d035780516040517f42a247cb0000000000000000000000000000000000000000000000000000000081526004810191909152602401610594565b600181606001516003811115610d1b57610d1b612305565b03610d3757610d37816000015182602001518360400151611209565b600281606001516003811115610d4f57610d4f612305565b03610d6b57610d6b816000015182602001518360400151611214565b600381606001516003811115610d8357610d83612305565b03610d93578051610d939061121f565b50600101610c4c565b507f825f1d9f5772528e17613b9b989c7961de168dd2cc4936c45200f1102b7c31fa8282604051610dce929190612334565b60405180910390a15050565b610e037ffc425f2263d0df187444b70e47283d622c70181c5baebb1306a01edba1ce184c611060565b610e0c8161106d565b7f1ef17e9a165a4e1a08bf7c7a70090c7711ef4b97027937554becb896058c668d80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831617905560405173ffffffffffffffffffffffffffffffffffffffff821681527f051e36863db1d545ccb30064694ef54b0ce33bba715f074ec080c513f4cb40e390602001610a2b565b6000610be07f1ef17e9a165a4e1a08bf7c7a70090c7711ef4b97027937554becb896058c668d5473ffffffffffffffffffffffffffffffffffffffff1690565b610f1a7f63eb04268b235ac1afacf3bcf4b19c5c175d0417a1555fb3ff79ae190f71ee7c611060565b7f1ef17e9a165a4e1a08bf7c7a70090c7711ef4b97027937554becb896058c668d547f1ef17e9a165a4e1a08bf7c7a70090c7711ef4b97027937554becb896058c668990610f7d9073ffffffffffffffffffffffffffffffffffffffff1661106d565b6000610f87611228565b600583015460048085015483516040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff92831693810193909352602483015292935091169063a9059cbb906044016020604051808303816000875af115801561100c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110309190612025565b507fe5e93ee46fa6c5208869803aa92e360f9296fabb95798d126ce427ae391a078c81604051610dce9190612272565b61106a81336114cb565b50565b73ffffffffffffffffffffffffffffffffffffffff811661106a576040517f9fabe1c100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806000036110f4576040517f9cf8540c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007f1ef17e9a165a4e1a08bf7c7a70090c7711ef4b97027937554becb896058c6689600084815260208281526040918290208251608081018452815480825260018301549382019390935260029091015473ffffffffffffffffffffffffffffffffffffffff8116938201939093527401000000000000000000000000000000000000000090920460ff1615156060830152919250906111c1576040517f3d693ada00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80516000908152600183016020526040812080548592906111e39084906121de565b92505081905550828260020160008282546111fe91906121de565b909155505050505050565b6107f883838361155c565b6107f88383836116b2565b61106a816117f0565b6040805160608082018352600080835260208301819052928201527f1ef17e9a165a4e1a08bf7c7a70090c7711ef4b97027937554becb896058c668b5490917f1ef17e9a165a4e1a08bf7c7a70090c7711ef4b97027937554becb896058c66899190036112c1576040517f4716db3500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060005b60038401548110156113265760008460010160008660030184815481106112f0576112f0612180565b9060005260206000200154815260200190815260200160002054111561131e578161131a816123ec565b9250505b6001016112c7565b508067ffffffffffffffff81111561134057611340611d27565b60405190808252806020026020018201604052801561138557816020015b604080518082019091526000808252602082015281526020019060019003908161135e5790505b50604085015260005b60038401548110156114835760008460030182815481106113b1576113b1612180565b90600052602060002001549050600085600101600083815260200190815260200160002054111561147a5760008181526001860160209081526040808320805490849055918890529091206002015474010000000000000000000000000000000000000000900460ff161561142957611429826117f0565b808760000181815161143b91906121de565b905250604080518082018252838152602081018390529088015180518790811061146757611467612180565b6020908102919091010152506001909301925b5060010161138e565b506000600284015583516040517fb2850f52591cabccaf2c842c91203cdb1fb29d1dcc7d565d5ec824772f224ef5916114bd918790612424565b60405180910390a150505090565b6114d58282611a21565b6107fa576114e281611a7a565b6114ed836020611a99565b6040516020016114fe929190612445565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a00000000000000000000000000000000000000000000000000000000082526105949160040161212f565b60008381527f1ef17e9a165a4e1a08bf7c7a70090c7711ef4b97027937554becb896058c66896020819052604090912054156115c7576040517f47c3be5500000000000000000000000000000000000000000000000000000000815260048101859052602401610594565b60408051608081018252858152602080820186815273ffffffffffffffffffffffffffffffffffffffff8087168486019081526000606086018181528b82528886528782209651875593516001878101919091559151600290960180549451151574010000000000000000000000000000000000000000027fffffffffffffffffffffff00000000000000000000000000000000000000000090951696909316959095179290921790556003850180549182018155835290822001869055905185917fcce64844e834105fa7188f503f5aea49621f9c86177a901aac2eb00817ce46b391a250505050565b60008381527f1ef17e9a165a4e1a08bf7c7a70090c7711ef4b97027937554becb896058c6689602081905260409091205461171c576040517f967a306300000000000000000000000000000000000000000000000000000000815260048101859052602401610594565b60408051608081018252858152602080820186815273ffffffffffffffffffffffffffffffffffffffff8087168486019081526000606086018181528b825294889052868120955186559251600186015551600290940180549351151574010000000000000000000000000000000000000000027fffffffffffffffffffffff000000000000000000000000000000000000000000909416949091169390931791909117909155905185917f5b5b9268a550a895ae7f6f61cf6f62381831a9062d4f095b429dd9a143a4d31e91a250505050565b60008181527f1ef17e9a165a4e1a08bf7c7a70090c7711ef4b97027937554becb896058c6689602081905260409091205461185a576040517f967a306300000000000000000000000000000000000000000000000000000000815260048101839052602401610594565b6000828152600182016020526040902054156118e95760008281526020829052604080822060020180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790555183917fbd3861da79e4ee6609c96a5104039bd715225aa8ac69760ca3320d5d115d3d0891a25050565b600082815260018083016020908152604080842084905590849052822082815590810182905560020180547fffffffffffffffffffffff0000000000000000000000000000000000000000001690555b60038201548110156119c6578282600301828154811061195b5761195b612180565b9060005260206000200154036119be5760038201805461197d906001906124c6565b8154811061198d5761198d612180565b90600052602060002001548260030182815481106119ad576119ad612180565b6000918252602090912001556119c6565b600101611939565b50806003018054806119da576119da6124d9565b60019003818190600052602060002001600090559055817f9a58bb2e15d0792adb797ae6cd2b8be9f03d3a5410b824cd14bc44c67630c44660405160405180910390a25050565b60008281527ff72ca309d9a3d085eca8abc0d0f1efd7a9682e454e7a123eb852dac23bbd2afa6020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff165b92915050565b6060611a7473ffffffffffffffffffffffffffffffffffffffff831660145b60606000611aa8836002612508565b611ab39060026121de565b67ffffffffffffffff811115611acb57611acb611d27565b6040519080825280601f01601f191660200182016040528015611af5576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611b2c57611b2c612180565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611b8f57611b8f612180565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000611bcb846002612508565b611bd69060016121de565b90505b6001811115611c73577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611c1757611c17612180565b1a60f81b828281518110611c2d57611c2d612180565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93611c6c8161251f565b9050611bd9565b508315611cdc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610594565b9392505050565b6020808252825182820181905260009190848201906040850190845b81811015611d1b57835183529284019291840191600101611cff565b50909695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6060810181811067ffffffffffffffff82111715611d7657611d76611d27565b60405250565b6040810181811067ffffffffffffffff82111715611d7657611d76611d27565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f830116810181811067ffffffffffffffff82111715611de057611de0611d27565b6040525050565b803573ffffffffffffffffffffffffffffffffffffffff81168114611e0b57600080fd5b919050565b60006020808385031215611e2357600080fd5b823567ffffffffffffffff80821115611e3b57600080fd5b9084019060608287031215611e4f57600080fd5b60408051611e5c81611d56565b83358152611e6b858501611de7565b858201528184013583811115611e8057600080fd5b80850194505087601f850112611e9557600080fd5b833583811115611ea757611ea7611d27565b82519350611eba868260051b0185611d9c565b80845260061b8401850185840189821115611ed457600080fd5b948601945b81861015611f155783868b031215611ef15760008081fd5b8351611efc81611d7c565b8635815287870135888201528152948301948601611ed9565b50509081019190915295945050505050565b600060208284031215611f3957600080fd5b5035919050565b60008060408385031215611f5357600080fd5b611f5c83611de7565b9150611f6a60208401611de7565b90509250929050565b600060208284031215611f8557600080fd5b611cdc82611de7565b60008060408385031215611fa157600080fd5b50508035926020909101359150565b60008060208385031215611fc357600080fd5b823567ffffffffffffffff80821115611fdb57600080fd5b818501915085601f830112611fef57600080fd5b813581811115611ffe57600080fd5b8660208260071b850101111561201357600080fd5b60209290920196919550909350505050565b60006020828403121561203757600080fd5b81518015158114611cdc57600080fd5b600060033d11156120605760046000803e5060005160e01c5b90565b600060443d10156120715790565b6040517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc803d016004833e81513d67ffffffffffffffff81602484011181841117156120bf57505050505090565b82850191508151818111156120d75750505050505090565b843d87010160208285010111156120f15750505050505090565b61210060208286010187611d9c565b509095945050505050565b60005b8381101561212657818101518382015260200161210e565b50506000910152565b602081526000825180602084015261214e81604085016020870161210b565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820180821115611a7457611a746121af565b60006060830182518452602073ffffffffffffffffffffffffffffffffffffffff8185015116818601526040808501516060828801528381518086526080890191508483019550600092505b80831015612266578551805183528501518583015294840194600192909201919083019061223d565b50979650505050505050565b602081526000611cdc60208301846121f1565b803560048110611e0b57600080fd5b6000608082840312156122a657600080fd5b6040516080810181811067ffffffffffffffff821117156122c9576122c9611d27565b806040525082358152602083013560208201526122e860408401611de7565b60408201526122f960608401612285565b60608201529392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b602080825281810183905260009060408084018684805b888110156123de5782358452858301358685015273ffffffffffffffffffffffffffffffffffffffff61237f868501611de7565b16858501526060612391818501612285565b60048082106123c6577f4e487b7100000000000000000000000000000000000000000000000000000000855260218152602485fd5b5090850152608093840193929092019160010161234b565b509198975050505050505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361241d5761241d6121af565b5060010190565b82815260406020820152600061243d60408301846121f1565b949350505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161247d81601785016020880161210b565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516124ba81602884016020880161210b565b01602801949350505050565b81810381811115611a7457611a746121af565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b8082028115828204841417611a7457611a746121af565b60008161252e5761252e6121af565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fea26469706673582212202f8bcb6aa3fe2861dc8e3240f9cb5db885ffc6c6aca33c2d1af57b14617561d064736f6c63430008130033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Daniel <danieldegendev@gmail.com>",
    "custom:version": "1.0.0",
    "kind": "dev",
    "methods": {
      "feeStoreDepositFeeAmount(bytes32,uint256)": {
        "details": "can only be executed from the fee store manager role",
        "params": {
          "_amount": "amount to deposit",
          "_feeConfigId": "fee config id"
        }
      },
      "getCollectedFeesByConfigId(bytes32)": {
        "params": {
          "_id": "fee config id"
        },
        "returns": {
          "_collectedFees": "amount of fees collected"
        }
      },
      "getCollectedFeesTotal()": {
        "details": "this is a cumulative number of all fees collected on this store until it get's send to the home chain",
        "returns": {
          "_collectedFeesTotal": "amount of total fees collected"
        }
      },
      "getFeeConfigIds()": {
        "returns": {
          "_feeConfigIds": "array of fee ids"
        }
      },
      "getFeeStoreConfig(bytes32)": {
        "params": {
          "_id": "fee config id"
        },
        "returns": {
          "_feeStoreConfig": "FeeStoreConfig, see {contracts/diamond/helpers/Structs.sol#FeeStoreConfig}"
        }
      },
      "getIntermediateAsset()": {
        "returns": {
          "_intermediateAsset": "address of the intermadiate asset"
        }
      },
      "getOperator()": {
        "returns": {
          "_operator": "address of the operator"
        }
      },
      "initFeeStoreFacet(address,address)": {
        "params": {
          "_operator": "address of account that is receiving fees if this contracts automations are failing"
        }
      },
      "restoreFeesFromSendFees((uint256,address,(bytes32,uint256)[]))": {
        "details": "this function restores the fees based on refunds from bridge providers, in case someone starts try to sync fees home and it's failing on the bridge sideif the fee config is not configured anymore, the funds that are getting restored, will be send to the operator",
        "params": {
          "_dto": "data which is primarily used for sending fees to the home chain"
        }
      },
      "setIntermediateAsset(address)": {
        "details": "_intermediateAsset can't be a zero address",
        "params": {
          "_intermediateAsset": "address of the asset"
        }
      },
      "setOperator(address)": {
        "details": "_operator can't be a zero address",
        "params": {
          "_operator": "address of the operator"
        }
      },
      "syncFees((bytes32,uint256,address,uint8)[])": {
        "details": "it will check wheter an array is sufficient and add, updates or removes fee configs based on the fee sync action create by the fee manager",
        "params": {
          "_feeConfigSyncDTO": "array of fee configs to process in the fee store"
        }
      }
    },
    "title": "Fee Store Facet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "collectFeesFromFeeStore()": {
        "notice": "Sends the current collected fees to the Manager in case no bridge provider is working and the job needs to be done manually"
      },
      "feeStoreDepositFeeAmount(bytes32,uint256)": {
        "notice": "Deposit a fee manually"
      },
      "getCollectedFeesByConfigId(bytes32)": {
        "notice": "Gets the collected fees for a specific fee id"
      },
      "getCollectedFeesTotal()": {
        "notice": "Gets the current collected total fees on this store"
      },
      "getFeeConfigIds()": {
        "notice": "Gets all fee config ids defined on this fee store"
      },
      "getFeeStoreConfig(bytes32)": {
        "notice": "Gets a fee store config based on the fee id"
      },
      "getIntermediateAsset()": {
        "notice": "Gets the current intermediate asset"
      },
      "getOperator()": {
        "notice": "Gets the current operator"
      },
      "initFeeStoreFacet(address,address)": {
        "notice": "Initializes the facet"
      },
      "restoreFeesFromSendFees((uint256,address,(bytes32,uint256)[]))": {
        "notice": "Restores fees which are actually intended to be sent to the home chain"
      },
      "setIntermediateAsset(address)": {
        "notice": "Sets the intermediate asset"
      },
      "setOperator(address)": {
        "notice": "Sets a new operator"
      },
      "syncFees((bytes32,uint256,address,uint8)[])": {
        "notice": "Synchronizes fee configs"
      }
    },
    "notice": "every contract needs to take care of the fees they collect. ITS JUST STORAGE HERE",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}