{
  "address": "0x58BE7d743b6Fb4C4b0dFF0D0F934B464035fA503",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "candidate",
          "type": "address"
        }
      ],
      "name": "AddressNoContract",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "candidate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        }
      ],
      "name": "BridgeSupplyExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ECDSA__InvalidS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ECDSA__InvalidSignature",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ECDSA__InvalidV",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC20Base__ApproveFromZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC20Base__ApproveToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC20Base__BurnExceedsBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC20Base__BurnFromZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC20Base__InsufficientAllowance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC20Base__MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC20Base__TransferExceedsBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC20Base__TransferFromZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC20Base__TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC20Extended__ExcessiveAllowance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC20Extended__InsufficientAllowance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC20Permit__ExpiredDeadline",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC20Permit__InvalidSignature",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "FeeIdAlreadySet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FeeIdMissing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "FeeIdNotSet",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "InvalidFeeId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoBurnPossible",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Pausable__NotPaused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Pausable__Paused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroValueNotAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "lp",
          "type": "address"
        }
      ],
      "name": "AddLP",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "bridge",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cap",
          "type": "uint256"
        }
      ],
      "name": "BridgeSupplyCapUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "ExcludeAccountFromTax",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "buyFee",
          "type": "bool"
        }
      ],
      "name": "FeeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "buyFee",
          "type": "bool"
        }
      ],
      "name": "FeeRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "IncludeAccountToTax",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "lp",
          "type": "address"
        }
      ],
      "name": "RemoveLP",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "domainSeparator",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        }
      ],
      "name": "addBuyFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lp",
          "type": "address"
        }
      ],
      "name": "addLP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        }
      ],
      "name": "addSellFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bridge",
          "type": "address"
        }
      ],
      "name": "bridges",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "cap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "total",
              "type": "uint256"
            }
          ],
          "internalType": "struct ERC20Facet.BridgeSupply",
          "name": "_supply",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "excludeAccountFromTax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBuyFees",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "_fees",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSellFees",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "_fees",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lp",
          "type": "address"
        }
      ],
      "name": "hasLP",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_has",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "includeAccountForTax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "__name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "__symbol",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "__decimals",
          "type": "uint8"
        }
      ],
      "name": "initERC20Facet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        }
      ],
      "name": "isBuyFee",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_itis",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "isExcluded",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_isExcluded",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        }
      ],
      "name": "isSellFee",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_itis",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        }
      ],
      "name": "removeBuyFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lp",
          "type": "address"
        }
      ],
      "name": "removeLP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        }
      ],
      "name": "removeSellFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bridge",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_cap",
          "type": "uint256"
        }
      ],
      "name": "updateBridgeSupplyCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x408f000315241fd0e2db471f89825b737df0ec1afe7b9fdc15c1f83ef8b8f8b0",
  "receipt": {
    "to": null,
    "from": "0x0000000022D4802541320DB7F22693405Db19422",
    "contractAddress": "0x58BE7d743b6Fb4C4b0dFF0D0F934B464035fA503",
    "transactionIndex": 17,
    "gasUsed": "2969885",
    "logsBloom": "0x
    "blockHash": "0xaf422e538885611c5220bab3ca5eb0d5cab1621883686f3e097545f299396bd5",
    "transactionHash": "0x408f000315241fd0e2db471f89825b737df0ec1afe7b9fdc15c1f83ef8b8f8b0",
    "logs": [],
    "blockNumber": 20503882,
    "cumulativeGasUsed": "5260843",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 6,
  "solcInputHash": "936a1631bc8aae0663df3f3a20d0ad8a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"AddressNoContract\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"candidate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"BridgeSupplyExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ECDSA__InvalidS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ECDSA__InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ECDSA__InvalidV\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20Base__ApproveFromZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20Base__ApproveToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20Base__BurnExceedsBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20Base__BurnFromZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20Base__InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20Base__MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20Base__TransferExceedsBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20Base__TransferFromZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20Base__TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20Extended__ExcessiveAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20Extended__InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20Permit__ExpiredDeadline\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20Permit__InvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"FeeIdAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeIdMissing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"FeeIdNotSet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"InvalidFeeId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoBurnPossible\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Pausable__NotPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Pausable__Paused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroValueNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"}],\"name\":\"AddLP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"BridgeSupplyCapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ExcludeAccountFromTax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"buyFee\",\"type\":\"bool\"}],\"name\":\"FeeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"buyFee\",\"type\":\"bool\"}],\"name\":\"FeeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"IncludeAccountToTax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"}],\"name\":\"RemoveLP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"domainSeparator\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"addBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lp\",\"type\":\"address\"}],\"name\":\"addLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"addSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"bridges\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC20Facet.BridgeSupply\",\"name\":\"_supply\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"excludeAccountFromTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyFees\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_fees\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellFees\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_fees\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lp\",\"type\":\"address\"}],\"name\":\"hasLP\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_has\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"includeAccountForTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"__name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"__symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"__decimals\",\"type\":\"uint8\"}],\"name\":\"initERC20Facet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"isBuyFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_itis\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isExcluded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"isSellFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_itis\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"removeBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lp\",\"type\":\"address\"}],\"name\":\"removeLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"removeSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"}],\"name\":\"updateBridgeSupplyCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Daniel <danieldegendev@gmail.com>\",\"custom:version\":\"1.1.0\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"returns\":{\"domainSeparator\":\"domain separator\"}},\"addBuyFee(bytes32)\":{\"params\":{\"_id\":\"fee id\"}},\"addLP(address)\":{\"params\":{\"_lp\":\"address of the liquidity pool of the token\"}},\"addSellFee(bytes32)\":{\"params\":{\"_id\":\"fee id\"}},\"allowance(address,address)\":{\"params\":{\"holder\":\"approver of allowance\",\"spender\":\"recipient of allowance\"},\"returns\":{\"_0\":\"token allowance\"}},\"approve(address,uint256)\":{\"details\":\"prefer ERC20Extended functions to avoid transaction-ordering vulnerability (see https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729)\",\"params\":{\"amount\":\"quantity of tokens approved for spending\",\"spender\":\"recipient of allowance\"},\"returns\":{\"_0\":\"success status (always true; otherwise function should revert)\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"token balance\"}},\"bridges(address)\":{\"params\":{\"_bridge\":\"address of the bridge\"},\"returns\":{\"_supply\":\"bridge supply\"}},\"burn(address,uint256)\":{\"params\":{\"_amount\":\"burnable amount\",\"_from\":\"holder address to burn the tokens from\"},\"returns\":{\"_success\":\"Returns true is operation succeeds\"}},\"burn(uint256)\":{\"params\":{\"_amount\":\"burnable amount\"},\"returns\":{\"_success\":\"Returns true is operation succeeds\"}},\"burnFrom(address,uint256)\":{\"params\":{\"_amount\":\"burnable amount\",\"_from\":\"holder address to burn the tokens from\"},\"returns\":{\"_success\":\"Returns true is operation succeeds\"}},\"decimals()\":{\"returns\":{\"_0\":\"token decimals\"}},\"decreaseAllowance(address,uint256)\":{\"params\":{\"amount\":\"quantity by which to decrease allowance\",\"spender\":\"address whose allowance to decrease\"},\"returns\":{\"_0\":\"success status (always true; otherwise function will revert)\"}},\"excludeAccountFromTax(address)\":{\"params\":{\"_account\":\"address to exclude\"}},\"getBuyFees()\":{\"returns\":{\"_fees\":\"array of fee ids\"}},\"getOwner()\":{\"returns\":{\"_owner\":\"owner address\"}},\"getSellFees()\":{\"returns\":{\"_fees\":\"array of fee ids\"}},\"hasLP(address)\":{\"returns\":{\"_has\":\"has lp or not\"}},\"includeAccountForTax(address)\":{\"params\":{\"_account\":\"address to include\"}},\"increaseAllowance(address,uint256)\":{\"params\":{\"amount\":\"quantity by which to increase allowance\",\"spender\":\"address whose allowance to increase\"},\"returns\":{\"_0\":\"success status (always true; otherwise function will revert)\"}},\"initERC20Facet(string,string,uint8)\":{\"params\":{\"__decimals\":\"The number of decimals of the token\",\"__name\":\"The name of the token\",\"__symbol\":\"The symbol of the token\"}},\"isBuyFee(bytes32)\":{\"params\":{\"_id\":\"fee id\"}},\"isExcluded(address)\":{\"params\":{\"_account\":\"account to check\"}},\"isSellFee(bytes32)\":{\"params\":{\"_id\":\"fee id\"}},\"mint(address,uint256)\":{\"params\":{\"_amount\":\"receiving amount\",\"_to\":\"receiver address of the token\"},\"returns\":{\"_success\":\"Returns true is operation succeeds\"}},\"name()\":{\"returns\":{\"_0\":\"token name\"}},\"nonces(address)\":{\"returns\":{\"_0\":\"current nonce\"}},\"paused()\":{\"returns\":{\"status\":\"whether contract is paused\"}},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"this function may be vulnerable to approval replay attacks\",\"params\":{\"amount\":\"quantity of tokens to approve\",\"owner\":\"holder of tokens and signer of permit\",\"r\":\"secp256k1 'r' value\",\"s\":\"secp256k1 's' value\",\"spender\":\"beneficiary of approval\",\"v\":\"secp256k1 'v' value\"}},\"removeBuyFee(bytes32)\":{\"params\":{\"_id\":\"fee id\"}},\"removeLP(address)\":{\"params\":{\"_lp\":\"address of the liquidity pool of the token\"}},\"removeSellFee(bytes32)\":{\"params\":{\"_id\":\"fee id\"}},\"symbol()\":{\"returns\":{\"_0\":\"token symbol\"}},\"totalSupply()\":{\"returns\":{\"_0\":\"token supply\"}},\"transfer(address,uint256)\":{\"params\":{\"amount\":\"quantity of tokens to transfer\",\"recipient\":\"beneficiary of token transfer\"},\"returns\":{\"_0\":\"success status (always true; otherwise function should revert)\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"quantity of tokens to transfer\",\"holder\":\"holder of tokens prior to transfer\",\"recipient\":\"beneficiary of token transfer\"},\"returns\":{\"_0\":\"success status (always true; otherwise function should revert)\"}},\"updateBridgeSupplyCap(address,uint256)\":{\"params\":{\"_bridge\":\"address of the bridge\",\"_cap\":\"supply cap of the bridge\"}}},\"title\":\"ERC20 Token Facet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"notice\":\"return the EIP-712 domain separator unique to contract and chain\"},\"addBuyFee(bytes32)\":{\"notice\":\"Adds a buy fee based on a fee id\"},\"addLP(address)\":{\"notice\":\"Adds a liquidity pool address\"},\"addSellFee(bytes32)\":{\"notice\":\"Adds a sell fee based on a fee id\"},\"allowance(address,address)\":{\"notice\":\"query the allowance granted from given holder to given spender\"},\"approve(address,uint256)\":{\"notice\":\"grant approval to spender to spend tokens\"},\"balanceOf(address)\":{\"notice\":\"query the token balance of given account\"},\"bridges(address)\":{\"notice\":\"Returns the supply information of the given bridge\"},\"burn(address,uint256)\":{\"notice\":\"Burning an amount of tokens from a designated holderIt allows to burn a bridge supply until its supply is 0, even if the cap is already set to 0\"},\"burn(uint256)\":{\"notice\":\"Burning an amount of tokens from senderIt allows to burn a bridge supply until its supply is 0, even if the cap is already set to 0\"},\"burnFrom(address,uint256)\":{\"notice\":\"Burning an amount of tokens from a designated holderIt allows to burn a bridge supply until its supply is 0, even if the cap is already set to 0\"},\"decimals()\":{\"notice\":\"return token decimals, generally used only for display purposes\"},\"decreaseAllowance(address,uint256)\":{\"notice\":\"decrease spend amount granted to spender\"},\"disable()\":{\"notice\":\"This disables the transfers of this tokens\"},\"enable()\":{\"notice\":\"This enables the transfers of this tokens\"},\"excludeAccountFromTax(address)\":{\"notice\":\"Exclude an account from being charged on fees\"},\"getBuyFees()\":{\"notice\":\"Returns all buy fee ids\"},\"getOwner()\":{\"notice\":\"Returns the owner address\"},\"getSellFees()\":{\"notice\":\"Returns all sell fee ids\"},\"hasLP(address)\":{\"notice\":\"Returns the existence of an lp address\"},\"includeAccountForTax(address)\":{\"notice\":\"Includes an account againt to pay fees\"},\"increaseAllowance(address,uint256)\":{\"notice\":\"increase spend amount granted to spender\"},\"initERC20Facet(string,string,uint8)\":{\"notice\":\"Initializes the contract\"},\"isBuyFee(bytes32)\":{\"notice\":\"Checks whether a fee id is a buy fee or not\"},\"isExcluded(address)\":{\"notice\":\"Checks if an account is whether excluded from paying fees or not\"},\"isSellFee(bytes32)\":{\"notice\":\"Check whether a fee id is a sell fee or not\"},\"mint(address,uint256)\":{\"notice\":\"Minting an amount of tokens for a designated receiverIt allows to mint specified amount until the bridge supply cap is reached\"},\"name()\":{\"notice\":\"return token name\"},\"nonces(address)\":{\"notice\":\"get the current ERC2612 nonce for the given address\"},\"paused()\":{\"notice\":\"query whether contract is paused\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"approve spender to transfer tokens held by owner via signature\"},\"removeBuyFee(bytes32)\":{\"notice\":\"Removes a buy fee based on a fee id\"},\"removeLP(address)\":{\"notice\":\"Removes a liquidity pool address\"},\"removeSellFee(bytes32)\":{\"notice\":\"Removes a sell fee based on a fee id\"},\"symbol()\":{\"notice\":\"return token symbol\"},\"totalSupply()\":{\"notice\":\"query the total minted token supply\"},\"transfer(address,uint256)\":{\"notice\":\"transfer tokens to given recipient\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"transfer tokens to given recipient on behalf of given holder\"},\"updateBridgeSupplyCap(address,uint256)\":{\"notice\":\"Updates a supply cap for a specified bridge\"}},\"notice\":\"Provides the functionality of an ERC20 token to an EIP-2535 based diamond\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/diamond/facets/ERC20Facet.sol\":\"ERC20Facet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"@solidstate/contracts/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Elliptic Curve Digital Signature Algorithm (ECDSA) operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary ECDSA {\\n    error ECDSA__InvalidS();\\n    error ECDSA__InvalidSignature();\\n    error ECDSA__InvalidSignatureLength();\\n    error ECDSA__InvalidV();\\n\\n    /**\\n     * @notice recover signer of hashed message from signature\\n     * @param hash hashed data payload\\n     * @param signature signed data payload\\n     * @return recovered message signer\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal pure returns (address) {\\n        if (signature.length != 65) revert ECDSA__InvalidSignatureLength();\\n\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @notice recover signer of hashed message from signature v, r, and s values\\n     * @param hash hashed data payload\\n     * @param v signature \\\"v\\\" value\\n     * @param r signature \\\"r\\\" value\\n     * @param s signature \\\"s\\\" value\\n     * @return recovered message signer\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (\\n            uint256(s) >\\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\\n        ) revert ECDSA__InvalidS();\\n        if (v != 27 && v != 28) revert ECDSA__InvalidV();\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) revert ECDSA__InvalidSignature();\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @notice generate an \\\"Ethereum Signed Message\\\" in the format returned by the eth_sign JSON-RPC method\\n     * @param hash hashed data payload\\n     * @return signed message hash\\n     */\\n    function toEthSignedMessageHash(\\n        bytes32 hash\\n    ) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked('\\\\x19Ethereum Signed Message:\\\\n32', hash)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x6c0d5a71c8b91a811b5b4e1cfafffd0ba4e6b54c5b9852bedb49a1b29e69e3ad\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC20Internal } from './IERC20Internal.sol';\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface IERC20 is IERC20Internal {\\n    /**\\n     * @notice query the total minted token supply\\n     * @return token supply\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice query the token balance of given account\\n     * @param account address to query\\n     * @return token balance\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice query the allowance granted from given holder to given spender\\n     * @param holder approver of allowance\\n     * @param spender recipient of allowance\\n     * @return token allowance\\n     */\\n    function allowance(\\n        address holder,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice grant approval to spender to spend tokens\\n     * @dev prefer ERC20Extended functions to avoid transaction-ordering vulnerability (see https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729)\\n     * @param spender recipient of allowance\\n     * @param amount quantity of tokens approved for spending\\n     * @return success status (always true; otherwise function should revert)\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @notice transfer tokens to given recipient\\n     * @param recipient beneficiary of token transfer\\n     * @param amount quantity of tokens to transfer\\n     * @return success status (always true; otherwise function should revert)\\n     */\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice transfer tokens to given recipient on behalf of given holder\\n     * @param holder holder of tokens prior to transfer\\n     * @param recipient beneficiary of token transfer\\n     * @param amount quantity of tokens to transfer\\n     * @return success status (always true; otherwise function should revert)\\n     */\\n    function transferFrom(\\n        address holder,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc4554dc5c7fdc1a333511876ea1ab7a932bfdcdf092e658bf66049956c0f8aca\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC20Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC20 interface needed by internal functions\\n */\\ninterface IERC20Internal {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x5dc63954123c58280a48da71f91c435dd7373f56bd472867c80177359c885e53\",\"license\":\"MIT\"},\"@solidstate/contracts/security/pausable/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IPausableInternal } from './IPausableInternal.sol';\\n\\ninterface IPausable is IPausableInternal {\\n    /**\\n     * @notice query whether contract is paused\\n     * @return status whether contract is paused\\n     */\\n    function paused() external view returns (bool status);\\n}\\n\",\"keccak256\":\"0x02c7a692542fea6beecf9fd19b14b9c5705196d4ebcc9f548e62a7721b614d12\",\"license\":\"MIT\"},\"@solidstate/contracts/security/pausable/IPausableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\ninterface IPausableInternal {\\n    error Pausable__Paused();\\n    error Pausable__NotPaused();\\n\\n    event Paused(address account);\\n    event Unpaused(address account);\\n}\\n\",\"keccak256\":\"0xe54f7b8380acdc3b67d2f59325c2bc7241271b926436ba86f396cd22b3d046d1\",\"license\":\"MIT\"},\"@solidstate/contracts/security/pausable/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IPausable } from './IPausable.sol';\\nimport { PausableInternal } from './PausableInternal.sol';\\n\\n/**\\n * @title Pausable security control module.\\n */\\nabstract contract Pausable is IPausable, PausableInternal {\\n    /**\\n     * @inheritdoc IPausable\\n     */\\n    function paused() external view virtual returns (bool status) {\\n        status = _paused();\\n    }\\n}\\n\",\"keccak256\":\"0x23bb70159466408423d6890bb66e1249568523be6835105e92affc1b7ee00bee\",\"license\":\"MIT\"},\"@solidstate/contracts/security/pausable/PausableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IPausableInternal } from './IPausableInternal.sol';\\nimport { PausableStorage } from './PausableStorage.sol';\\n\\n/**\\n * @title Internal functions for Pausable security control module.\\n */\\nabstract contract PausableInternal is IPausableInternal {\\n    modifier whenNotPaused() {\\n        if (_paused()) revert Pausable__Paused();\\n        _;\\n    }\\n\\n    modifier whenPaused() {\\n        if (!_paused()) revert Pausable__NotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @notice query whether contract is paused\\n     * @return status whether contract is paused\\n     */\\n    function _paused() internal view virtual returns (bool status) {\\n        status = PausableStorage.layout().paused;\\n    }\\n\\n    /**\\n     * @notice Triggers paused state, when contract is unpaused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage.layout().paused = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Triggers unpaused state, when contract is paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        delete PausableStorage.layout().paused;\\n        emit Unpaused(msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x1f5ab9af36919cae22a83896b4ecbd99c93ea07a381038a6480e7bdda857c041\",\"license\":\"MIT\"},\"@solidstate/contracts/security/pausable/PausableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary PausableStorage {\\n    struct Layout {\\n        bool paused;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.Pausable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x113c77cb098cd9798d98df1718f4935e8613d5bdc0b73385891bd7666fd9aa2b\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC20/ISolidStateERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC20Base } from './base/IERC20Base.sol';\\nimport { IERC20Extended } from './extended/IERC20Extended.sol';\\nimport { IERC20Metadata } from './metadata/IERC20Metadata.sol';\\nimport { IERC20Permit } from './permit/IERC20Permit.sol';\\n\\ninterface ISolidStateERC20 is\\n    IERC20Base,\\n    IERC20Extended,\\n    IERC20Metadata,\\n    IERC20Permit\\n{}\\n\",\"keccak256\":\"0x4800d771e5606f791a7c2662802718a727c361aaf547df8e6e849165ef91e9df\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC20/SolidStateERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { ISolidStateERC20 } from './ISolidStateERC20.sol';\\nimport { ERC20Base } from './base/ERC20Base.sol';\\nimport { ERC20Extended } from './extended/ERC20Extended.sol';\\nimport { ERC20Metadata } from './metadata/ERC20Metadata.sol';\\nimport { ERC20Permit } from './permit/ERC20Permit.sol';\\n\\n/**\\n * @title SolidState ERC20 implementation, including recommended extensions\\n */\\nabstract contract SolidStateERC20 is\\n    ISolidStateERC20,\\n    ERC20Base,\\n    ERC20Extended,\\n    ERC20Metadata,\\n    ERC20Permit\\n{\\n\\n}\\n\",\"keccak256\":\"0x458859f714ecda3776d03a87f3b26a60d871b201a4768a3d0422012e52e5415c\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC20/base/ERC20Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC20 } from '../../../interfaces/IERC20.sol';\\nimport { IERC20Base } from './IERC20Base.sol';\\nimport { ERC20BaseInternal } from './ERC20BaseInternal.sol';\\nimport { ERC20BaseStorage } from './ERC20BaseStorage.sol';\\n\\n/**\\n * @title Base ERC20 implementation, excluding optional extensions\\n */\\nabstract contract ERC20Base is IERC20Base, ERC20BaseInternal {\\n    /**\\n     * @inheritdoc IERC20\\n     */\\n    function totalSupply() external view returns (uint256) {\\n        return _totalSupply();\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20\\n     */\\n    function balanceOf(address account) external view returns (uint256) {\\n        return _balanceOf(account);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20\\n     */\\n    function allowance(\\n        address holder,\\n        address spender\\n    ) external view returns (uint256) {\\n        return _allowance(holder, spender);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        return _approve(msg.sender, spender, amount);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20\\n     */\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool) {\\n        return _transfer(msg.sender, recipient, amount);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20\\n     */\\n    function transferFrom(\\n        address holder,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool) {\\n        return _transferFrom(holder, recipient, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xcb2e91570331bccad1beb1f30cf8bb1d4300b4222b828306d2f1ea9d867b2ef3\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC20/base/ERC20BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC20BaseInternal } from './IERC20BaseInternal.sol';\\nimport { ERC20BaseStorage } from './ERC20BaseStorage.sol';\\n\\n/**\\n * @title Base ERC20 internal functions, excluding optional extensions\\n */\\nabstract contract ERC20BaseInternal is IERC20BaseInternal {\\n    /**\\n     * @notice query the total minted token supply\\n     * @return token supply\\n     */\\n    function _totalSupply() internal view virtual returns (uint256) {\\n        return ERC20BaseStorage.layout().totalSupply;\\n    }\\n\\n    /**\\n     * @notice query the token balance of given account\\n     * @param account address to query\\n     * @return token balance\\n     */\\n    function _balanceOf(\\n        address account\\n    ) internal view virtual returns (uint256) {\\n        return ERC20BaseStorage.layout().balances[account];\\n    }\\n\\n    /**\\n     * @notice query the allowance granted from given holder to given spender\\n     * @param holder approver of allowance\\n     * @param spender recipient of allowance\\n     * @return token allowance\\n     */\\n    function _allowance(\\n        address holder,\\n        address spender\\n    ) internal view virtual returns (uint256) {\\n        return ERC20BaseStorage.layout().allowances[holder][spender];\\n    }\\n\\n    /**\\n     * @notice enable spender to spend tokens on behalf of holder\\n     * @param holder address on whose behalf tokens may be spent\\n     * @param spender recipient of allowance\\n     * @param amount quantity of tokens approved for spending\\n     * @return success status (always true; otherwise function should revert)\\n     */\\n    function _approve(\\n        address holder,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual returns (bool) {\\n        if (holder == address(0)) revert ERC20Base__ApproveFromZeroAddress();\\n        if (spender == address(0)) revert ERC20Base__ApproveToZeroAddress();\\n\\n        ERC20BaseStorage.layout().allowances[holder][spender] = amount;\\n\\n        emit Approval(holder, spender, amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice decrease spend amount granted by holder to spender\\n     * @param holder address on whose behalf tokens may be spent\\n     * @param spender address whose allowance to decrease\\n     * @param amount quantity by which to decrease allowance\\n     */\\n    function _decreaseAllowance(\\n        address holder,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        uint256 allowance = _allowance(holder, spender);\\n\\n        if (amount > allowance) revert ERC20Base__InsufficientAllowance();\\n\\n        unchecked {\\n            _approve(holder, spender, allowance - amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice mint tokens for given account\\n     * @param account recipient of minted tokens\\n     * @param amount quantity of tokens minted\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        if (account == address(0)) revert ERC20Base__MintToZeroAddress();\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        ERC20BaseStorage.Layout storage l = ERC20BaseStorage.layout();\\n        l.totalSupply += amount;\\n        l.balances[account] += amount;\\n\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @notice burn tokens held by given account\\n     * @param account holder of burned tokens\\n     * @param amount quantity of tokens burned\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        if (account == address(0)) revert ERC20Base__BurnFromZeroAddress();\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        ERC20BaseStorage.Layout storage l = ERC20BaseStorage.layout();\\n        uint256 balance = l.balances[account];\\n        if (amount > balance) revert ERC20Base__BurnExceedsBalance();\\n        unchecked {\\n            l.balances[account] = balance - amount;\\n        }\\n        l.totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @notice transfer tokens from holder to recipient\\n     * @param holder owner of tokens to be transferred\\n     * @param recipient beneficiary of transfer\\n     * @param amount quantity of tokens transferred\\n     * @return success status (always true; otherwise function should revert)\\n     */\\n    function _transfer(\\n        address holder,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual returns (bool) {\\n        if (holder == address(0)) revert ERC20Base__TransferFromZeroAddress();\\n        if (recipient == address(0)) revert ERC20Base__TransferToZeroAddress();\\n\\n        _beforeTokenTransfer(holder, recipient, amount);\\n\\n        ERC20BaseStorage.Layout storage l = ERC20BaseStorage.layout();\\n        uint256 holderBalance = l.balances[holder];\\n        if (amount > holderBalance) revert ERC20Base__TransferExceedsBalance();\\n        unchecked {\\n            l.balances[holder] = holderBalance - amount;\\n        }\\n        l.balances[recipient] += amount;\\n\\n        emit Transfer(holder, recipient, amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice transfer tokens to given recipient on behalf of given holder\\n     * @param holder holder of tokens prior to transfer\\n     * @param recipient beneficiary of token transfer\\n     * @param amount quantity of tokens to transfer\\n     * @return success status (always true; otherwise function should revert)\\n     */\\n    function _transferFrom(\\n        address holder,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual returns (bool) {\\n        _decreaseAllowance(holder, msg.sender, amount);\\n\\n        _transfer(holder, recipient, amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice ERC20 hook, called before all transfers including mint and burn\\n     * @dev function should be overridden and new implementation must call super\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param amount quantity of tokens transferred\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x571018562f714dbca7adb396b214a87b8fca12278aa706bb2ff5cbc8f4e0e970\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC20/base/ERC20BaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ERC20BaseStorage {\\n    struct Layout {\\n        mapping(address => uint256) balances;\\n        mapping(address => mapping(address => uint256)) allowances;\\n        uint256 totalSupply;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC20Base');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x77c4f688fd58ae32a15d63103581c6a20466790f1e68b6b1db687e8707fee7b1\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC20/base/IERC20Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC20 } from '../../../interfaces/IERC20.sol';\\nimport { IERC20BaseInternal } from './IERC20BaseInternal.sol';\\n\\n/**\\n * @title ERC20 base interface\\n */\\ninterface IERC20Base is IERC20BaseInternal, IERC20 {\\n\\n}\\n\",\"keccak256\":\"0x83fcb688381ff4fba9bc068d490d3f0fd83abd5e5ee46f24cfb18ae1906e071e\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC20/base/IERC20BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC20Internal } from '../../../interfaces/IERC20Internal.sol';\\n\\n/**\\n * @title ERC20 base interface\\n */\\ninterface IERC20BaseInternal is IERC20Internal {\\n    error ERC20Base__ApproveFromZeroAddress();\\n    error ERC20Base__ApproveToZeroAddress();\\n    error ERC20Base__BurnExceedsBalance();\\n    error ERC20Base__BurnFromZeroAddress();\\n    error ERC20Base__InsufficientAllowance();\\n    error ERC20Base__MintToZeroAddress();\\n    error ERC20Base__TransferExceedsBalance();\\n    error ERC20Base__TransferFromZeroAddress();\\n    error ERC20Base__TransferToZeroAddress();\\n}\\n\",\"keccak256\":\"0xa9c47a0ad2ab7f043a283ff148a8e4cf61d98f05fbed8d9ce35f6a0a403cc17f\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC20/extended/ERC20Extended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC20Extended } from './IERC20Extended.sol';\\nimport { ERC20ExtendedInternal } from './ERC20ExtendedInternal.sol';\\n\\n/**\\n * @title ERC20 safe approval extensions\\n * @dev mitigations for transaction-ordering vulnerability (see https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729)\\n */\\nabstract contract ERC20Extended is IERC20Extended, ERC20ExtendedInternal {\\n    /**\\n     * @inheritdoc IERC20Extended\\n     */\\n    function increaseAllowance(\\n        address spender,\\n        uint256 amount\\n    ) external returns (bool) {\\n        return _increaseAllowance(spender, amount);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20Extended\\n     */\\n    function decreaseAllowance(\\n        address spender,\\n        uint256 amount\\n    ) external returns (bool) {\\n        return _decreaseAllowance(spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x8fc1235a301b4a1d794118c363a078f13f0ea5ffe6ab6b1cc7e7409980fa1619\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC20/extended/ERC20ExtendedInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { ERC20BaseInternal, ERC20BaseStorage } from '../base/ERC20Base.sol';\\nimport { IERC20ExtendedInternal } from './IERC20ExtendedInternal.sol';\\n\\n/**\\n * @title ERC20 safe approval extensions\\n * @dev mitigations for transaction-ordering vulnerability (see https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729)\\n */\\nabstract contract ERC20ExtendedInternal is\\n    ERC20BaseInternal,\\n    IERC20ExtendedInternal\\n{\\n    /**\\n     * @notice increase spend amount granted to spender\\n     * @param spender address whose allowance to increase\\n     * @param amount quantity by which to increase allowance\\n     * @return success status (always true; otherwise function will revert)\\n     */\\n    function _increaseAllowance(\\n        address spender,\\n        uint256 amount\\n    ) internal virtual returns (bool) {\\n        uint256 allowance = _allowance(msg.sender, spender);\\n\\n        unchecked {\\n            if (allowance > allowance + amount)\\n                revert ERC20Extended__ExcessiveAllowance();\\n\\n            return _approve(msg.sender, spender, allowance + amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice decrease spend amount granted to spender\\n     * @param spender address whose allowance to decrease\\n     * @param amount quantity by which to decrease allowance\\n     * @return success status (always true; otherwise function will revert)\\n     */\\n    function _decreaseAllowance(\\n        address spender,\\n        uint256 amount\\n    ) internal virtual returns (bool) {\\n        _decreaseAllowance(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xd32ec9a244d7daf96059884e29acbd9cac4597885fc27db717d855a15769fb74\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC20/extended/IERC20Extended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC20ExtendedInternal } from './IERC20ExtendedInternal.sol';\\n\\n/**\\n * @title ERC20 extended interface\\n */\\ninterface IERC20Extended is IERC20ExtendedInternal {\\n    /**\\n     * @notice increase spend amount granted to spender\\n     * @param spender address whose allowance to increase\\n     * @param amount quantity by which to increase allowance\\n     * @return success status (always true; otherwise function will revert)\\n     */\\n    function increaseAllowance(\\n        address spender,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice decrease spend amount granted to spender\\n     * @param spender address whose allowance to decrease\\n     * @param amount quantity by which to decrease allowance\\n     * @return success status (always true; otherwise function will revert)\\n     */\\n    function decreaseAllowance(\\n        address spender,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x2eaa3907a62acc5b79fcbc90773c458ed4fcb6885b92aea56598b62af51fbd9c\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC20/extended/IERC20ExtendedInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC20BaseInternal } from '../base/IERC20BaseInternal.sol';\\n\\n/**\\n * @title ERC20 extended internal interface\\n */\\ninterface IERC20ExtendedInternal is IERC20BaseInternal {\\n    error ERC20Extended__ExcessiveAllowance();\\n    error ERC20Extended__InsufficientAllowance();\\n}\\n\",\"keccak256\":\"0x6fa7ab02fbac8389c99d4854ff7f6bf0de08459c167e5bbab15138b177b55de4\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC20/metadata/ERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC20Metadata } from './IERC20Metadata.sol';\\nimport { ERC20MetadataInternal } from './ERC20MetadataInternal.sol';\\n\\n/**\\n * @title ERC20 metadata extensions\\n */\\nabstract contract ERC20Metadata is IERC20Metadata, ERC20MetadataInternal {\\n    /**\\n     * @inheritdoc IERC20Metadata\\n     */\\n    function name() external view returns (string memory) {\\n        return _name();\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20Metadata\\n     */\\n    function symbol() external view returns (string memory) {\\n        return _symbol();\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20Metadata\\n     */\\n    function decimals() external view returns (uint8) {\\n        return _decimals();\\n    }\\n}\\n\",\"keccak256\":\"0x57b284c9dadfb1ace56b1db778cb72b922d60f228e0c4f90299c7392be004473\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC20/metadata/ERC20MetadataInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC20MetadataInternal } from './IERC20MetadataInternal.sol';\\nimport { ERC20MetadataStorage } from './ERC20MetadataStorage.sol';\\n\\n/**\\n * @title ERC20Metadata internal functions\\n */\\nabstract contract ERC20MetadataInternal is IERC20MetadataInternal {\\n    /**\\n     * @notice return token name\\n     * @return token name\\n     */\\n    function _name() internal view virtual returns (string memory) {\\n        return ERC20MetadataStorage.layout().name;\\n    }\\n\\n    /**\\n     * @notice return token symbol\\n     * @return token symbol\\n     */\\n    function _symbol() internal view virtual returns (string memory) {\\n        return ERC20MetadataStorage.layout().symbol;\\n    }\\n\\n    /**\\n     * @notice return token decimals, generally used only for display purposes\\n     * @return token decimals\\n     */\\n    function _decimals() internal view virtual returns (uint8) {\\n        return ERC20MetadataStorage.layout().decimals;\\n    }\\n\\n    function _setName(string memory name) internal virtual {\\n        ERC20MetadataStorage.layout().name = name;\\n    }\\n\\n    function _setSymbol(string memory symbol) internal virtual {\\n        ERC20MetadataStorage.layout().symbol = symbol;\\n    }\\n\\n    function _setDecimals(uint8 decimals) internal virtual {\\n        ERC20MetadataStorage.layout().decimals = decimals;\\n    }\\n}\\n\",\"keccak256\":\"0xa50e52d2ede659caaed611115b905facf0a11fd0ca4c5ae9b082ef563467eea3\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC20/metadata/ERC20MetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ERC20MetadataStorage {\\n    struct Layout {\\n        string name;\\n        string symbol;\\n        uint8 decimals;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC20Metadata');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x457312afbbb64fe0c5dfcb524e2d1122c314d409bca20a5ea5ba7275decfa3a2\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC20/metadata/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC20MetadataInternal } from './IERC20MetadataInternal.sol';\\n\\n/**\\n * @title ERC20 metadata interface\\n */\\ninterface IERC20Metadata is IERC20MetadataInternal {\\n    /**\\n     * @notice return token name\\n     * @return token name\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @notice return token symbol\\n     * @return token symbol\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @notice return token decimals, generally used only for display purposes\\n     * @return token decimals\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x22eefd0dbd7637f41c8bfc3662a4b1ae6f084f27f26e34cc9bf124e0aee10a01\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC20/metadata/IERC20MetadataInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title ERC20 metadata internal interface\\n */\\ninterface IERC20MetadataInternal {\\n\\n}\\n\",\"keccak256\":\"0x32464590a972a9325d20c7125d157594df9473b6496ce6a66df617c41c4039ec\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC20/permit/ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport { ERC20Base } from '../base/ERC20Base.sol';\\nimport { ERC20Metadata } from '../metadata/ERC20Metadata.sol';\\nimport { ERC20PermitInternal } from './ERC20PermitInternal.sol';\\nimport { ERC20PermitStorage } from './ERC20PermitStorage.sol';\\nimport { IERC2612 } from './IERC2612.sol';\\nimport { IERC20Permit } from './IERC20Permit.sol';\\n\\n/**\\n * @title ERC20 extension with support for ERC2612 permits\\n * @dev derived from https://github.com/soliditylabs/ERC20-Permit (MIT license)\\n */\\nabstract contract ERC20Permit is IERC20Permit, ERC20PermitInternal {\\n    /**\\n     * @inheritdoc IERC2612\\n     */\\n    function DOMAIN_SEPARATOR()\\n        external\\n        view\\n        returns (bytes32 domainSeparator)\\n    {\\n        return _DOMAIN_SEPARATOR();\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2612\\n     */\\n    function nonces(address owner) public view returns (uint256) {\\n        return _nonces(owner);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2612\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        _permit(owner, spender, amount, deadline, v, r, s);\\n    }\\n}\\n\",\"keccak256\":\"0xc643dedca17c9e43323def837213735d91e7a437abbb72b4de76d30a0083e8ef\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC20/permit/ERC20PermitInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport { ECDSA } from '../../../cryptography/ECDSA.sol';\\nimport { ERC20BaseInternal } from '../base/ERC20BaseInternal.sol';\\nimport { ERC20MetadataInternal } from '../metadata/ERC20MetadataInternal.sol';\\nimport { ERC20PermitStorage } from './ERC20PermitStorage.sol';\\nimport { IERC20PermitInternal } from './IERC20PermitInternal.sol';\\n\\n/**\\n * @title ERC20 extension with support for ERC2612 permits\\n * @dev derived from https://github.com/soliditylabs/ERC20-Permit (MIT license)\\n */\\nabstract contract ERC20PermitInternal is\\n    ERC20BaseInternal,\\n    ERC20MetadataInternal,\\n    IERC20PermitInternal\\n{\\n    using ECDSA for bytes32;\\n\\n    /**\\n     * @notice return the EIP-712 domain separator unique to contract and chain\\n     * @return domainSeparator domain separator\\n     */\\n    function _DOMAIN_SEPARATOR()\\n        internal\\n        view\\n        returns (bytes32 domainSeparator)\\n    {\\n        domainSeparator = ERC20PermitStorage.layout().domainSeparators[\\n            _chainId()\\n        ];\\n\\n        if (domainSeparator == 0x00) {\\n            domainSeparator = _calculateDomainSeparator();\\n        }\\n    }\\n\\n    /**\\n     * @notice get the current ERC2612 nonce for the given address\\n     * @return current nonce\\n     */\\n    function _nonces(address owner) internal view returns (uint256) {\\n        return ERC20PermitStorage.layout().nonces[owner];\\n    }\\n\\n    /**\\n     * @notice calculate unique EIP-712 domain separator\\n     * @return domainSeparator domain separator\\n     */\\n    function _calculateDomainSeparator()\\n        internal\\n        view\\n        returns (bytes32 domainSeparator)\\n    {\\n        // no need for assembly, running very rarely\\n        domainSeparator = keccak256(\\n            abi.encode(\\n                keccak256(\\n                    'EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'\\n                ),\\n                keccak256(bytes(_name())), // ERC-20 Name\\n                keccak256(bytes('1')), // Version\\n                _chainId(),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice get the current chain ID\\n     * @return chainId chain ID\\n     */\\n    function _chainId() private view returns (uint256 chainId) {\\n        assembly {\\n            chainId := chainid()\\n        }\\n    }\\n\\n    /**\\n     * @notice approve spender to transfer tokens held by owner via signature\\n     * @dev this function may be vulnerable to approval replay attacks\\n     * @param owner holder of tokens and signer of permit\\n     * @param spender beneficiary of approval\\n     * @param amount quantity of tokens to approve\\n     * @param v secp256k1 'v' value\\n     * @param r secp256k1 'r' value\\n     * @param s secp256k1 's' value\\n     * @dev If https://eips.ethereum.org/EIPS/eip-1344[ChainID] ever changes, the\\n     * EIP712 Domain Separator is automatically recalculated.\\n     */\\n    function _permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal virtual {\\n        if (block.timestamp > deadline) revert ERC20Permit__ExpiredDeadline();\\n\\n        // Assembly for more efficiently computing:\\n        // bytes32 hashStruct = keccak256(\\n        //   abi.encode(\\n        //     _PERMIT_TYPEHASH,\\n        //     owner,\\n        //     spender,\\n        //     amount,\\n        //     _nonces[owner].current(),\\n        //     deadline\\n        //   )\\n        // );\\n\\n        ERC20PermitStorage.Layout storage l = ERC20PermitStorage.layout();\\n\\n        bytes32 hashStruct;\\n        uint256 nonce = l.nonces[owner];\\n\\n        assembly {\\n            // Load free memory pointer\\n            let pointer := mload(64)\\n\\n            // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\")\\n            mstore(\\n                pointer,\\n                0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9\\n            )\\n            mstore(add(pointer, 32), owner)\\n            mstore(add(pointer, 64), spender)\\n            mstore(add(pointer, 96), amount)\\n            mstore(add(pointer, 128), nonce)\\n            mstore(add(pointer, 160), deadline)\\n\\n            hashStruct := keccak256(pointer, 192)\\n        }\\n\\n        bytes32 domainSeparator = l.domainSeparators[_chainId()];\\n\\n        if (domainSeparator == 0x00) {\\n            domainSeparator = _calculateDomainSeparator();\\n            l.domainSeparators[_chainId()] = domainSeparator;\\n        }\\n\\n        // Assembly for more efficient computing:\\n        // bytes32 hash = keccak256(\\n        //   abi.encodePacked(uint16(0x1901), domainSeparator, hashStruct)\\n        // );\\n\\n        bytes32 hash;\\n\\n        assembly {\\n            // Load free memory pointer\\n            let pointer := mload(64)\\n\\n            mstore(\\n                pointer,\\n                0x1901000000000000000000000000000000000000000000000000000000000000\\n            ) // EIP191 header\\n            mstore(add(pointer, 2), domainSeparator) // EIP712 domain hash\\n            mstore(add(pointer, 34), hashStruct) // Hash of struct\\n\\n            hash := keccak256(pointer, 66)\\n        }\\n\\n        address signer = hash.recover(v, r, s);\\n\\n        if (signer != owner) revert ERC20Permit__InvalidSignature();\\n\\n        l.nonces[owner]++;\\n        _approve(owner, spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xa594b27e8f5ac45f5ccb3ad66f6f5cb9104e97425293716b8ce66395f4359d6f\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC20/permit/ERC20PermitStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ERC20PermitStorage {\\n    struct Layout {\\n        mapping(address => uint256) nonces;\\n        // Mapping of ChainID to domain separators. This is a very gas efficient way\\n        // to not recalculate the domain separator on every call, while still\\n        // automatically detecting ChainID changes.\\n        mapping(uint256 => bytes32) domainSeparators;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC20Permit');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x246e6651fcc1b9664bb689addca3c3122053affdf672037cab6ac1a5bcc1334a\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC20/permit/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC20Metadata } from '../metadata/IERC20Metadata.sol';\\nimport { IERC2612 } from './IERC2612.sol';\\nimport { IERC20PermitInternal } from './IERC20PermitInternal.sol';\\n\\n// TODO: note that IERC20Metadata is needed for eth-permit library\\n\\ninterface IERC20Permit is IERC20PermitInternal, IERC2612 {\\n\\n}\\n\",\"keccak256\":\"0x4b906e3eab76bf0e4e3b96987f989f9e2350f70f775b2773ae84ffcf40816f0c\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC20/permit/IERC20PermitInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC2612Internal } from './IERC2612Internal.sol';\\n\\ninterface IERC20PermitInternal is IERC2612Internal {\\n    error ERC20Permit__ExpiredDeadline();\\n    error ERC20Permit__InvalidSignature();\\n}\\n\",\"keccak256\":\"0x4f6e12f9e07cc66ca9ee57a25c40d9d2f55d3e800a3d6577c9d883068423eb22\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC20/permit/IERC2612.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC2612Internal } from './IERC2612Internal.sol';\\n\\n/**\\n * @title ERC2612 interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-2612.\\n */\\ninterface IERC2612 is IERC2612Internal {\\n    /**\\n     * @notice return the EIP-712 domain separator unique to contract and chain\\n     * @return domainSeparator domain separator\\n     */\\n    function DOMAIN_SEPARATOR() external view returns (bytes32 domainSeparator);\\n\\n    /**\\n     * @notice get the current ERC2612 nonce for the given address\\n     * @return current nonce\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @notice approve spender to transfer tokens held by owner via signature\\n     * @dev this function may be vulnerable to approval replay attacks\\n     * @param owner holder of tokens and signer of permit\\n     * @param spender beneficiary of approval\\n     * @param amount quantity of tokens to approve\\n     * @param v secp256k1 'v' value\\n     * @param r secp256k1 'r' value\\n     * @param s secp256k1 's' value\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x449c45997514a8ebf30c7cd7a27778ce6fd6f7dac27c9505fd8a4f093f396e92\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC20/permit/IERC2612Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\ninterface IERC2612Internal {}\\n\",\"keccak256\":\"0xdca4b94537ab13936677c889a29267e506f2f23da6f5f541f73a95e2db5b4db9\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from './UintUtils.sol';\\n\\nlibrary AddressUtils {\\n    using UintUtils for uint256;\\n\\n    error AddressUtils__InsufficientBalance();\\n    error AddressUtils__NotContract();\\n    error AddressUtils__SendValueFailed();\\n\\n    function toString(address account) internal pure returns (string memory) {\\n        return uint256(uint160(account)).toHexString(20);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        if (!success) revert AddressUtils__SendValueFailed();\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        if (value > address(this).balance)\\n            revert AddressUtils__InsufficientBalance();\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    /**\\n     * @notice execute arbitrary external call with limited gas usage and amount of copied return data\\n     * @dev derived from https://github.com/nomad-xyz/ExcessivelySafeCall (MIT License)\\n     * @param target recipient of call\\n     * @param gasAmount gas allowance for call\\n     * @param value native token value to include in call\\n     * @param maxCopy maximum number of bytes to copy from return data\\n     * @param data encoded call data\\n     * @return success whether call is successful\\n     * @return returnData copied return data\\n     */\\n    function excessivelySafeCall(\\n        address target,\\n        uint256 gasAmount,\\n        uint256 value,\\n        uint16 maxCopy,\\n        bytes memory data\\n    ) internal returns (bool success, bytes memory returnData) {\\n        returnData = new bytes(maxCopy);\\n\\n        assembly {\\n            // execute external call via assembly to avoid automatic copying of return data\\n            success := call(\\n                gasAmount,\\n                target,\\n                value,\\n                add(data, 0x20),\\n                mload(data),\\n                0,\\n                0\\n            )\\n\\n            // determine whether to limit amount of data to copy\\n            let toCopy := returndatasize()\\n\\n            if gt(toCopy, maxCopy) {\\n                toCopy := maxCopy\\n            }\\n\\n            // store the length of the copied bytes\\n            mstore(returnData, toCopy)\\n\\n            // copy the bytes from returndata[0:toCopy]\\n            returndatacopy(add(returnData, 0x20), 0, toCopy)\\n        }\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        if (!isContract(target)) revert AddressUtils__NotContract();\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7d924db4dbd9210923ab08db77db3c77438014c255fd49fa208ebce283d991bf\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC20 } from '../interfaces/IERC20.sol';\\nimport { AddressUtils } from './AddressUtils.sol';\\n\\n/**\\n * @title Safe ERC20 interaction library\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary SafeERC20 {\\n    using AddressUtils for address;\\n\\n    error SafeERC20__ApproveFromNonZeroToNonZero();\\n    error SafeERC20__DecreaseAllowanceBelowZero();\\n    error SafeERC20__OperationFailed();\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    /**\\n     * @dev safeApprove (like approve) should only be called when setting an initial allowance or when resetting it to zero; otherwise prefer safeIncreaseAllowance and safeDecreaseAllowance\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        if ((value != 0) && (token.allowance(address(this), spender) != 0))\\n            revert SafeERC20__ApproveFromNonZeroToNonZero();\\n\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            if (oldAllowance < value)\\n                revert SafeERC20__DecreaseAllowanceBelowZero();\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(\\n                token,\\n                abi.encodeWithSelector(\\n                    token.approve.selector,\\n                    spender,\\n                    newAllowance\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice send transaction data and check validity of return value, if present\\n     * @param token ERC20 token interface\\n     * @param data transaction data\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        bytes memory returndata = address(token).functionCall(\\n            data,\\n            'SafeERC20: low-level call failed'\\n        );\\n\\n        if (returndata.length > 0) {\\n            if (!abi.decode(returndata, (bool)))\\n                revert SafeERC20__OperationFailed();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd1d6d797898b4cfd575c8c9aca1194e9de7bb88fe6c8fb2afaf2b100e5992826\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/UintUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title utility functions for uint256 operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary UintUtils {\\n    error UintUtils__InsufficientHexLength();\\n\\n    bytes16 private constant HEX_SYMBOLS = '0123456789abcdef';\\n\\n    function add(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? sub(a, -b) : a + uint256(b);\\n    }\\n\\n    function sub(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? add(a, -b) : a - uint256(b);\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0';\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0x00';\\n        }\\n\\n        uint256 length = 0;\\n\\n        for (uint256 temp = value; temp != 0; temp >>= 8) {\\n            unchecked {\\n                length++;\\n            }\\n        }\\n\\n        return toHexString(value, length);\\n    }\\n\\n    function toHexString(\\n        uint256 value,\\n        uint256 length\\n    ) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n\\n        unchecked {\\n            for (uint256 i = 2 * length + 1; i > 1; --i) {\\n                buffer[i] = HEX_SYMBOLS[value & 0xf];\\n                value >>= 4;\\n            }\\n        }\\n\\n        if (value != 0) revert UintUtils__InsufficientHexLength();\\n\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x5aaeaea22a0800402c6f2d8ce6185293bc64f74f6c390c1b1c53b624b43972f8\",\"license\":\"MIT\"},\"contracts/diamond/facets/ERC20Facet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.19;\\n\\nimport { SolidStateERC20 } from \\\"@solidstate/contracts/token/ERC20/SolidStateERC20.sol\\\";\\nimport { Pausable } from \\\"@solidstate/contracts/security/pausable/Pausable.sol\\\";\\nimport { IERC20 } from \\\"@solidstate/contracts/interfaces/IERC20.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport { IERC20Facet } from \\\"../interfaces/IERC20Facet.sol\\\";\\nimport { LibAccessControlEnumerable } from \\\"../libraries/LibAccessControlEnumerable.sol\\\";\\nimport { LibFeeStoreStorage } from \\\"../libraries/LibFeeStoreStorage.sol\\\";\\nimport { LibFeeStore } from \\\"../libraries/LibFeeStore.sol\\\";\\nimport { LibDiamond } from \\\"../libraries/LibDiamond.sol\\\";\\nimport { NotAllowed } from \\\"../helpers/GenericErrors.sol\\\";\\nimport { Constants } from \\\"../helpers/Constants.sol\\\";\\n\\n/// @title ERC20 Token Facet\\n/// @author Daniel <danieldegendev@gmail.com>\\n/// @notice Provides the functionality of an ERC20 token to an EIP-2535 based diamond\\n/// @custom:version 1.1.0\\ncontract ERC20Facet is SolidStateERC20, Pausable, IERC20Facet {\\n    using Address for address;\\n\\n    /// Storage Slot\\n    bytes32 internal constant ERC20_FACET_STORAGE_SLOT = keccak256(\\\"degenx.erc20.storage.v1.1.0\\\");\\n\\n    event AddLP(address lp);\\n    event RemoveLP(address lp);\\n    event ExcludeAccountFromTax(address account);\\n    event IncludeAccountToTax(address account);\\n    event FeeAdded(bytes32 id, bool buyFee);\\n    event FeeRemoved(bytes32 id, bool buyFee);\\n    event BridgeSupplyCapUpdated(address bridge, uint256 cap);\\n\\n    error FeeIdAlreadySet(bytes32 id);\\n    error FeeIdNotSet(bytes32 id);\\n    error FeeIdMissing();\\n    error InvalidFeeId(bytes32 id);\\n    error NoBurnPossible();\\n    error BridgeSupplyExceeded(uint256 candidate, uint256 supply);\\n    error AddressNoContract(address candidate);\\n\\n    /// @param cap maximum tokens to mint for a specific account/contract\\n    /// @param total currently minted amount of tokens for a specific account/contract\\n    struct BridgeSupply {\\n        uint256 cap;\\n        uint256 total;\\n    }\\n\\n    /// @param initialized A flag that defines if the contract is initialized already\\n    /// @param buyFee An array of bytes32 to configure buy fee ids\\n    /// @param sellFee An array of bytes32 to configure sell fee ids\\n    /// @param lps A map of addresses which are identified as a liquidity pool\\n    /// @param excludes A map of addresses which can get flagged to be from paying fees\\n    /// @param fees A map of fee ids to its charged amounts\\n    /// @param bridges A map of fee ids to its charged amounts\\n    struct ERC20FacetStorage {\\n        bool initialized;\\n        bytes32[] buyFee;\\n        bytes32[] sellFee;\\n        mapping(address => bool) lps;\\n        mapping(address => bool) excludes;\\n        mapping(bytes32 => uint256) fees;\\n        mapping(address => BridgeSupply) bridges;\\n    }\\n\\n    /// Initializes the contract\\n    /// @param __name The name of the token\\n    /// @param __symbol The symbol of the token\\n    /// @param __decimals The number of decimals of the token\\n    function initERC20Facet(string calldata __name, string calldata __symbol, uint8 __decimals) external {\\n        LibAccessControlEnumerable.checkRole(Constants.DEPLOYER_ROLE);\\n        ERC20FacetStorage storage s = _store();\\n        if (s.initialized) revert(\\\"initialized\\\");\\n        _pause();\\n        _setName(__name);\\n        _setSymbol(__symbol);\\n        _setDecimals(__decimals);\\n        s.initialized = true;\\n    }\\n\\n    /// @inheritdoc IERC20Facet\\n    function mint(address _to, uint256 _amount) external returns (bool _success) {\\n        ERC20FacetStorage storage s = _store();\\n        if (s.bridges[msg.sender].cap == 0) revert NotAllowed();\\n        s.bridges[msg.sender].total += _amount;\\n        if (s.bridges[msg.sender].total > s.bridges[msg.sender].cap) revert BridgeSupplyExceeded(_amount, s.bridges[msg.sender].cap);\\n        _mint(_to, _amount);\\n        _success = true;\\n    }\\n\\n    /// @inheritdoc IERC20Facet\\n    function burn(uint256 _amount) external returns (bool _success) {\\n        _burn(msg.sender, _amount);\\n        _success = true;\\n    }\\n\\n    /// @inheritdoc IERC20Facet\\n    function burn(address _from, uint256 _amount) external returns (bool _success) {\\n        _success = _burnFrom(_from, _amount);\\n    }\\n\\n    /// @inheritdoc IERC20Facet\\n    function burnFrom(address _from, uint256 _amount) external returns (bool _success) {\\n        _success = _burnFrom(_from, _amount);\\n    }\\n\\n    /// @inheritdoc IERC20Facet\\n    function enable() external {\\n        LibAccessControlEnumerable.checkRole(Constants.ADMIN_ROLE);\\n        _unpause();\\n    }\\n\\n    /// @inheritdoc IERC20Facet\\n    function disable() external {\\n        LibAccessControlEnumerable.checkRole(Constants.ADMIN_ROLE);\\n        _pause();\\n    }\\n\\n    /// @inheritdoc IERC20Facet\\n    function addLP(address _lp) external {\\n        LibAccessControlEnumerable.checkRole(Constants.ADMIN_ROLE);\\n        ERC20FacetStorage storage s = _store();\\n        s.lps[_lp] = true;\\n        emit AddLP(_lp);\\n    }\\n\\n    /// @inheritdoc IERC20Facet\\n    function removeLP(address _lp) external {\\n        LibAccessControlEnumerable.checkRole(Constants.ADMIN_ROLE);\\n        ERC20FacetStorage storage s = _store();\\n        s.lps[_lp] = false;\\n        emit RemoveLP(_lp);\\n    }\\n\\n    /// @inheritdoc IERC20Facet\\n    function excludeAccountFromTax(address _account) external {\\n        LibAccessControlEnumerable.checkRole(Constants.ADMIN_ROLE);\\n        ERC20FacetStorage storage s = _store();\\n        s.excludes[_account] = true;\\n        emit ExcludeAccountFromTax(_account);\\n    }\\n\\n    /// @inheritdoc IERC20Facet\\n    function includeAccountForTax(address _account) external {\\n        LibAccessControlEnumerable.checkRole(Constants.ADMIN_ROLE);\\n        ERC20FacetStorage storage s = _store();\\n        delete s.excludes[_account];\\n        emit IncludeAccountToTax(_account);\\n    }\\n\\n    /// @inheritdoc IERC20Facet\\n    function addBuyFee(bytes32 _id) external {\\n        _addFee(_id, true);\\n    }\\n\\n    /// Removes a buy fee based on a fee id\\n    /// @param _id fee id\\n    function removeBuyFee(bytes32 _id) external {\\n        _removeFee(_id, true);\\n    }\\n\\n    /// @inheritdoc IERC20Facet\\n    function addSellFee(bytes32 _id) external {\\n        _addFee(_id, false);\\n    }\\n\\n    /// Removes a sell fee based on a fee id\\n    /// @param _id fee id\\n    function removeSellFee(bytes32 _id) external {\\n        _removeFee(_id, false);\\n    }\\n\\n    /// Updates a supply cap for a specified bridge\\n    /// @param _bridge address of the bridge\\n    /// @param _cap supply cap of the bridge\\n    function updateBridgeSupplyCap(address _bridge, uint256 _cap) external {\\n        LibAccessControlEnumerable.checkRole(Constants.ADMIN_ROLE);\\n        if (!_bridge.isContract()) revert AddressNoContract(_bridge);\\n        ERC20FacetStorage storage s = _store();\\n        // cap == 0 means revoking bridge role\\n        s.bridges[_bridge].cap = _cap;\\n        emit BridgeSupplyCapUpdated(_bridge, _cap);\\n    }\\n\\n    /// viewables\\n\\n    /// Checks if an account is whether excluded from paying fees or not\\n    /// @param _account account to check\\n    function isExcluded(address _account) external view returns (bool _isExcluded) {\\n        ERC20FacetStorage storage s = _store();\\n        _isExcluded = s.excludes[_account];\\n    }\\n\\n    /// Checks whether a fee id is a buy fee or not\\n    /// @param _id fee id\\n    function isBuyFee(bytes32 _id) external view returns (bool _itis) {\\n        _itis = _isFee(_id, true);\\n    }\\n\\n    /// Check whether a fee id is a sell fee or not\\n    /// @param _id fee id\\n    function isSellFee(bytes32 _id) external view returns (bool _itis) {\\n        _itis = _isFee(_id, false);\\n    }\\n\\n    /// @inheritdoc IERC20Facet\\n    function hasLP(address _lp) external view returns (bool _has) {\\n        ERC20FacetStorage storage s = _store();\\n        _has = s.lps[_lp];\\n    }\\n\\n    /// Returns all buy fee ids\\n    /// @return _fees array of fee ids\\n    function getBuyFees() external view returns (bytes32[] memory _fees) {\\n        ERC20FacetStorage storage s = _store();\\n        _fees = s.buyFee;\\n    }\\n\\n    /// Returns all sell fee ids\\n    /// @return _fees array of fee ids\\n    function getSellFees() external view returns (bytes32[] memory _fees) {\\n        ERC20FacetStorage storage s = _store();\\n        _fees = s.sellFee;\\n    }\\n\\n    /// Returns the supply information of the given bridge\\n    /// @param _bridge address of the bridge\\n    /// @return _supply bridge supply\\n    function bridges(address _bridge) external view returns (BridgeSupply memory _supply) {\\n        _supply = _store().bridges[_bridge];\\n    }\\n\\n    /// @notice Returns the owner address\\n    /// @return _owner owner address\\n    function getOwner() external view returns (address _owner) {\\n        _owner = LibDiamond.contractOwner();\\n    }\\n\\n    /// internals\\n\\n    /// Returns if a fee is an actual fee from the buy fees or from the sell fees\\n    /// @param _id fee id\\n    /// @param _isBuyFee flag to decide whether it is a buy fee or not\\n    /// @return _itis returns true if it is a fee\\n    function _isFee(bytes32 _id, bool _isBuyFee) internal view returns (bool _itis) {\\n        ERC20FacetStorage storage s = _store();\\n        bytes32[] storage _fees = _isBuyFee ? s.buyFee : s.sellFee;\\n        for (uint256 i = 0; i < _fees.length; ) {\\n            if (_fees[i] == _id) {\\n                _itis = true;\\n                break;\\n            }\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /// Adds a fee based on a fee id and a flag if it should be added as buy fee or sell fee\\n    /// @param _id fee id\\n    /// @param _isBuyFee flag if fee id should be processed as buy fee or sell fee\\n    function _addFee(bytes32 _id, bool _isBuyFee) internal {\\n        LibAccessControlEnumerable.checkRole(Constants.ADMIN_ROLE);\\n        ERC20FacetStorage storage s = _store();\\n        LibFeeStoreStorage.FeeStoreStorage storage feeStore = LibFeeStoreStorage.feeStoreStorage();\\n        if (_id == bytes32(\\\"\\\")) revert FeeIdMissing();\\n        if (feeStore.feeConfigs[_id].id != _id) revert InvalidFeeId(_id);\\n        bytes32[] storage _fees = _isBuyFee ? s.buyFee : s.sellFee;\\n        for (uint256 i = 0; i < _fees.length; ) {\\n            if (_fees[i] == _id) revert FeeIdAlreadySet(_id);\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        _fees.push(_id);\\n        emit FeeAdded(_id, _isBuyFee);\\n    }\\n\\n    /// Removes a fee based on a fee id and a flag if it should be removed as buy fee or sell fee\\n    /// @param _id fee id\\n    /// @param _isBuyFee flag if fee id should be processed as buy fee or sell fee\\n    function _removeFee(bytes32 _id, bool _isBuyFee) internal {\\n        LibAccessControlEnumerable.checkRole(Constants.ADMIN_ROLE);\\n        ERC20FacetStorage storage s = _store();\\n        if (!_isFee(_id, _isBuyFee)) revert FeeIdNotSet(_id);\\n        bytes32[] storage _fees = _isBuyFee ? s.buyFee : s.sellFee;\\n        for (uint256 i = 0; i < _fees.length; ) {\\n            if (_fees[i] == _id) _fees[i] = _fees[_fees.length - 1];\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        _fees.pop();\\n        emit FeeRemoved(_id, _isBuyFee);\\n    }\\n\\n    /// Transfers the token from one address to another\\n    /// @param _from holder address\\n    /// @param _to receiver address\\n    /// @param _amount amount of tokens to transfer\\n    /// @notice During this process, it will be checked if the provided address are a liquidity pool address and then\\n    ///         being marked as a buy transfer or sell transfer. During a buy or sell, desired fees will be charged.\\n    ///         But only if non of the addresses is excluded from the fees and the router is set. Since swapping tokens\\n    ///         during a buy process, it will be only done in a sell process. The charged fees are getting cut of from\\n    ///         the initial amount of tokens and the rest is getting transfered.\\n    function _transfer(address _from, address _to, uint256 _amount) internal override returns (bool) {\\n        ERC20FacetStorage storage s = _store();\\n        bool isBuy = s.lps[_from];\\n        bool isSell = s.lps[_to];\\n        if ((isBuy || isSell) && !s.excludes[_from] && !s.excludes[_to]) {\\n            uint256 _totalFee = 0;\\n            bytes32[] storage _fees = isBuy ? s.buyFee : s.sellFee;\\n            for (uint256 i = 0; i < _fees.length; ) {\\n                (, uint256 _singleFee, ) = LibFeeStore.calcFeesRelative(_fees[i], _amount);\\n                LibFeeStore.putFees(_fees[i], _singleFee);\\n                _totalFee += _singleFee;\\n                unchecked {\\n                    i++;\\n                }\\n            }\\n            if (_totalFee > 0) {\\n                super._transfer(_from, address(this), _totalFee);\\n                _amount -= _totalFee;\\n            }\\n        }\\n        return super._transfer(_from, _to, _amount);\\n    }\\n\\n    /// Internal method to burn a specified amount of tokens for an address\\n    /// @param _from address to burn from\\n    /// @param _amount amount to burn\\n    /// @return Returns true is it succeeds\\n    /// @dev It checks if there is an exceeded amount of tokens tried to be burned for a specific bridge\\n    function _burnFrom(address _from, uint256 _amount) internal returns (bool) {\\n        ERC20FacetStorage storage s = _store();\\n        if (s.bridges[msg.sender].cap > 0 || s.bridges[msg.sender].total > 0) {\\n            if (_amount > s.bridges[msg.sender].total) revert BridgeSupplyExceeded(_amount, s.bridges[msg.sender].total);\\n            unchecked {\\n                s.bridges[msg.sender].total -= _amount;\\n            }\\n        }\\n        _decreaseAllowance(_from, msg.sender, _amount);\\n        _burn(_from, _amount);\\n        return true;\\n    }\\n\\n    /// ERC20 hook, called before all transfers including mint and burn\\n    /// @param from sender of tokens\\n    /// @param to receiver of tokens\\n    /// @param amount quantity of tokens transferred\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal override whenNotPaused {\\n        super._beforeTokenTransfer(from, to, amount);\\n    }\\n\\n    /// @dev Store\\n    function _store() internal pure returns (ERC20FacetStorage storage _s) {\\n        bytes32 slot = ERC20_FACET_STORAGE_SLOT;\\n        assembly {\\n            _s.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4cedb0eba5ad33f2785e527694c46afc8627cb82f22fe01a5f2b7f50bc420ce1\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/helpers/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nlibrary Constants {\\n    /*-------------------------------- Role --------------------------------*/\\n    // 0x0000000000000000000000000000000000000000000000000000000000000000\\n    bytes32 constant DEFAULT_ADMIN_ROLE = 0x00;\\n    // 0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775\\n    bytes32 constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    // 0xfc425f2263d0df187444b70e47283d622c70181c5baebb1306a01edba1ce184c\\n    bytes32 constant DEPLOYER_ROLE = keccak256(\\\"DEPLOYER_ROLE\\\");\\n    // 0x6c0757dc3e6b28b2580c03fd9e96c274acf4f99d91fbec9b418fa1d70604ff1c\\n    bytes32 constant FEE_MANAGER_ROLE = keccak256(\\\"FEE_MANAGER_ROLE\\\");\\n    // 0x63eb04268b235ac1afacf3bcf4b19c5c175d0417a1555fb3ff79ae190f71ee7c\\n    bytes32 constant FEE_STORE_MANAGER_ROLE = keccak256(\\\"FEE_STORE_MANAGER_ROLE\\\");\\n    // 0x77f52ccf2f32e71a0cff8f14ad8c8303b7d2e4c7609b8fba963114f4db2af767\\n    bytes32 constant FEE_DISTRIBUTOR_PUSH_ROLE = keccak256(\\\"FEE_DISTRIBUTOR_PUSH_ROLE\\\");\\n    // 0xe85d5f1f8338cb18f500856d1568d0f3b0d0971f25b3ccd134475e991354edbf\\n    bytes32 constant FEE_DISTRIBUTOR_MANAGER = keccak256(\\\"FEE_DISTRIBUTOR_MANAGER\\\");\\n    /*----------------------------------------------------------------------*/\\n\\n    /*------------------------------- Fee ID -------------------------------*/\\n    // 0xacfc432e98ad100d9f8c385f3782bc88a17e1de7e53f69678cbcc41e8ffe72b0\\n    bytes32 constant ERC20_MARKETING_FEE = keccak256(\\\"ERC20_MARKETING_FEE\\\");\\n    // 0x6b78196f16f828b24a5a6584d4a1bcc5ce2f3154ba57839db273e6a4ebbe92c2\\n    bytes32 constant ERC20_REWARD_FEE = keccak256(\\\"ERC20_REWARD_FEE\\\");\\n    // 0x6e3678bee6f77c8a6179922c9a518b08407e6d9d2593ac683a87c979c8b31a12\\n    bytes32 constant ERC20_PLATFORM_FEE = keccak256(\\\"ERC20_PLATFORM_FEE\\\");\\n    // 0x6e2178bb28988b4c92cd3092e9e342e7639bfda2f68a02ac478cb084759607cf\\n    bytes32 constant ERC20_DEVELOPER_FEE = keccak256(\\\"ERC20_DEVELOPER_FEE\\\");\\n    /*----------------------------------------------------------------------*/\\n\\n    /*--------------------------- Relayer Actions --------------------------*/\\n    // 0xf145583e6e33d9da99af75b579493b11db4229a339336b82c748312f152b29a9\\n    bytes32 constant RELAYER_ACTION_DEPLOY_FEES = keccak256(\\\"RELAYER_ACTION_DEPLOY_FEES\\\");\\n    // 0xf375f410a0dc135af0d9a16e273eac999064981d8813a68af762e93567a43aac\\n    bytes32 constant RELAYER_ACTION_DEPLOY_FEES_CONFIRM = keccak256(\\\"RELAYER_ACTION_DEPLOY_FEES_CONFIRM\\\");\\n    // 0x9d62257b25ea052fe7cd5123fd6b791268b8673b073aae5de4a823c4dc7d7607\\n    bytes32 constant RELAYER_ACTION_SEND_FEES = keccak256(\\\"RELAYER_ACTION_SEND_FEES\\\");\\n    /*----------------------------------------------------------------------*/\\n}\\n\",\"keccak256\":\"0xf3b8807f72ec8424169fae2f19263439859ede025a6adf2a85060b8c9a8f94a6\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/helpers/Enums.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/// enums\\nenum FeeCurrency {\\n    Null,\\n    // L1\\n    Native,\\n    // different asset\\n    Token\\n}\\n\\nenum FeeType {\\n    Null,\\n    // absolute/onetime\\n    Default,\\n    // buy/sell depending on target\\n    From,\\n    // buy/sell depending on target\\n    To\\n}\\n\\nenum FeeSyncAction {\\n    Null,\\n    // adding a fee\\n    Add,\\n    // updating a fee\\n    Update,\\n    // removing a fee\\n    Delete\\n}\\n\\nenum FeeDeployState {\\n    Null,\\n    // a fee is recently added, updated or removed\\n    Queued,\\n    // a fee config is deployed\\n    Pending,\\n    // a fee gets receives information about being deployed\\n    Deployed\\n}\\n\",\"keccak256\":\"0x0c969525e1a2602179c6b12648cd070a7850be970ae4845b2857d1e888799873\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/helpers/GenericErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nerror AddressZero();\\nerror ZeroValueNotAllowed();\\nerror InsufficientAllowance();\\nerror InsufficientBalance();\\nerror InsufficientFunds();\\nerror NotAllowed();\\nerror AlreadyInitialized();\\nerror NoReetrancy();\\nerror WrongChain();\\nerror UnexpectedBalance();\\nerror FailToSendNative();\\nerror MissingData();\\n\",\"keccak256\":\"0x51f03c4271fb3d96ec8521c1d058831b0851fc703583c3385ff2440b32a8d738\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/helpers/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport { FeeCurrency, FeeType, FeeSyncAction, FeeDeployState } from \\\"./Enums.sol\\\";\\n\\n/// General Fee Config\\n\\nstruct FeeConfig {\\n    // relative: 10000 = 1% or 100 = 0.01%\\n    // absolute: 10000 = 1 or 1 = 0.0001\\n    uint256 fee;\\n    // Assets are always going to the fee distributor on the home chain. This config is necessary to define which receiver gets this asset.\\n    // It's purpose can be overwritten by the FeeDistributor. So it will serve as a fallback.\\n    address receiver;\\n    // defines the type. It does not have a purpose yet but may have in the future\\n    // see {Enums->FeeType}\\n    FeeType ftype;\\n    // type of how the fees should be handles\\n    // see {Enums->FeeCurrency}\\n    FeeCurrency currency;\\n    // // Deploy state of a fee config\\n    // // see {Enums->FeeDeployState}\\n    // FeeDeployState deployState;\\n}\\n\\n/// Fee Management\\n\\nstruct AddFeeConfigParams {\\n    // fee id which can be defined elsewhere but needs to be a bytes32\\n    bytes32 id;\\n    // see {struct FeeConfig->fee}\\n    uint256 fee;\\n    // see {struct FeeConfig->receiver}\\n    address receiver;\\n    // see {struct FeeConfig->ftype}\\n    FeeType ftype;\\n    // see {struct FeeConfig->currency}\\n    FeeCurrency currency;\\n}\\n\\nstruct UpdateFeeConfigParams {\\n    // see {struct AddFeeConfigParams->id}\\n    bytes32 id;\\n    // see {struct FeeConfig->fee}\\n    uint256 fee;\\n    // see {struct FeeConfig->fee}\\n    address receiver;\\n}\\n\\nstruct RemoveFeeConfigParams {\\n    // see {struct AddFeeConfigParams->id}\\n    bytes32 id;\\n}\\n\\n/// Chain Management\\n\\nstruct AddChainParams {\\n    // chain id\\n    uint256 chainId;\\n    // address of the participant, most likely the diamon address of the target chain\\n    address target;\\n}\\nstruct RemoveChainParams {\\n    // chain id\\n    uint256 chainId;\\n}\\n\\n/// Fee & Chain Management\\n\\nstruct AssignFeeConfigToChainParams {\\n    // fee config id\\n    bytes32 id;\\n    // chain id to assign the fee config id to\\n    uint256 chainId;\\n}\\nstruct UnassignFeeConfigFromChainParams {\\n    // fee config id\\n    bytes32 id;\\n    // chain id to unassign the fee config id from\\n    uint256 chainId;\\n}\\nstruct UnassignFeeConfigFromAllChainsParams {\\n    // fee config id\\n    bytes32 id;\\n}\\n\\n/// Syncing\\n\\nstruct FeeSyncQueue {\\n    // fee config id\\n    bytes32 id;\\n    // chain id\\n    uint256 chainId;\\n    // action to execute on the target chain\\n    FeeSyncAction action;\\n}\\n\\nstruct FeeConfigDeployState {\\n    bytes32 id;\\n    FeeDeployState state;\\n}\\n\\n/// Data Transfer Objects\\n\\nstruct FeeConfigSyncDTO {\\n    // fee config id\\n    bytes32 id;\\n    // fee value\\n    uint256 fee;\\n    // address to make conditional charged based on a specific token\\n    // a contract can decide by itself whether to it or not\\n    // if defined and used, this fee should be restricted and charged onto a specific token\\n    address target;\\n    // desired action to execute on the target chain\\n    FeeSyncAction action;\\n}\\nstruct FeeConfigSyncHomeFees {\\n    // fee config id\\n    bytes32 id;\\n    // amount of the collected fees of this if\\n    uint256 amount;\\n}\\nstruct FeeConfigSyncHomeDTO {\\n    // total amount of collected fees\\n    uint256 totalFees;\\n    // address of the bounty receiver on the home chain\\n    address bountyReceiver;\\n    // containing fee information that will moved to the home chain\\n    FeeConfigSyncHomeFees[] fees;\\n}\\n\\nstruct CelerRelayerData {\\n    // bytes32 hash which defined the action that should be taken\\n    bytes32 what;\\n    // address of the contract which what is being executed to\\n    address target;\\n    // encoded message of the desired scope\\n    bytes message;\\n}\\n\\n/// Fee Store\\n\\nstruct FeeStoreConfig {\\n    // fee config id\\n    bytes32 id;\\n    // fee\\n    uint256 fee;\\n    // address of the contract which what is being executed to\\n    address target;\\n    // flag for being markes as deleted\\n    bool deleted;\\n}\\n\\n/// Fee Distributor\\n\\nstruct AddReceiverParams {\\n    // public name for the receiver\\n    // can be \\\"Staking\\\", \\\"Liquidity Backing\\\" or whatever\\n    string name;\\n    // potion of share in points. Points will be summarized in the distribution to calculate the relative share\\n    uint64 points;\\n    // address of the contract/account that receives the share\\n    address account;\\n    // swap path in case a share receiver expects another token then the intermediate token of the bridge\\n    address[] swapPath;\\n}\\n\",\"keccak256\":\"0x4ce7534af69a6112e17237cd7b86f9c679ce510d363025c6a946ddd27a61527d\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {\\n        Add,\\n        Replace,\\n        Remove\\n    }\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(FacetCut[] calldata _diamondCut, address _init, bytes calldata _calldata) external;\\n\\n}\\n\",\"keccak256\":\"0xdba8e16a753e5a3784e4b71829599952c9647a1185513a288275e31f6d0df983\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/interfaces/IERC20Facet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.19;\\n\\n/// @title ERC20 Facet Interface\\n/// @author Daniel <danieldegendev@gmail.com>\\ninterface IERC20Facet {\\n    /// Minting an amount of tokens for a designated receiver\\n    /// @param _to receiver address of the token\\n    /// @param _amount receiving amount\\n    /// @return _success Returns true is operation succeeds\\n    /// @notice It allows to mint specified amount until the bridge supply cap is reached\\n    function mint(address _to, uint256 _amount) external returns (bool _success);\\n\\n    /// Burning an amount of tokens from sender\\n    /// @param _amount burnable amount\\n    /// @return _success Returns true is operation succeeds\\n    /// @notice It allows to burn a bridge supply until its supply is 0, even if the cap is already set to 0\\n    function burn(uint256 _amount) external returns (bool _success);\\n\\n    /// Burning an amount of tokens from a designated holder\\n    /// @param _from holder address to burn the tokens from\\n    /// @param _amount burnable amount\\n    /// @return _success Returns true is operation succeeds\\n    /// @notice It allows to burn a bridge supply until its supply is 0, even if the cap is already set to 0\\n    function burn(address _from, uint256 _amount) external returns (bool _success);\\n\\n    /// Burning an amount of tokens from a designated holder\\n    /// @param _from holder address to burn the tokens from\\n    /// @param _amount burnable amount\\n    /// @return _success Returns true is operation succeeds\\n    /// @notice It allows to burn a bridge supply until its supply is 0, even if the cap is already set to 0\\n    function burnFrom(address _from, uint256 _amount) external returns (bool _success);\\n\\n    /// @notice This enables the transfers of this tokens\\n    function enable() external;\\n\\n    /// @notice This disables the transfers of this tokens\\n    function disable() external;\\n\\n    /// Exclude an account from being charged on fees\\n    /// @param _account address to exclude\\n    function excludeAccountFromTax(address _account) external;\\n\\n    /// Includes an account againt to pay fees\\n    /// @param _account address to include\\n    function includeAccountForTax(address _account) external;\\n\\n    /// Adds a liquidity pool address\\n    /// @param _lp address of the liquidity pool of the token\\n    function addLP(address _lp) external;\\n\\n    /// Removes a liquidity pool address\\n    /// @param _lp address of the liquidity pool of the token\\n    function removeLP(address _lp) external;\\n\\n    /// Returns the existence of an lp address\\n    /// @return _has has lp or not\\n    function hasLP(address _lp) external view returns (bool _has);\\n\\n    /// Adds a buy fee based on a fee id\\n    /// @param _id fee id\\n    function addBuyFee(bytes32 _id) external;\\n\\n    /// Adds a sell fee based on a fee id\\n    /// @param _id fee id\\n    function addSellFee(bytes32 _id) external;\\n}\\n\",\"keccak256\":\"0x00bf7470919151562428f5a6fb6595a4311e9d47480f526f0a06fc105c4f5022\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/libraries/LibAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nlibrary LibAccessControlEnumerable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    bytes32 constant ACCESS_CONTROL_STORAGE_POSITION = keccak256(\\\"degenx.access.control.storage\\\");\\n\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct AccessControlStorage {\\n        mapping(bytes32 => RoleData) roles;\\n        mapping(bytes32 => EnumerableSet.AddressSet) roleMembers;\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    function accessControlStorage() internal pure returns (AccessControlStorage storage acs) {\\n        bytes32 position = ACCESS_CONTROL_STORAGE_POSITION;\\n        assembly {\\n            acs.slot := position\\n        }\\n    }\\n\\n    function checkRole(bytes32 role) internal view {\\n        checkRole(role, msg.sender);\\n    }\\n\\n    function checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    function hasRole(bytes32 role, address account) internal view returns (bool) {\\n        AccessControlStorage storage acs = accessControlStorage();\\n        return acs.roles[role].members[account];\\n    }\\n\\n    function grantRole(bytes32 role, address account) internal {\\n        AccessControlStorage storage acs = accessControlStorage();\\n        if (!hasRole(role, account)) {\\n            acs.roles[role].members[account] = true;\\n            emit RoleGranted(role, account, msg.sender);\\n            acs.roleMembers[role].add(account);\\n        }\\n    }\\n\\n    function revokeRole(bytes32 role, address account) internal {\\n        AccessControlStorage storage acs = accessControlStorage();\\n        if (hasRole(role, account)) {\\n            acs.roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, msg.sender);\\n            acs.roleMembers[role].remove(account);\\n        }\\n    }\\n\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        AccessControlStorage storage acs = accessControlStorage();\\n        bytes32 previousAdminRole = acs.roles[role].adminRole;\\n        acs.roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n}\\n\",\"keccak256\":\"0xd72f7b388e9d30e2f0dfeaf2dabf1f85785802488695de9b6db540744c7179f3\",\"license\":\"MIT\"},\"contracts/diamond/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nerror InitializationFunctionReverted(address _initializationContractAddress, bytes _calldata);\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(IDiamondCut.FacetCut[] memory _diamondCut, address _init, bytes memory _calldata) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            return;\\n        }\\n        enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n        (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n        if (!success) {\\n            if (error.length > 0) {\\n                // bubble up error\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(error)\\n                    revert(add(32, error), returndata_size)\\n                }\\n            } else {\\n                revert InitializationFunctionReverted(_init, _calldata);\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x22e1650fca62f0c94db7837d9d4fc9b658229a64d5e0d6eb42053f72b61f3313\",\"license\":\"MIT\"},\"contracts/diamond/libraries/LibFeeStore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.17;\\n\\nimport { IERC20Metadata } from \\\"@solidstate/contracts/token/ERC20/metadata/IERC20Metadata.sol\\\";\\nimport { SafeERC20 } from \\\"@solidstate/contracts/utils/SafeERC20.sol\\\";\\nimport { IERC20 } from \\\"@solidstate/contracts/interfaces/IERC20.sol\\\";\\n\\nimport { LibFeeStoreStorage } from \\\"./LibFeeStoreStorage.sol\\\";\\nimport { ZeroValueNotAllowed, NotAllowed } from \\\"./../helpers/GenericErrors.sol\\\";\\nimport { FeeStoreConfig, FeeConfigSyncHomeDTO, FeeConfigSyncHomeFees } from \\\"./../helpers/Structs.sol\\\";\\n\\n/// @title Fee Store Library\\n/// @author Daniel <danieldegendev@gmail.com>\\n/// @notice Functions to help with the fee store for other instances\\nlibrary LibFeeStore {\\n    using SafeERC20 for IERC20;\\n    uint256 constant BPS_DENOMINATOR = 10 ** 4;\\n\\n    error ZeroFees();\\n    error FeeNotExisting(bytes32 id);\\n    error FeeExists(bytes32 id);\\n\\n    event FeeConfigAdded(bytes32 indexed id);\\n    event FeeConfigUpdated(bytes32 indexed id);\\n    event FeeConfigDeleted(bytes32 indexed id);\\n    event FeeConfigMarkedAsDeleted(bytes32 indexed id);\\n    event FeesPrepared(uint256 amount, FeeConfigSyncHomeDTO candidate);\\n\\n    /// Store a specific amount of fees in the store\\n    /// @param _feeConfigId fee config id\\n    /// @param _amount amount of tokens\\n    function putFees(bytes32 _feeConfigId, uint256 _amount) internal {\\n        if (_amount == 0) revert ZeroValueNotAllowed();\\n        LibFeeStoreStorage.FeeStoreStorage storage s = LibFeeStoreStorage.feeStoreStorage();\\n        FeeStoreConfig memory _config = s.feeConfigs[_feeConfigId];\\n        if (_config.id == bytes32(\\\"\\\")) revert NotAllowed();\\n        s.collectedFees[_config.id] += _amount;\\n        s.collectedFeesTotal += _amount;\\n    }\\n\\n    /// Prepares the fees collected on the store to be send to the home chain\\n    /// @return _dto the dto that will be used on the home chain for receiving and process fees\\n    /// @dev this method will also clean up every fee collected and sets it to 0\\n    function prepareToSendFees() internal returns (FeeConfigSyncHomeDTO memory _dto) {\\n        LibFeeStoreStorage.FeeStoreStorage storage s = LibFeeStoreStorage.feeStoreStorage();\\n        if (s.collectedFeesTotal == 0) revert ZeroFees();\\n\\n        uint256 _feeIndex = 0;\\n        uint256 _noOfExpectedFees = 0;\\n\\n        // get how many fees need to get sent\\n        for (uint256 i = 0; i < s.feeConfigIds.length; ) {\\n            if (s.collectedFees[s.feeConfigIds[i]] > 0) _noOfExpectedFees++;\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        // collect amounts and gathers configs\\n        _dto.fees = new FeeConfigSyncHomeFees[](_noOfExpectedFees);\\n        for (uint256 i = 0; i < s.feeConfigIds.length; ) {\\n            bytes32 _id = s.feeConfigIds[i];\\n            if (s.collectedFees[_id] > 0) {\\n                uint256 _amount = s.collectedFees[_id];\\n                s.collectedFees[_id] = 0;\\n                if (s.feeConfigs[_id].deleted) deleteFee(_id);\\n                _dto.totalFees += _amount;\\n                _dto.fees[_feeIndex] = FeeConfigSyncHomeFees({ id: _id, amount: _amount });\\n                unchecked {\\n                    _feeIndex++;\\n                }\\n            }\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        s.collectedFeesTotal = 0;\\n        emit FeesPrepared(_dto.totalFees, _dto);\\n    }\\n\\n    /// Removes a fee from the store\\n    /// @param _id fee id\\n    /// @dev if a fee is still in use, it will be marked as deleted. Once fees get moved to home chain, it will be deleted properly\\n    function deleteFee(bytes32 _id) internal {\\n        LibFeeStoreStorage.FeeStoreStorage storage s = LibFeeStoreStorage.feeStoreStorage();\\n        if (s.feeConfigs[_id].id == bytes32(0)) revert FeeNotExisting(_id);\\n        if (s.collectedFees[_id] > 0) {\\n            s.feeConfigs[_id].deleted = true;\\n            emit FeeConfigMarkedAsDeleted(_id);\\n        } else {\\n            delete s.collectedFees[_id];\\n            delete s.feeConfigs[_id];\\n            for (uint256 i = 0; i < s.feeConfigIds.length; ) {\\n                if (s.feeConfigIds[i] == _id) {\\n                    s.feeConfigIds[i] = s.feeConfigIds[s.feeConfigIds.length - 1];\\n                    break;\\n                }\\n                unchecked {\\n                    i++;\\n                }\\n            }\\n            s.feeConfigIds.pop();\\n            emit FeeConfigDeleted(_id);\\n        }\\n    }\\n\\n    /// Adds a fee to the store\\n    /// @param _id fee id\\n    /// @param _fee fee value\\n    /// @param _target the target address\\n    function addFee(bytes32 _id, uint256 _fee, address _target) internal {\\n        LibFeeStoreStorage.FeeStoreStorage storage s = LibFeeStoreStorage.feeStoreStorage();\\n        if (s.feeConfigs[_id].id != bytes32(0)) revert FeeExists(_id);\\n        s.feeConfigs[_id] = FeeStoreConfig({ id: _id, fee: _fee, target: _target, deleted: false });\\n        s.feeConfigIds.push(_id);\\n        emit FeeConfigAdded(_id);\\n    }\\n\\n    /// Updates a fee on the store\\n    /// @param _id fee id\\n    /// @param _fee fee value\\n    /// @param _target the target address\\n    function updateFee(bytes32 _id, uint256 _fee, address _target) internal {\\n        LibFeeStoreStorage.FeeStoreStorage storage s = LibFeeStoreStorage.feeStoreStorage();\\n        if (s.feeConfigs[_id].id == bytes32(0)) revert FeeNotExisting(_id);\\n        s.feeConfigs[_id] = FeeStoreConfig({ id: _id, fee: _fee, target: _target, deleted: false });\\n        emit FeeConfigUpdated(_id);\\n    }\\n\\n    /// viewables\\n\\n    /// Calculates the relative fee based on the inserted amount\\n    /// @param _feeConfigId fee config id\\n    /// @param _amount amount that fees are based on\\n    /// @return _amountNet amount excluding fee\\n    /// @return _fee amount of fee\\n    /// @return _feePoints fee value that is applied\\n    function calcFeesRelative(\\n        bytes32 _feeConfigId,\\n        uint256 _amount\\n    ) internal view returns (uint256 _amountNet, uint256 _fee, uint256 _feePoints) {\\n        if (_amount == 0) revert ZeroValueNotAllowed();\\n        LibFeeStoreStorage.FeeStoreStorage storage s = LibFeeStoreStorage.feeStoreStorage();\\n        FeeStoreConfig memory _config = s.feeConfigs[_feeConfigId];\\n        if (_config.id == bytes32(\\\"\\\")) return (_amount, 0, 0);\\n        _feePoints = _config.fee;\\n        _fee = ((_amount * _feePoints) / BPS_DENOMINATOR);\\n        _amountNet = _amount - _fee;\\n    }\\n\\n    function getOperator() internal view returns (address _operator) {\\n        LibFeeStoreStorage.FeeStoreStorage storage s = LibFeeStoreStorage.feeStoreStorage();\\n        _operator = s.operator;\\n    }\\n\\n    function setOperator(address _operator) internal {\\n        LibFeeStoreStorage.FeeStoreStorage storage s = LibFeeStoreStorage.feeStoreStorage();\\n        s.operator = _operator;\\n    }\\n\\n    function getIntermediateAsset() internal view returns (address _intermediateAsset) {\\n        LibFeeStoreStorage.FeeStoreStorage storage s = LibFeeStoreStorage.feeStoreStorage();\\n        _intermediateAsset = s.intermediateAsset;\\n    }\\n\\n    function setIntermediateAsset(address _intermediateAsset) internal {\\n        LibFeeStoreStorage.FeeStoreStorage storage s = LibFeeStoreStorage.feeStoreStorage();\\n        s.intermediateAsset = _intermediateAsset;\\n    }\\n}\\n\",\"keccak256\":\"0x1f4a5e852d4963f4dc3f771e01aa98b5afdc621167009c6a85e19a0a3e7119fb\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/libraries/LibFeeStoreStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.19;\\n\\nimport { FeeStoreConfig } from \\\"./../helpers/Structs.sol\\\";\\n\\nlibrary LibFeeStoreStorage {\\n    bytes32 constant FEE_STORE_STORAGE_POSITION = keccak256(\\\"degenx.fee-store.storage.v1\\\");\\n\\n    struct FeeStoreStorage {\\n        // feeConfigId => FeeStoreConfig\\n        mapping(bytes32 => FeeStoreConfig) feeConfigs;\\n        // feeConfigId => amount of fees collected\\n        mapping(bytes32 => uint256) collectedFees;\\n        // represents a sum of each amount in collectedFees\\n        uint256 collectedFeesTotal;\\n        bytes32[] feeConfigIds;\\n        address operator;\\n        address intermediateAsset;\\n    }\\n\\n    function feeStoreStorage() internal pure returns (FeeStoreStorage storage fss) {\\n        bytes32 position = FEE_STORE_STORAGE_POSITION;\\n        assembly {\\n            fss.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x397c3b0f45509218df7e843804c84408b399b33bdc7cd29e30e2366f3c1d5a5d\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613501806100206000396000f3fe608060405234801561001057600080fd5b50600436106102ad5760003560e01c80637ecebe001161017b578063a3907d71116100d8578063d505accf1161008c578063ddf731f311610071578063ddf731f31461065e578063f92dbdba14610671578063fe51f31f1461068457600080fd5b8063d505accf14610638578063dd62ed3e1461064b57600080fd5b8063a9059cbb116100bd578063a9059cbb14610532578063cba0e99614610545578063ced67f0c1461059d57600080fd5b8063a3907d7114610517578063a457c2d71461051f57600080fd5b806390aefc1c1161012f57806395d89b411161011457806395d89b41146104fc5780639dc29fac146104055780639ed152451461050457600080fd5b806390aefc1c146104d65780639213a4f8146104e957600080fd5b806384909ea51161016057806384909ea514610483578063893d20e81461049657806389da7deb146104c357600080fd5b80637ecebe00146104185780637f135b811461042b57600080fd5b80633644e515116102295780634ce2f71a116101dd578063685fc568116101c2578063685fc568146103ea57806370a08231146103f257806379cc67901461040557600080fd5b80634ce2f71a146103cf5780635c975abb146103e257600080fd5b806340c10f191161020e57806340c10f191461039657806342966c68146103a957806343f6237d146103bc57600080fd5b80633644e5151461037b578063395093511461038357600080fd5b806323b872dd116102805780632b53ecac116102655780632b53ecac146103465780632f2770db14610359578063313ce5671461036157600080fd5b806323b872dd1461031e57806323c9d2831461033157600080fd5b80630644e757146102b257806306fdde03146102d0578063095ea7b3146102e557806318160ddd14610308575b600080fd5b6102ba610697565b6040516102c79190612dfa565b60405180910390f35b6102d8610712565b6040516102c79190612e62565b6102f86102f3366004612edc565b610721565b60405190151581526020016102c7565b610310610737565b6040519081526020016102c7565b6102f861032c366004612f06565b610761565b61034461033f366004612f42565b610776565b005b610344610354366004612f5b565b610784565b610344610872565b6103696108a5565b60405160ff90911681526020016102c7565b6103106108d2565b6102f8610391366004612edc565b6108dc565b6102f86103a4366004612edc565b6108e8565b6102f86103b7366004612f42565b610a26565b6102f86103ca366004612f42565b610a3a565b6103446103dd366004612edc565b610a47565b6102f8610b7d565b6102ba610baa565b610310610400366004612f5b565b610c23565b6102f8610413366004612edc565b610c2e565b610310610426366004612f5b565b610c3a565b6102f8610439366004612f5b565b73ffffffffffffffffffffffffffffffffffffffff1660009081527fc8f7dfac638e857624415a075d01235f7df510bb816c173d8446a45c20e71527602052604090205460ff1690565b6102f8610491366004612f42565b610c45565b61049e610c52565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016102c7565b6103446104d1366004612f5b565b610c92565b6103446104e4366004612f42565b610d78565b6103446104f7366004612f5b565b610d83565b6102d8610e6c565b610344610512366004612fd0565b610e76565b61034461102e565b6102f861052d366004612edc565b61105f565b6102f8610540366004612edc565b61106b565b6102f8610553366004612f5b565b73ffffffffffffffffffffffffffffffffffffffff1660009081527fc8f7dfac638e857624415a075d01235f7df510bb816c173d8446a45c20e71528602052604090205460ff1690565b61061d6105ab366004612f5b565b6040805180820182526000808252602091820181905273ffffffffffffffffffffffffffffffffffffffff9390931683527fc8f7dfac638e857624415a075d01235f7df510bb816c173d8446a45c20e7152a815291819020815180830190925280548252600101549181019190915290565b604080518251815260209283015192810192909252016102c7565b610344610646366004613051565b611078565b6103106106593660046130bb565b611090565b61034461066c366004612f5b565b6110e9565b61034461067f366004612f42565b6111d2565b610344610692366004612f42565b6111dd565b606060007fc8f7dfac638e857624415a075d01235f7df510bb816c173d8446a45c20e715246001810180546040805160208084028201810190925282815293945083018282801561070757602002820191906000526020600020905b8154815260200190600101908083116106f3575b505050505091505090565b606061071c6111e8565b905090565b600061072e338484611299565b90505b92915050565b600061071c7fc991b2e918acaba8e5721668ed0b1982684e5a8692a621bcd2d7ef326bb015b65490565b600061076e8484846113c8565b949350505050565b6107818160016113eb565b50565b6107ad7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756115bc565b73ffffffffffffffffffffffffffffffffffffffff811660008181527fc8f7dfac638e857624415a075d01235f7df510bb816c173d8446a45c20e71528602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905590519182527fc8f7dfac638e857624415a075d01235f7df510bb816c173d8446a45c20e71524917fc9f1a79cfd1f156e651e184f5e583f9886a3d9b9de7429187e15b88a2f7f91eb91015b60405180910390a15050565b61089b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756115bc565b6108a36115c6565b565b600061071c7f2967a798b92539a1b9eefe4d8eb931f96b68d27665e276f1bee2d5db7f7430495460ff1690565b600061071c6116a2565b600061072e83836116e4565b3360009081527fc8f7dfac638e857624415a075d01235f7df510bb816c173d8446a45c20e7152a60205260408120547fc8f7dfac638e857624415a075d01235f7df510bb816c173d8446a45c20e71524908203610971576040517f3d693ada00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360009081526006820160205260408120600101805485929061099590849061311d565b9091555050336000908152600682016020526040902080546001909101541115610a1257336000908152600682016020526040908190205490517f704879da000000000000000000000000000000000000000000000000000000008152610a09918591600401918252602082015260400190565b60405180910390fd5b610a1c848461177d565b5060019392505050565b6000610a3233836118bd565b506001919050565b6000610731826001611a2f565b610a707fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756115bc565b73ffffffffffffffffffffffffffffffffffffffff82163b610ad6576040517f3dde7ef400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83166004820152602401610a09565b73ffffffffffffffffffffffffffffffffffffffff821660008181527fc8f7dfac638e857624415a075d01235f7df510bb816c173d8446a45c20e7152a60209081526040918290208490558151928352820183905280517fc8f7dfac638e857624415a075d01235f7df510bb816c173d8446a45c20e71524927f59e1e4348943de408b89af8ab71e502ea722dd41efd1ff4a3548c60e83e91c6092908290030190a1505050565b600061071c7f68721c0bbf2c02a4d65000340d1370666be06a630022208d4baa9bd7a4b6fea85460ff1690565b606060007fc8f7dfac638e857624415a075d01235f7df510bb816c173d8446a45c20e715246002810180546040805160208084028201810190925282815293945083018282801561070757602002820191906000526020600020908154815260200190600101908083116106f357505050505091505090565b600061073182611ab1565b600061072e8383611b01565b600061073182611c17565b6000610731826000611a2f565b600061071c7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c13205473ffffffffffffffffffffffffffffffffffffffff1690565b610cbb7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756115bc565b73ffffffffffffffffffffffffffffffffffffffff811660008181527fc8f7dfac638e857624415a075d01235f7df510bb816c173d8446a45c20e71527602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905590519182527fc8f7dfac638e857624415a075d01235f7df510bb816c173d8446a45c20e71524917f6f0997ee5359e936f5c9d5bebe9d14d40be46bb6c738d8198382f80d6b6598e69101610866565b610781816000611c3f565b610dac7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756115bc565b73ffffffffffffffffffffffffffffffffffffffff811660008181527fc8f7dfac638e857624415a075d01235f7df510bb816c173d8446a45c20e71528602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905590519182527fc8f7dfac638e857624415a075d01235f7df510bb816c173d8446a45c20e71524917f7343931cbac86af38c05ceadc3785d4002142c4d65b190173df002c4dcff2acf9101610866565b606061071c611dd5565b610e9f7ffc425f2263d0df187444b70e47283d622c70181c5baebb1306a01edba1ce184c6115bc565b7fc8f7dfac638e857624415a075d01235f7df510bb816c173d8446a45c20e71524805460ff1615610f2c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f696e697469616c697a65640000000000000000000000000000000000000000006044820152606401610a09565b610f346115c6565b610f7386868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611e0692505050565b610fb284848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611e3592505050565b7f2967a798b92539a1b9eefe4d8eb931f96b68d27665e276f1bee2d5db7f74304980547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff841617905580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555050505050565b6110577fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756115bc565b6108a3611e60565b600061072e8383611f32565b600061072e338484611f48565b611087878787878787876120fc565b50505050505050565b73ffffffffffffffffffffffffffffffffffffffff80831660009081527fc991b2e918acaba8e5721668ed0b1982684e5a8692a621bcd2d7ef326bb015b56020908152604080832093851683529290529081205461072e565b6111127fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756115bc565b73ffffffffffffffffffffffffffffffffffffffff811660008181527fc8f7dfac638e857624415a075d01235f7df510bb816c173d8446a45c20e71527602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905590519182527fc8f7dfac638e857624415a075d01235f7df510bb816c173d8446a45c20e71524917f3b37c1b5c073be5b3a4b155132f3c927eab9305e970b95b36fd4201b3304e83e9101610866565b610781816001611c3f565b6107818160006113eb565b60607f2967a798b92539a1b9eefe4d8eb931f96b68d27665e276f1bee2d5db7f743047805461121690613130565b80601f016020809104026020016040519081016040528092919081815260200182805461124290613130565b801561128f5780601f106112645761010080835404028352916020019161128f565b820191906000526020600020905b81548152906001019060200180831161127257829003601f168201915b5050505050905090565b600073ffffffffffffffffffffffffffffffffffffffff84166112e8576040517f5a68b7ab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8316611335576040517fc524160000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff84811660008181527fc991b2e918acaba8e5721668ed0b1982684e5a8692a621bcd2d7ef326bb015b56020908152604080832094881680845294825291829020869055815186815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a35060019392505050565b60006113d584338461231d565b6113e0848484611f48565b506001949350505050565b6114147fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756115bc565b7fc8f7dfac638e857624415a075d01235f7df510bb816c173d8446a45c20e715247f1ef17e9a165a4e1a08bf7c7a70090c7711ef4b97027937554becb896058c66898361148d576040517f6a36dceb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008481526020829052604090205484146114d7576040517f542226c200000000000000000000000000000000000000000000000000000000815260048101859052602401610a09565b6000836114e757826002016114ec565b826001015b905060005b815481101561155a578582828154811061150d5761150d613183565b906000526020600020015403611552576040517feda84b7500000000000000000000000000000000000000000000000000000000815260048101879052602401610a09565b6001016114f1565b508054600181018255600082815260209020018590556040517fb30104422085626dc8352b4b2503aa2c9a7ae402c5d71cc2b71690a2075ee9a5906115ad90879087909182521515602082015260400190565b60405180910390a15050505050565b61078181336123bd565b7f68721c0bbf2c02a4d65000340d1370666be06a630022208d4baa9bd7a4b6fea85460ff1615611622576040517f059519da00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f68721c0bbf2c02a4d65000340d1370666be06a630022208d4baa9bd7a4b6fea880547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258906020015b60405180910390a1565b4660009081527fbb9c3660b51e1fafa886fcf600a68efa81371bd50359eccba98f0c4fff2cfeba6020526040812054908190036116e15761071c612496565b90565b3360009081527fc991b2e918acaba8e5721668ed0b1982684e5a8692a621bcd2d7ef326bb015b56020908152604080832073ffffffffffffffffffffffffffffffffffffffff86168452909152812054828101811115611770576040517fd256efb100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61076e3385858401611299565b73ffffffffffffffffffffffffffffffffffffffff82166117ca576040517fda007acd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6117d660008383612560565b7fc991b2e918acaba8e5721668ed0b1982684e5a8692a621bcd2d7ef326bb015b680547fc991b2e918acaba8e5721668ed0b1982684e5a8692a621bcd2d7ef326bb015b491839160009061182b90849061311d565b909155505073ffffffffffffffffffffffffffffffffffffffff83166000908152602082905260408120805484929061186590849061311d565b909155505060405182815273ffffffffffffffffffffffffffffffffffffffff8416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff821661190a576040517ff1e2c4ee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61191682600083612560565b73ffffffffffffffffffffffffffffffffffffffff821660009081527fc991b2e918acaba8e5721668ed0b1982684e5a8692a621bcd2d7ef326bb015b4602081905260409091205480831115611998576040517fb1d35b2300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8416600090815260208390526040812084830390556002830180548592906119d69084906131b2565b909155505060405183815260009073ffffffffffffffffffffffffffffffffffffffff8616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a350505050565b60007fc8f7dfac638e857624415a075d01235f7df510bb816c173d8446a45c20e715248183611a615781600201611a66565b816001015b905060005b8154811015611aa85785828281548110611a8757611a87613183565b906000526020600020015403611aa05760019350611aa8565b600101611a6b565b50505092915050565b60007fc991b2e918acaba8e5721668ed0b1982684e5a8692a621bcd2d7ef326bb015b45b73ffffffffffffffffffffffffffffffffffffffff909216600090815260209290925250604090205490565b3360009081527fc8f7dfac638e857624415a075d01235f7df510bb816c173d8446a45c20e7152a60205260408120547fc8f7dfac638e857624415a075d01235f7df510bb816c173d8446a45c20e7152490151580611b72575033600090815260068201602052604090206001015415155b15611c0257336000908152600682016020526040902060010154831115611be657336000908152600682016020526040908190206001015490517f704879da000000000000000000000000000000000000000000000000000000008152610a09918591600401918252602082015260400190565b3360009081526006820160205260409020600101805484900390555b611c0d84338561231d565b610a1c84846118bd565b60007fbb9c3660b51e1fafa886fcf600a68efa81371bd50359eccba98f0c4fff2cfeb9611ad5565b611c687fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756115bc565b7fc8f7dfac638e857624415a075d01235f7df510bb816c173d8446a45c20e71524611c938383611a2f565b611ccc576040517f4df39c2200000000000000000000000000000000000000000000000000000000815260048101849052602401610a09565b600082611cdc5781600201611ce1565b816001015b905060005b8154811015611d645784828281548110611d0257611d02613183565b906000526020600020015403611d5c5781548290611d22906001906131b2565b81548110611d3257611d32613183565b9060005260206000200154828281548110611d4f57611d4f613183565b6000918252602090912001555b600101611ce6565b5080805480611d7557611d756131c5565b600190038181906000526020600020016000905590557ff5cacd7e842802d4273885b1beb57040823f1f243e00ce07c1d6d964f7d5b97f8484604051611dc79291909182521515602082015260400190565b60405180910390a150505050565b60607f2967a798b92539a1b9eefe4d8eb931f96b68d27665e276f1bee2d5db7f743047600101805461121690613130565b7f2967a798b92539a1b9eefe4d8eb931f96b68d27665e276f1bee2d5db7f743047611e318282613271565b5050565b7f2967a798b92539a1b9eefe4d8eb931f96b68d27665e276f1bee2d5db7f743048611e318282613271565b7f68721c0bbf2c02a4d65000340d1370666be06a630022208d4baa9bd7a4b6fea85460ff16611ebb576040517f59488a5a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f68721c0bbf2c02a4d65000340d1370666be06a630022208d4baa9bd7a4b6fea880547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa90602001611698565b6000611f3f33848461231d565b50600192915050565b73ffffffffffffffffffffffffffffffffffffffff83811660009081527fc8f7dfac638e857624415a075d01235f7df510bb816c173d8446a45c20e71527602052604080822054928516825281205490917fc8f7dfac638e857624415a075d01235f7df510bb816c173d8446a45c20e715249160ff91821691168180611fcb5750805b8015611fff575073ffffffffffffffffffffffffffffffffffffffff8716600090815260048401602052604090205460ff16155b8015612033575073ffffffffffffffffffffffffffffffffffffffff8616600090815260048401602052604090205460ff16155b156120e65760008083612049578460020161204e565b846001015b905060005b81548110156120c357600061208483838154811061207357612073613183565b90600052602060002001548a6125c1565b509150506120ae83838154811061209d5761209d613183565b9060005260206000200154826126e2565b6120b8818561311d565b935050600101612053565b5081156120e3576120d5893084612831565b506120e082886131b2565b96505b50505b6120f1878787612831565b979650505050505050565b83421115612136576040517fe13df39400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff871660009081527fbb9c3660b51e1fafa886fcf600a68efa81371bd50359eccba98f0c4fff2cfeb9602081815260408084205481517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981528084018d90528083018c9052606081018b90526080810182905260a081018a905260c090204686527fbb9c3660b51e1fafa886fcf600a68efa81371bd50359eccba98f0c4fff2cfeba9093529084205492939192909181900361221f57612208612496565b466000908152600186016020526040902081905590505b6040517f190100000000000000000000000000000000000000000000000000000000000081526002810182905260228101849052604290206000612265828a8a8a612a18565b90508c73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146122cc576040517feae00e5600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8d1660009081526020879052604081208054916122fd8361338b565b919050555061230d8d8d8d611299565b5050505050505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff83811660009081527fc991b2e918acaba8e5721668ed0b1982684e5a8692a621bcd2d7ef326bb015b56020908152604080832093861683529290522054808211156123a9576040517f01c2999e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6123b68484848403611299565b5050505050565b60008281527ff72ca309d9a3d085eca8abc0d0f1efd7a9682e454e7a123eb852dac23bbd2afa6020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16611e315761241c81612b98565b612427836020612bb7565b6040516020016124389291906133c3565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a0000000000000000000000000000000000000000000000000000000008252610a0991600401612e62565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6124c16111e8565b805160209182012060408051808201909152600181527f31000000000000000000000000000000000000000000000000000000000000009201919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc646604080516020810195909552840192909252606083015260808201523060a082015260c00160405160208183030381529060405280519060200120905090565b7f68721c0bbf2c02a4d65000340d1370666be06a630022208d4baa9bd7a4b6fea85460ff16156125bc576040517f059519da00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b600080600083600003612600576040517f9cf8540c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007f1ef17e9a165a4e1a08bf7c7a70090c7711ef4b97027937554becb896058c6689600087815260208281526040918290208251608081018452815480825260018301549382019390935260029091015473ffffffffffffffffffffffffffffffffffffffff8116938201939093527401000000000000000000000000000000000000000090920460ff1615156060830152919250906126ac578560008094509450945050506126db565b602081015192506127106126c08488613444565b6126ca919061345b565b93506126d684876131b2565b945050505b9250925092565b8060000361271c576040517f9cf8540c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007f1ef17e9a165a4e1a08bf7c7a70090c7711ef4b97027937554becb896058c6689600084815260208281526040918290208251608081018452815480825260018301549382019390935260029091015473ffffffffffffffffffffffffffffffffffffffff8116938201939093527401000000000000000000000000000000000000000090920460ff1615156060830152919250906127e9576040517f3d693ada00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805160009081526001830160205260408120805485929061280b90849061311d565b9250508190555082826002016000828254612826919061311d565b909155505050505050565b600073ffffffffffffffffffffffffffffffffffffffff8416612880576040517f68551d5f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff83166128cd576040517f8289914400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6128d8848484612560565b73ffffffffffffffffffffffffffffffffffffffff841660009081527fc991b2e918acaba8e5721668ed0b1982684e5a8692a621bcd2d7ef326bb015b460208190526040909120548084111561295a576040517f7183160b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff80871660009081526020849052604080822087850390559187168152908120805486929061299e90849061311d565b925050819055508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef86604051612a0491815260200190565b60405180910390a350600195945050505050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0821115612a74576040517fe4a61add00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8360ff16601b14158015612a8c57508360ff16601c14155b15612ac3576040517facd54a9000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa158015612b17573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116612b8f576040517f8fe7664e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b95945050505050565b606061073173ffffffffffffffffffffffffffffffffffffffff831660145b60606000612bc6836002613444565b612bd190600261311d565b67ffffffffffffffff811115612be957612be96131f4565b6040519080825280601f01601f191660200182016040528015612c13576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110612c4a57612c4a613183565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612cad57612cad613183565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000612ce9846002613444565b612cf490600161311d565b90505b6001811115612d91577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110612d3557612d35613183565b1a60f81b828281518110612d4b57612d4b613183565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93612d8a81613496565b9050612cf7565b50831561072e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a09565b6020808252825182820181905260009190848201906040850190845b81811015612e3257835183529284019291840191600101612e16565b50909695505050505050565b60005b83811015612e59578181015183820152602001612e41565b50506000910152565b6020815260008251806020840152612e81816040850160208701612e3e565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b803573ffffffffffffffffffffffffffffffffffffffff81168114612ed757600080fd5b919050565b60008060408385031215612eef57600080fd5b612ef883612eb3565b946020939093013593505050565b600080600060608486031215612f1b57600080fd5b612f2484612eb3565b9250612f3260208501612eb3565b9150604084013590509250925092565b600060208284031215612f5457600080fd5b5035919050565b600060208284031215612f6d57600080fd5b61072e82612eb3565b60008083601f840112612f8857600080fd5b50813567ffffffffffffffff811115612fa057600080fd5b602083019150836020828501011115612fb857600080fd5b9250929050565b803560ff81168114612ed757600080fd5b600080600080600060608688031215612fe857600080fd5b853567ffffffffffffffff8082111561300057600080fd5b61300c89838a01612f76565b9097509550602088013591508082111561302557600080fd5b5061303288828901612f76565b9094509250613045905060408701612fbf565b90509295509295909350565b600080600080600080600060e0888a03121561306c57600080fd5b61307588612eb3565b965061308360208901612eb3565b9550604088013594506060880135935061309f60808901612fbf565b925060a0880135915060c0880135905092959891949750929550565b600080604083850312156130ce57600080fd5b6130d783612eb3565b91506130e560208401612eb3565b90509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820180821115610731576107316130ee565b600181811c9082168061314457607f821691505b60208210810361317d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b81810381811115610731576107316130ee565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b601f8211156125bc57600081815260208120601f850160051c8101602086101561324a5750805b601f850160051c820191505b8181101561326957828155600101613256565b505050505050565b815167ffffffffffffffff81111561328b5761328b6131f4565b61329f816132998454613130565b84613223565b602080601f8311600181146132f257600084156132bc5750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555613269565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b8281101561333f57888601518255948401946001909101908401613320565b508582101561337b57878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036133bc576133bc6130ee565b5060010190565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516133fb816017850160208801612e3e565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351613438816028840160208801612e3e565b01602801949350505050565b8082028115828204841417610731576107316130ee565b600082613491577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000816134a5576134a56130ee565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fea26469706673582212209d1e83920af9329f80761705f03a99a8b45e1ba91936ad0692f099625701ce5864736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102ad5760003560e01c80637ecebe001161017b578063a3907d71116100d8578063d505accf1161008c578063ddf731f311610071578063ddf731f31461065e578063f92dbdba14610671578063fe51f31f1461068457600080fd5b8063d505accf14610638578063dd62ed3e1461064b57600080fd5b8063a9059cbb116100bd578063a9059cbb14610532578063cba0e99614610545578063ced67f0c1461059d57600080fd5b8063a3907d7114610517578063a457c2d71461051f57600080fd5b806390aefc1c1161012f57806395d89b411161011457806395d89b41146104fc5780639dc29fac146104055780639ed152451461050457600080fd5b806390aefc1c146104d65780639213a4f8146104e957600080fd5b806384909ea51161016057806384909ea514610483578063893d20e81461049657806389da7deb146104c357600080fd5b80637ecebe00146104185780637f135b811461042b57600080fd5b80633644e515116102295780634ce2f71a116101dd578063685fc568116101c2578063685fc568146103ea57806370a08231146103f257806379cc67901461040557600080fd5b80634ce2f71a146103cf5780635c975abb146103e257600080fd5b806340c10f191161020e57806340c10f191461039657806342966c68146103a957806343f6237d146103bc57600080fd5b80633644e5151461037b578063395093511461038357600080fd5b806323b872dd116102805780632b53ecac116102655780632b53ecac146103465780632f2770db14610359578063313ce5671461036157600080fd5b806323b872dd1461031e57806323c9d2831461033157600080fd5b80630644e757146102b257806306fdde03146102d0578063095ea7b3146102e557806318160ddd14610308575b600080fd5b6102ba610697565b6040516102c79190612dfa565b60405180910390f35b6102d8610712565b6040516102c79190612e62565b6102f86102f3366004612edc565b610721565b60405190151581526020016102c7565b610310610737565b6040519081526020016102c7565b6102f861032c366004612f06565b610761565b61034461033f366004612f42565b610776565b005b610344610354366004612f5b565b610784565b610344610872565b6103696108a5565b60405160ff90911681526020016102c7565b6103106108d2565b6102f8610391366004612edc565b6108dc565b6102f86103a4366004612edc565b6108e8565b6102f86103b7366004612f42565b610a26565b6102f86103ca366004612f42565b610a3a565b6103446103dd366004612edc565b610a47565b6102f8610b7d565b6102ba610baa565b610310610400366004612f5b565b610c23565b6102f8610413366004612edc565b610c2e565b610310610426366004612f5b565b610c3a565b6102f8610439366004612f5b565b73ffffffffffffffffffffffffffffffffffffffff1660009081527fc8f7dfac638e857624415a075d01235f7df510bb816c173d8446a45c20e71527602052604090205460ff1690565b6102f8610491366004612f42565b610c45565b61049e610c52565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016102c7565b6103446104d1366004612f5b565b610c92565b6103446104e4366004612f42565b610d78565b6103446104f7366004612f5b565b610d83565b6102d8610e6c565b610344610512366004612fd0565b610e76565b61034461102e565b6102f861052d366004612edc565b61105f565b6102f8610540366004612edc565b61106b565b6102f8610553366004612f5b565b73ffffffffffffffffffffffffffffffffffffffff1660009081527fc8f7dfac638e857624415a075d01235f7df510bb816c173d8446a45c20e71528602052604090205460ff1690565b61061d6105ab366004612f5b565b6040805180820182526000808252602091820181905273ffffffffffffffffffffffffffffffffffffffff9390931683527fc8f7dfac638e857624415a075d01235f7df510bb816c173d8446a45c20e7152a815291819020815180830190925280548252600101549181019190915290565b604080518251815260209283015192810192909252016102c7565b610344610646366004613051565b611078565b6103106106593660046130bb565b611090565b61034461066c366004612f5b565b6110e9565b61034461067f366004612f42565b6111d2565b610344610692366004612f42565b6111dd565b606060007fc8f7dfac638e857624415a075d01235f7df510bb816c173d8446a45c20e715246001810180546040805160208084028201810190925282815293945083018282801561070757602002820191906000526020600020905b8154815260200190600101908083116106f3575b505050505091505090565b606061071c6111e8565b905090565b600061072e338484611299565b90505b92915050565b600061071c7fc991b2e918acaba8e5721668ed0b1982684e5a8692a621bcd2d7ef326bb015b65490565b600061076e8484846113c8565b949350505050565b6107818160016113eb565b50565b6107ad7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756115bc565b73ffffffffffffffffffffffffffffffffffffffff811660008181527fc8f7dfac638e857624415a075d01235f7df510bb816c173d8446a45c20e71528602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905590519182527fc8f7dfac638e857624415a075d01235f7df510bb816c173d8446a45c20e71524917fc9f1a79cfd1f156e651e184f5e583f9886a3d9b9de7429187e15b88a2f7f91eb91015b60405180910390a15050565b61089b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756115bc565b6108a36115c6565b565b600061071c7f2967a798b92539a1b9eefe4d8eb931f96b68d27665e276f1bee2d5db7f7430495460ff1690565b600061071c6116a2565b600061072e83836116e4565b3360009081527fc8f7dfac638e857624415a075d01235f7df510bb816c173d8446a45c20e7152a60205260408120547fc8f7dfac638e857624415a075d01235f7df510bb816c173d8446a45c20e71524908203610971576040517f3d693ada00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360009081526006820160205260408120600101805485929061099590849061311d565b9091555050336000908152600682016020526040902080546001909101541115610a1257336000908152600682016020526040908190205490517f704879da000000000000000000000000000000000000000000000000000000008152610a09918591600401918252602082015260400190565b60405180910390fd5b610a1c848461177d565b5060019392505050565b6000610a3233836118bd565b506001919050565b6000610731826001611a2f565b610a707fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756115bc565b73ffffffffffffffffffffffffffffffffffffffff82163b610ad6576040517f3dde7ef400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83166004820152602401610a09565b73ffffffffffffffffffffffffffffffffffffffff821660008181527fc8f7dfac638e857624415a075d01235f7df510bb816c173d8446a45c20e7152a60209081526040918290208490558151928352820183905280517fc8f7dfac638e857624415a075d01235f7df510bb816c173d8446a45c20e71524927f59e1e4348943de408b89af8ab71e502ea722dd41efd1ff4a3548c60e83e91c6092908290030190a1505050565b600061071c7f68721c0bbf2c02a4d65000340d1370666be06a630022208d4baa9bd7a4b6fea85460ff1690565b606060007fc8f7dfac638e857624415a075d01235f7df510bb816c173d8446a45c20e715246002810180546040805160208084028201810190925282815293945083018282801561070757602002820191906000526020600020908154815260200190600101908083116106f357505050505091505090565b600061073182611ab1565b600061072e8383611b01565b600061073182611c17565b6000610731826000611a2f565b600061071c7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c13205473ffffffffffffffffffffffffffffffffffffffff1690565b610cbb7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756115bc565b73ffffffffffffffffffffffffffffffffffffffff811660008181527fc8f7dfac638e857624415a075d01235f7df510bb816c173d8446a45c20e71527602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905590519182527fc8f7dfac638e857624415a075d01235f7df510bb816c173d8446a45c20e71524917f6f0997ee5359e936f5c9d5bebe9d14d40be46bb6c738d8198382f80d6b6598e69101610866565b610781816000611c3f565b610dac7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756115bc565b73ffffffffffffffffffffffffffffffffffffffff811660008181527fc8f7dfac638e857624415a075d01235f7df510bb816c173d8446a45c20e71528602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905590519182527fc8f7dfac638e857624415a075d01235f7df510bb816c173d8446a45c20e71524917f7343931cbac86af38c05ceadc3785d4002142c4d65b190173df002c4dcff2acf9101610866565b606061071c611dd5565b610e9f7ffc425f2263d0df187444b70e47283d622c70181c5baebb1306a01edba1ce184c6115bc565b7fc8f7dfac638e857624415a075d01235f7df510bb816c173d8446a45c20e71524805460ff1615610f2c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f696e697469616c697a65640000000000000000000000000000000000000000006044820152606401610a09565b610f346115c6565b610f7386868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611e0692505050565b610fb284848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611e3592505050565b7f2967a798b92539a1b9eefe4d8eb931f96b68d27665e276f1bee2d5db7f74304980547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff841617905580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555050505050565b6110577fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756115bc565b6108a3611e60565b600061072e8383611f32565b600061072e338484611f48565b611087878787878787876120fc565b50505050505050565b73ffffffffffffffffffffffffffffffffffffffff80831660009081527fc991b2e918acaba8e5721668ed0b1982684e5a8692a621bcd2d7ef326bb015b56020908152604080832093851683529290529081205461072e565b6111127fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756115bc565b73ffffffffffffffffffffffffffffffffffffffff811660008181527fc8f7dfac638e857624415a075d01235f7df510bb816c173d8446a45c20e71527602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905590519182527fc8f7dfac638e857624415a075d01235f7df510bb816c173d8446a45c20e71524917f3b37c1b5c073be5b3a4b155132f3c927eab9305e970b95b36fd4201b3304e83e9101610866565b610781816001611c3f565b6107818160006113eb565b60607f2967a798b92539a1b9eefe4d8eb931f96b68d27665e276f1bee2d5db7f743047805461121690613130565b80601f016020809104026020016040519081016040528092919081815260200182805461124290613130565b801561128f5780601f106112645761010080835404028352916020019161128f565b820191906000526020600020905b81548152906001019060200180831161127257829003601f168201915b5050505050905090565b600073ffffffffffffffffffffffffffffffffffffffff84166112e8576040517f5a68b7ab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8316611335576040517fc524160000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff84811660008181527fc991b2e918acaba8e5721668ed0b1982684e5a8692a621bcd2d7ef326bb015b56020908152604080832094881680845294825291829020869055815186815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a35060019392505050565b60006113d584338461231d565b6113e0848484611f48565b506001949350505050565b6114147fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756115bc565b7fc8f7dfac638e857624415a075d01235f7df510bb816c173d8446a45c20e715247f1ef17e9a165a4e1a08bf7c7a70090c7711ef4b97027937554becb896058c66898361148d576040517f6a36dceb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008481526020829052604090205484146114d7576040517f542226c200000000000000000000000000000000000000000000000000000000815260048101859052602401610a09565b6000836114e757826002016114ec565b826001015b905060005b815481101561155a578582828154811061150d5761150d613183565b906000526020600020015403611552576040517feda84b7500000000000000000000000000000000000000000000000000000000815260048101879052602401610a09565b6001016114f1565b508054600181018255600082815260209020018590556040517fb30104422085626dc8352b4b2503aa2c9a7ae402c5d71cc2b71690a2075ee9a5906115ad90879087909182521515602082015260400190565b60405180910390a15050505050565b61078181336123bd565b7f68721c0bbf2c02a4d65000340d1370666be06a630022208d4baa9bd7a4b6fea85460ff1615611622576040517f059519da00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f68721c0bbf2c02a4d65000340d1370666be06a630022208d4baa9bd7a4b6fea880547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258906020015b60405180910390a1565b4660009081527fbb9c3660b51e1fafa886fcf600a68efa81371bd50359eccba98f0c4fff2cfeba6020526040812054908190036116e15761071c612496565b90565b3360009081527fc991b2e918acaba8e5721668ed0b1982684e5a8692a621bcd2d7ef326bb015b56020908152604080832073ffffffffffffffffffffffffffffffffffffffff86168452909152812054828101811115611770576040517fd256efb100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61076e3385858401611299565b73ffffffffffffffffffffffffffffffffffffffff82166117ca576040517fda007acd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6117d660008383612560565b7fc991b2e918acaba8e5721668ed0b1982684e5a8692a621bcd2d7ef326bb015b680547fc991b2e918acaba8e5721668ed0b1982684e5a8692a621bcd2d7ef326bb015b491839160009061182b90849061311d565b909155505073ffffffffffffffffffffffffffffffffffffffff83166000908152602082905260408120805484929061186590849061311d565b909155505060405182815273ffffffffffffffffffffffffffffffffffffffff8416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff821661190a576040517ff1e2c4ee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61191682600083612560565b73ffffffffffffffffffffffffffffffffffffffff821660009081527fc991b2e918acaba8e5721668ed0b1982684e5a8692a621bcd2d7ef326bb015b4602081905260409091205480831115611998576040517fb1d35b2300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8416600090815260208390526040812084830390556002830180548592906119d69084906131b2565b909155505060405183815260009073ffffffffffffffffffffffffffffffffffffffff8616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a350505050565b60007fc8f7dfac638e857624415a075d01235f7df510bb816c173d8446a45c20e715248183611a615781600201611a66565b816001015b905060005b8154811015611aa85785828281548110611a8757611a87613183565b906000526020600020015403611aa05760019350611aa8565b600101611a6b565b50505092915050565b60007fc991b2e918acaba8e5721668ed0b1982684e5a8692a621bcd2d7ef326bb015b45b73ffffffffffffffffffffffffffffffffffffffff909216600090815260209290925250604090205490565b3360009081527fc8f7dfac638e857624415a075d01235f7df510bb816c173d8446a45c20e7152a60205260408120547fc8f7dfac638e857624415a075d01235f7df510bb816c173d8446a45c20e7152490151580611b72575033600090815260068201602052604090206001015415155b15611c0257336000908152600682016020526040902060010154831115611be657336000908152600682016020526040908190206001015490517f704879da000000000000000000000000000000000000000000000000000000008152610a09918591600401918252602082015260400190565b3360009081526006820160205260409020600101805484900390555b611c0d84338561231d565b610a1c84846118bd565b60007fbb9c3660b51e1fafa886fcf600a68efa81371bd50359eccba98f0c4fff2cfeb9611ad5565b611c687fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756115bc565b7fc8f7dfac638e857624415a075d01235f7df510bb816c173d8446a45c20e71524611c938383611a2f565b611ccc576040517f4df39c2200000000000000000000000000000000000000000000000000000000815260048101849052602401610a09565b600082611cdc5781600201611ce1565b816001015b905060005b8154811015611d645784828281548110611d0257611d02613183565b906000526020600020015403611d5c5781548290611d22906001906131b2565b81548110611d3257611d32613183565b9060005260206000200154828281548110611d4f57611d4f613183565b6000918252602090912001555b600101611ce6565b5080805480611d7557611d756131c5565b600190038181906000526020600020016000905590557ff5cacd7e842802d4273885b1beb57040823f1f243e00ce07c1d6d964f7d5b97f8484604051611dc79291909182521515602082015260400190565b60405180910390a150505050565b60607f2967a798b92539a1b9eefe4d8eb931f96b68d27665e276f1bee2d5db7f743047600101805461121690613130565b7f2967a798b92539a1b9eefe4d8eb931f96b68d27665e276f1bee2d5db7f743047611e318282613271565b5050565b7f2967a798b92539a1b9eefe4d8eb931f96b68d27665e276f1bee2d5db7f743048611e318282613271565b7f68721c0bbf2c02a4d65000340d1370666be06a630022208d4baa9bd7a4b6fea85460ff16611ebb576040517f59488a5a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f68721c0bbf2c02a4d65000340d1370666be06a630022208d4baa9bd7a4b6fea880547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa90602001611698565b6000611f3f33848461231d565b50600192915050565b73ffffffffffffffffffffffffffffffffffffffff83811660009081527fc8f7dfac638e857624415a075d01235f7df510bb816c173d8446a45c20e71527602052604080822054928516825281205490917fc8f7dfac638e857624415a075d01235f7df510bb816c173d8446a45c20e715249160ff91821691168180611fcb5750805b8015611fff575073ffffffffffffffffffffffffffffffffffffffff8716600090815260048401602052604090205460ff16155b8015612033575073ffffffffffffffffffffffffffffffffffffffff8616600090815260048401602052604090205460ff16155b156120e65760008083612049578460020161204e565b846001015b905060005b81548110156120c357600061208483838154811061207357612073613183565b90600052602060002001548a6125c1565b509150506120ae83838154811061209d5761209d613183565b9060005260206000200154826126e2565b6120b8818561311d565b935050600101612053565b5081156120e3576120d5893084612831565b506120e082886131b2565b96505b50505b6120f1878787612831565b979650505050505050565b83421115612136576040517fe13df39400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff871660009081527fbb9c3660b51e1fafa886fcf600a68efa81371bd50359eccba98f0c4fff2cfeb9602081815260408084205481517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981528084018d90528083018c9052606081018b90526080810182905260a081018a905260c090204686527fbb9c3660b51e1fafa886fcf600a68efa81371bd50359eccba98f0c4fff2cfeba9093529084205492939192909181900361221f57612208612496565b466000908152600186016020526040902081905590505b6040517f190100000000000000000000000000000000000000000000000000000000000081526002810182905260228101849052604290206000612265828a8a8a612a18565b90508c73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146122cc576040517feae00e5600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8d1660009081526020879052604081208054916122fd8361338b565b919050555061230d8d8d8d611299565b5050505050505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff83811660009081527fc991b2e918acaba8e5721668ed0b1982684e5a8692a621bcd2d7ef326bb015b56020908152604080832093861683529290522054808211156123a9576040517f01c2999e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6123b68484848403611299565b5050505050565b60008281527ff72ca309d9a3d085eca8abc0d0f1efd7a9682e454e7a123eb852dac23bbd2afa6020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16611e315761241c81612b98565b612427836020612bb7565b6040516020016124389291906133c3565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a0000000000000000000000000000000000000000000000000000000008252610a0991600401612e62565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6124c16111e8565b805160209182012060408051808201909152600181527f31000000000000000000000000000000000000000000000000000000000000009201919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc646604080516020810195909552840192909252606083015260808201523060a082015260c00160405160208183030381529060405280519060200120905090565b7f68721c0bbf2c02a4d65000340d1370666be06a630022208d4baa9bd7a4b6fea85460ff16156125bc576040517f059519da00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b600080600083600003612600576040517f9cf8540c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007f1ef17e9a165a4e1a08bf7c7a70090c7711ef4b97027937554becb896058c6689600087815260208281526040918290208251608081018452815480825260018301549382019390935260029091015473ffffffffffffffffffffffffffffffffffffffff8116938201939093527401000000000000000000000000000000000000000090920460ff1615156060830152919250906126ac578560008094509450945050506126db565b602081015192506127106126c08488613444565b6126ca919061345b565b93506126d684876131b2565b945050505b9250925092565b8060000361271c576040517f9cf8540c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007f1ef17e9a165a4e1a08bf7c7a70090c7711ef4b97027937554becb896058c6689600084815260208281526040918290208251608081018452815480825260018301549382019390935260029091015473ffffffffffffffffffffffffffffffffffffffff8116938201939093527401000000000000000000000000000000000000000090920460ff1615156060830152919250906127e9576040517f3d693ada00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805160009081526001830160205260408120805485929061280b90849061311d565b9250508190555082826002016000828254612826919061311d565b909155505050505050565b600073ffffffffffffffffffffffffffffffffffffffff8416612880576040517f68551d5f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff83166128cd576040517f8289914400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6128d8848484612560565b73ffffffffffffffffffffffffffffffffffffffff841660009081527fc991b2e918acaba8e5721668ed0b1982684e5a8692a621bcd2d7ef326bb015b460208190526040909120548084111561295a576040517f7183160b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff80871660009081526020849052604080822087850390559187168152908120805486929061299e90849061311d565b925050819055508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef86604051612a0491815260200190565b60405180910390a350600195945050505050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0821115612a74576040517fe4a61add00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8360ff16601b14158015612a8c57508360ff16601c14155b15612ac3576040517facd54a9000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa158015612b17573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116612b8f576040517f8fe7664e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b95945050505050565b606061073173ffffffffffffffffffffffffffffffffffffffff831660145b60606000612bc6836002613444565b612bd190600261311d565b67ffffffffffffffff811115612be957612be96131f4565b6040519080825280601f01601f191660200182016040528015612c13576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110612c4a57612c4a613183565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612cad57612cad613183565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000612ce9846002613444565b612cf490600161311d565b90505b6001811115612d91577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110612d3557612d35613183565b1a60f81b828281518110612d4b57612d4b613183565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93612d8a81613496565b9050612cf7565b50831561072e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a09565b6020808252825182820181905260009190848201906040850190845b81811015612e3257835183529284019291840191600101612e16565b50909695505050505050565b60005b83811015612e59578181015183820152602001612e41565b50506000910152565b6020815260008251806020840152612e81816040850160208701612e3e565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b803573ffffffffffffffffffffffffffffffffffffffff81168114612ed757600080fd5b919050565b60008060408385031215612eef57600080fd5b612ef883612eb3565b946020939093013593505050565b600080600060608486031215612f1b57600080fd5b612f2484612eb3565b9250612f3260208501612eb3565b9150604084013590509250925092565b600060208284031215612f5457600080fd5b5035919050565b600060208284031215612f6d57600080fd5b61072e82612eb3565b60008083601f840112612f8857600080fd5b50813567ffffffffffffffff811115612fa057600080fd5b602083019150836020828501011115612fb857600080fd5b9250929050565b803560ff81168114612ed757600080fd5b600080600080600060608688031215612fe857600080fd5b853567ffffffffffffffff8082111561300057600080fd5b61300c89838a01612f76565b9097509550602088013591508082111561302557600080fd5b5061303288828901612f76565b9094509250613045905060408701612fbf565b90509295509295909350565b600080600080600080600060e0888a03121561306c57600080fd5b61307588612eb3565b965061308360208901612eb3565b9550604088013594506060880135935061309f60808901612fbf565b925060a0880135915060c0880135905092959891949750929550565b600080604083850312156130ce57600080fd5b6130d783612eb3565b91506130e560208401612eb3565b90509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820180821115610731576107316130ee565b600181811c9082168061314457607f821691505b60208210810361317d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b81810381811115610731576107316130ee565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b601f8211156125bc57600081815260208120601f850160051c8101602086101561324a5750805b601f850160051c820191505b8181101561326957828155600101613256565b505050505050565b815167ffffffffffffffff81111561328b5761328b6131f4565b61329f816132998454613130565b84613223565b602080601f8311600181146132f257600084156132bc5750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555613269565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b8281101561333f57888601518255948401946001909101908401613320565b508582101561337b57878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036133bc576133bc6130ee565b5060010190565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516133fb816017850160208801612e3e565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351613438816028840160208801612e3e565b01602801949350505050565b8082028115828204841417610731576107316130ee565b600082613491577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000816134a5576134a56130ee565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fea26469706673582212209d1e83920af9329f80761705f03a99a8b45e1ba91936ad0692f099625701ce5864736f6c63430008130033",
  "devdoc": {
    "author": "Daniel <danieldegendev@gmail.com>",
    "custom:version": "1.1.0",
    "kind": "dev",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "returns": {
          "domainSeparator": "domain separator"
        }
      },
      "addBuyFee(bytes32)": {
        "params": {
          "_id": "fee id"
        }
      },
      "addLP(address)": {
        "params": {
          "_lp": "address of the liquidity pool of the token"
        }
      },
      "addSellFee(bytes32)": {
        "params": {
          "_id": "fee id"
        }
      },
      "allowance(address,address)": {
        "params": {
          "holder": "approver of allowance",
          "spender": "recipient of allowance"
        },
        "returns": {
          "_0": "token allowance"
        }
      },
      "approve(address,uint256)": {
        "details": "prefer ERC20Extended functions to avoid transaction-ordering vulnerability (see https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729)",
        "params": {
          "amount": "quantity of tokens approved for spending",
          "spender": "recipient of allowance"
        },
        "returns": {
          "_0": "success status (always true; otherwise function should revert)"
        }
      },
      "balanceOf(address)": {
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "token balance"
        }
      },
      "bridges(address)": {
        "params": {
          "_bridge": "address of the bridge"
        },
        "returns": {
          "_supply": "bridge supply"
        }
      },
      "burn(address,uint256)": {
        "params": {
          "_amount": "burnable amount",
          "_from": "holder address to burn the tokens from"
        },
        "returns": {
          "_success": "Returns true is operation succeeds"
        }
      },
      "burn(uint256)": {
        "params": {
          "_amount": "burnable amount"
        },
        "returns": {
          "_success": "Returns true is operation succeeds"
        }
      },
      "burnFrom(address,uint256)": {
        "params": {
          "_amount": "burnable amount",
          "_from": "holder address to burn the tokens from"
        },
        "returns": {
          "_success": "Returns true is operation succeeds"
        }
      },
      "decimals()": {
        "returns": {
          "_0": "token decimals"
        }
      },
      "decreaseAllowance(address,uint256)": {
        "params": {
          "amount": "quantity by which to decrease allowance",
          "spender": "address whose allowance to decrease"
        },
        "returns": {
          "_0": "success status (always true; otherwise function will revert)"
        }
      },
      "excludeAccountFromTax(address)": {
        "params": {
          "_account": "address to exclude"
        }
      },
      "getBuyFees()": {
        "returns": {
          "_fees": "array of fee ids"
        }
      },
      "getOwner()": {
        "returns": {
          "_owner": "owner address"
        }
      },
      "getSellFees()": {
        "returns": {
          "_fees": "array of fee ids"
        }
      },
      "hasLP(address)": {
        "returns": {
          "_has": "has lp or not"
        }
      },
      "includeAccountForTax(address)": {
        "params": {
          "_account": "address to include"
        }
      },
      "increaseAllowance(address,uint256)": {
        "params": {
          "amount": "quantity by which to increase allowance",
          "spender": "address whose allowance to increase"
        },
        "returns": {
          "_0": "success status (always true; otherwise function will revert)"
        }
      },
      "initERC20Facet(string,string,uint8)": {
        "params": {
          "__decimals": "The number of decimals of the token",
          "__name": "The name of the token",
          "__symbol": "The symbol of the token"
        }
      },
      "isBuyFee(bytes32)": {
        "params": {
          "_id": "fee id"
        }
      },
      "isExcluded(address)": {
        "params": {
          "_account": "account to check"
        }
      },
      "isSellFee(bytes32)": {
        "params": {
          "_id": "fee id"
        }
      },
      "mint(address,uint256)": {
        "params": {
          "_amount": "receiving amount",
          "_to": "receiver address of the token"
        },
        "returns": {
          "_success": "Returns true is operation succeeds"
        }
      },
      "name()": {
        "returns": {
          "_0": "token name"
        }
      },
      "nonces(address)": {
        "returns": {
          "_0": "current nonce"
        }
      },
      "paused()": {
        "returns": {
          "status": "whether contract is paused"
        }
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "this function may be vulnerable to approval replay attacks",
        "params": {
          "amount": "quantity of tokens to approve",
          "owner": "holder of tokens and signer of permit",
          "r": "secp256k1 'r' value",
          "s": "secp256k1 's' value",
          "spender": "beneficiary of approval",
          "v": "secp256k1 'v' value"
        }
      },
      "removeBuyFee(bytes32)": {
        "params": {
          "_id": "fee id"
        }
      },
      "removeLP(address)": {
        "params": {
          "_lp": "address of the liquidity pool of the token"
        }
      },
      "removeSellFee(bytes32)": {
        "params": {
          "_id": "fee id"
        }
      },
      "symbol()": {
        "returns": {
          "_0": "token symbol"
        }
      },
      "totalSupply()": {
        "returns": {
          "_0": "token supply"
        }
      },
      "transfer(address,uint256)": {
        "params": {
          "amount": "quantity of tokens to transfer",
          "recipient": "beneficiary of token transfer"
        },
        "returns": {
          "_0": "success status (always true; otherwise function should revert)"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "amount": "quantity of tokens to transfer",
          "holder": "holder of tokens prior to transfer",
          "recipient": "beneficiary of token transfer"
        },
        "returns": {
          "_0": "success status (always true; otherwise function should revert)"
        }
      },
      "updateBridgeSupplyCap(address,uint256)": {
        "params": {
          "_bridge": "address of the bridge",
          "_cap": "supply cap of the bridge"
        }
      }
    },
    "title": "ERC20 Token Facet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "notice": "return the EIP-712 domain separator unique to contract and chain"
      },
      "addBuyFee(bytes32)": {
        "notice": "Adds a buy fee based on a fee id"
      },
      "addLP(address)": {
        "notice": "Adds a liquidity pool address"
      },
      "addSellFee(bytes32)": {
        "notice": "Adds a sell fee based on a fee id"
      },
      "allowance(address,address)": {
        "notice": "query the allowance granted from given holder to given spender"
      },
      "approve(address,uint256)": {
        "notice": "grant approval to spender to spend tokens"
      },
      "balanceOf(address)": {
        "notice": "query the token balance of given account"
      },
      "bridges(address)": {
        "notice": "Returns the supply information of the given bridge"
      },
      "burn(address,uint256)": {
        "notice": "Burning an amount of tokens from a designated holderIt allows to burn a bridge supply until its supply is 0, even if the cap is already set to 0"
      },
      "burn(uint256)": {
        "notice": "Burning an amount of tokens from senderIt allows to burn a bridge supply until its supply is 0, even if the cap is already set to 0"
      },
      "burnFrom(address,uint256)": {
        "notice": "Burning an amount of tokens from a designated holderIt allows to burn a bridge supply until its supply is 0, even if the cap is already set to 0"
      },
      "decimals()": {
        "notice": "return token decimals, generally used only for display purposes"
      },
      "decreaseAllowance(address,uint256)": {
        "notice": "decrease spend amount granted to spender"
      },
      "disable()": {
        "notice": "This disables the transfers of this tokens"
      },
      "enable()": {
        "notice": "This enables the transfers of this tokens"
      },
      "excludeAccountFromTax(address)": {
        "notice": "Exclude an account from being charged on fees"
      },
      "getBuyFees()": {
        "notice": "Returns all buy fee ids"
      },
      "getOwner()": {
        "notice": "Returns the owner address"
      },
      "getSellFees()": {
        "notice": "Returns all sell fee ids"
      },
      "hasLP(address)": {
        "notice": "Returns the existence of an lp address"
      },
      "includeAccountForTax(address)": {
        "notice": "Includes an account againt to pay fees"
      },
      "increaseAllowance(address,uint256)": {
        "notice": "increase spend amount granted to spender"
      },
      "initERC20Facet(string,string,uint8)": {
        "notice": "Initializes the contract"
      },
      "isBuyFee(bytes32)": {
        "notice": "Checks whether a fee id is a buy fee or not"
      },
      "isExcluded(address)": {
        "notice": "Checks if an account is whether excluded from paying fees or not"
      },
      "isSellFee(bytes32)": {
        "notice": "Check whether a fee id is a sell fee or not"
      },
      "mint(address,uint256)": {
        "notice": "Minting an amount of tokens for a designated receiverIt allows to mint specified amount until the bridge supply cap is reached"
      },
      "name()": {
        "notice": "return token name"
      },
      "nonces(address)": {
        "notice": "get the current ERC2612 nonce for the given address"
      },
      "paused()": {
        "notice": "query whether contract is paused"
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "approve spender to transfer tokens held by owner via signature"
      },
      "removeBuyFee(bytes32)": {
        "notice": "Removes a buy fee based on a fee id"
      },
      "removeLP(address)": {
        "notice": "Removes a liquidity pool address"
      },
      "removeSellFee(bytes32)": {
        "notice": "Removes a sell fee based on a fee id"
      },
      "symbol()": {
        "notice": "return token symbol"
      },
      "totalSupply()": {
        "notice": "query the total minted token supply"
      },
      "transfer(address,uint256)": {
        "notice": "transfer tokens to given recipient"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "transfer tokens to given recipient on behalf of given holder"
      },
      "updateBridgeSupplyCap(address,uint256)": {
        "notice": "Updates a supply cap for a specified bridge"
      }
    },
    "notice": "Provides the functionality of an ERC20 token to an EIP-2535 based diamond",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}