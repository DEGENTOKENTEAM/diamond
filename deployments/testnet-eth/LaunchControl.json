{
  "address": "0x3c7d2E8aBe50E1C4C756F2993289A9AE3A70AD2C",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "addLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "launched",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidity",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lp",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpTokenReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "recover",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "setLpTokenReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "setRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setStartPoolWithNative",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setStartPoolWithToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "setToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startPoolWithNative",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startPoolWithToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTrading",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x9928f6c805dc6b14e197f7a02ca5cdd6eed72e38cad6144546bada512a8e9bb9",
  "receipt": {
    "to": null,
    "from": "0x2fcb9d07eD31874f5fe6da6de315B3b28Dd0aD10",
    "contractAddress": "0x3c7d2E8aBe50E1C4C756F2993289A9AE3A70AD2C",
    "transactionIndex": 25,
    "gasUsed": "1354085",
    "logsBloom": "0x
    "blockHash": "0x800fb550c76ca84251df39d76f652abb4c33ae4eb3dd281387018b0dd8d1186c",
    "transactionHash": "0x9928f6c805dc6b14e197f7a02ca5cdd6eed72e38cad6144546bada512a8e9bb9",
    "logs": [
      {
        "transactionIndex": 25,
        "blockNumber": 10123312,
        "transactionHash": "0x9928f6c805dc6b14e197f7a02ca5cdd6eed72e38cad6144546bada512a8e9bb9",
        "address": "0x3c7d2E8aBe50E1C4C756F2993289A9AE3A70AD2C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002fcb9d07ed31874f5fe6da6de315b3b28dd0ad10"
        ],
        "data": "0x",
        "logIndex": 41,
        "blockHash": "0x800fb550c76ca84251df39d76f652abb4c33ae4eb3dd281387018b0dd8d1186c"
      }
    ],
    "blockNumber": 10123312,
    "cumulativeGasUsed": "12450902",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "622d38e7c06afa510ced6957bca4ce10",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpTokenReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"recover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"setLpTokenReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setStartPoolWithNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setStartPoolWithToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startPoolWithNative\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startPoolWithToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"custom:version\":\"1.0.0\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"recover(address)\":{\"notice\":\"admin\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LaunchControl.sol\":\"LaunchControl\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/LaunchControl.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.19;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { IERC20Facet } from \\\"./diamond/interfaces/IERC20Facet.sol\\\";\\nimport { IRouter02 } from \\\"./interfaces/IRouter02.sol\\\";\\nimport { IFactory } from \\\"./interfaces/IFactory.sol\\\";\\n\\n/// @custom:version 1.0.0\\ncontract LaunchControl is Ownable {\\n    using Address for address payable;\\n\\n    bool public launched = false;\\n    bool public liquidity = false;\\n    uint256 public startPoolWithToken = 0;\\n    uint256 public startPoolWithNative = 0;\\n    address public router;\\n    address public lp;\\n    address public lpTokenReceiver;\\n    address public token; // diamond address is token address\\n\\n    /// admin\\n\\n    function recover(address _asset) external onlyOwner {\\n        uint256 _balanceA = address(this).balance;\\n        if (_balanceA > 0) payable(owner()).sendValue(_balanceA);\\n        uint256 _balanceB = IERC20(_asset).balanceOf(address(this));\\n        if (_balanceB > 0) IERC20(_asset).transfer(owner(), _balanceB);\\n    }\\n\\n    function setRouter(address _router) external onlyOwner {\\n        router = _router;\\n    }\\n\\n    function setToken(address _token) external onlyOwner {\\n        if (router == address(0)) revert(\\\"missing router\\\");\\n        token = _token;\\n        lp = IFactory(IRouter02(router).factory()).createPair(token, IRouter02(router).WETH());\\n        IERC20Facet(token).setLP(lp);\\n    }\\n\\n    function setStartPoolWithToken(uint256 _amount) external onlyOwner {\\n        startPoolWithToken = _amount;\\n    }\\n\\n    function setStartPoolWithNative(uint256 _amount) external onlyOwner {\\n        startPoolWithNative = _amount;\\n    }\\n\\n    function setLpTokenReceiver(address _account) external onlyOwner {\\n        lpTokenReceiver = _account;\\n    }\\n\\n    function addLiquidity() external onlyOwner {\\n        if (lp == address(0) || token == address(0)) revert(\\\"set token first\\\");\\n        if (lpTokenReceiver == address(0)) revert(\\\"lp token receiver not set\\\");\\n\\n        uint256 _balanceA = address(this).balance;\\n        if (_balanceA == 0 || startPoolWithNative == 0 || startPoolWithNative > _balanceA) revert(\\\"not enough native\\\");\\n\\n        uint256 _balanceB = IERC20(token).balanceOf(address(this));\\n        if (_balanceB == 0 || startPoolWithToken == 0 || startPoolWithToken > _balanceB) revert(\\\"not enough token\\\");\\n\\n        IERC20Facet(token).excludeAccountFromTax(address(this));\\n        IERC20(token).approve(router, startPoolWithToken);\\n        (uint256 amountToken, uint256 amountETH, ) = IRouter02(router).addLiquidityETH{ value: startPoolWithNative }(\\n            token,\\n            startPoolWithToken,\\n            startPoolWithToken,\\n            startPoolWithNative,\\n            lpTokenReceiver,\\n            block.timestamp + 60\\n        );\\n        IERC20Facet(token).disable();\\n        IERC20Facet(token).includeAccountForTax(address(this));\\n\\n        if (amountToken != startPoolWithToken) revert(\\\"wrong amount of token\\\");\\n        if (amountETH != startPoolWithNative) revert(\\\"wrong amount of native\\\");\\n\\n        liquidity = true;\\n    }\\n\\n    function startTrading() external onlyOwner {\\n        if (token == address(0)) revert(\\\"no token\\\");\\n        if (!liquidity) revert(\\\"no liquidity\\\");\\n        IERC20Facet(token).enable();\\n        launched = true;\\n    }\\n\\n    /// receiver\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x50ab88c2d2dc55a302d13fa4f53d4ee962b12dc404176df311eeb93de333adae\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/diamond/interfaces/IERC20Facet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.19;\\n\\n/// @title ERC20 Facet Interface\\n/// @author Daniel <danieldegendev@gmail.com>\\ninterface IERC20Facet {\\n    /// Minting an amount of tokens for a designated receiver\\n    /// @param _to receiver address of the token\\n    /// @param _amount receiving amount\\n    /// @notice This can only be executed by the MINTER_ROLE which will be bridge related contracts\\n    function mint(address _to, uint256 _amount) external;\\n\\n    /// Burning an amount of tokens from a designated holder\\n    /// @param _from holder address to burn the tokens from\\n    /// @param _amount burnable amount\\n    function burn(address _from, uint256 _amount) external;\\n\\n    /// @notice This enables the transfers of this tokens\\n    function enable() external;\\n\\n    /// @notice This disables the transfers of this tokens\\n    function disable() external;\\n\\n    /// Exclude an account from being charged on fees\\n    /// @param _account address to exclude\\n    function excludeAccountFromTax(address _account) external;\\n\\n    /// Includes an account againt to pay fees\\n    /// @param _account address to include\\n    function includeAccountForTax(address _account) external;\\n\\n    /// Sets the liquidity pool address\\n    /// @param _lp address of the liquidity pool of the token\\n    function setLP(address _lp) external;\\n}\\n\",\"keccak256\":\"0x1b61d8aeea4610f7de75e384c2993be765b64f409da45390d97d79361577650d\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.19;\\n\\ninterface IFactory {\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n}\\n\",\"keccak256\":\"0xc020436551ffaf0520bd33743857a4586403f787877657555446a36014f5304e\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IRouter02.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.19;\\n\\ninterface IRouter02 {\\n    function factory() external returns (address);\\n\\n    function WETH() external returns (address);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n}\\n\",\"keccak256\":\"0x839ef43517a7ceceb51cf02e0915f1a2dc0ef10bb8d91e064573933a3c2acae8\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60806040526000805461ffff60a01b19168155600181905560025534801561002657600080fd5b5061003033610035565b610085565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611735806100946000396000f3fe6080604052600436106101485760003560e01c80638091f3bf116100c0578063ed739b9811610074578063f3f7338e11610059578063f3f7338e146103a6578063f887ea40146103d3578063fc0c546a1461040057600080fd5b8063ed739b9814610366578063f2fde38b1461038657600080fd5b8063c0d78655116100a5578063c0d786551461031b578063df21311c1461033b578063e8078d941461035157600080fd5b80638091f3bf146102be5780638da5cb5b146102f057600080fd5b8063313c06a01161011757806357ff2d90116100fc57806357ff2d90146102695780636635689214610289578063715018a6146102a957600080fd5b8063313c06a0146101f3578063431b73d91461024557600080fd5b80630cd865ec14610154578063144fa6d7146101765780631a68650214610196578063293230b8146101de57600080fd5b3661014f57005b600080fd5b34801561016057600080fd5b5061017461016f3660046115fc565b61042d565b005b34801561018257600080fd5b506101746101913660046115fc565b6105ec565b3480156101a257600080fd5b506000546101c9907501000000000000000000000000000000000000000000900460ff1681565b60405190151581526020015b60405180910390f35b3480156101ea57600080fd5b5061017461092c565b3480156101ff57600080fd5b506004546102209073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101d5565b34801561025157600080fd5b5061025b60025481565b6040519081526020016101d5565b34801561027557600080fd5b50610174610284366004611620565b610afb565b34801561029557600080fd5b506101746102a4366004611620565b610b08565b3480156102b557600080fd5b50610174610b15565b3480156102ca57600080fd5b506000546101c99074010000000000000000000000000000000000000000900460ff1681565b3480156102fc57600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff16610220565b34801561032757600080fd5b506101746103363660046115fc565b610b29565b34801561034757600080fd5b5061025b60015481565b34801561035d57600080fd5b50610174610b78565b34801561037257600080fd5b506101746103813660046115fc565b611284565b34801561039257600080fd5b506101746103a13660046115fc565b6112d3565b3480156103b257600080fd5b506005546102209073ffffffffffffffffffffffffffffffffffffffff1681565b3480156103df57600080fd5b506003546102209073ffffffffffffffffffffffffffffffffffffffff1681565b34801561040c57600080fd5b506006546102209073ffffffffffffffffffffffffffffffffffffffff1681565b61043561138a565b47801561047b5761047b8161045f60005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff169061140b565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa1580156104e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050c9190611639565b905080156105e7578273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb61054f60005473ffffffffffffffffffffffffffffffffffffffff1690565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602481018490526044016020604051808303816000875af11580156105c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e59190611652565b505b505050565b6105f461138a565b60035473ffffffffffffffffffffffffffffffffffffffff16610678576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6d697373696e6720726f7574657200000000000000000000000000000000000060448201526064015b60405180910390fd5b600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691909117909155600354604080517fc45a01550000000000000000000000000000000000000000000000000000000081529051919092169163c45a015591600480830192602092919082900301816000875af115801561071a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073e9190611674565b600654600354604080517fad5c4648000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff9485169463c9c6539694811693169163ad5c464891600480830192602092919082900301816000875af11580156107bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e19190611674565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff9283166004820152911660248201526044016020604051808303816000875af1158015610853573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108779190611674565b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92831690811782556006546040517f2f34d2820000000000000000000000000000000000000000000000000000000081529283019190915290911690632f34d28290602401600060405180830381600087803b15801561091157600080fd5b505af1158015610925573d6000803e3d6000fd5b5050505050565b61093461138a565b60065473ffffffffffffffffffffffffffffffffffffffff166109b3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f6e6f20746f6b656e000000000000000000000000000000000000000000000000604482015260640161066f565b6000547501000000000000000000000000000000000000000000900460ff16610a38576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f6e6f206c69717569646974790000000000000000000000000000000000000000604482015260640161066f565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a3907d716040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610aa257600080fd5b505af1158015610ab6573d6000803e3d6000fd5b5050600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790555050565b610b0361138a565b600255565b610b1061138a565b600155565b610b1d61138a565b610b276000611565565b565b610b3161138a565b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b610b8061138a565b60045473ffffffffffffffffffffffffffffffffffffffff161580610bbb575060065473ffffffffffffffffffffffffffffffffffffffff16155b15610c22576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f73657420746f6b656e2066697273740000000000000000000000000000000000604482015260640161066f565b60055473ffffffffffffffffffffffffffffffffffffffff16610ca1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f6c7020746f6b656e207265636569766572206e6f742073657400000000000000604482015260640161066f565b47801580610caf5750600254155b80610cbb575080600254115b15610d22576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6e6f7420656e6f756768206e6174697665000000000000000000000000000000604482015260640161066f565b6006546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015610d91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db59190611639565b9050801580610dc45750600154155b80610dd0575080600154115b15610e37576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f6e6f7420656e6f75676820746f6b656e00000000000000000000000000000000604482015260640161066f565b6006546040517f9213a4f800000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff90911690639213a4f890602401600060405180830381600087803b158015610ea257600080fd5b505af1158015610eb6573d6000803e3d6000fd5b50506006546003546001546040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff928316600482015260248101919091529116925063095ea7b391506044016020604051808303816000875af1158015610f39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5d9190611652565b50600354600254600654600154600554600094859473ffffffffffffffffffffffffffffffffffffffff9182169463f305d719949193908316928291859116610fa742603c611691565b60405160e089901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff9687166004820152602481019590955260448501939093526064840191909152909216608482015260a481019190915260c40160606040518083038185885af1158015611039573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061105e91906116d1565b5091509150600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632f2770db6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156110cd57600080fd5b505af11580156110e1573d6000803e3d6000fd5b50506006546040517f2b53ecac00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff9091169250632b53ecac9150602401600060405180830381600087803b15801561115057600080fd5b505af1158015611164573d6000803e3d6000fd5b5050505060015482146111d3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f77726f6e6720616d6f756e74206f6620746f6b656e0000000000000000000000604482015260640161066f565b600254811461123e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f77726f6e6720616d6f756e74206f66206e617469766500000000000000000000604482015260640161066f565b5050600080547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff1675010000000000000000000000000000000000000000001790555050565b61128c61138a565b600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6112db61138a565b73ffffffffffffffffffffffffffffffffffffffff811661137e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161066f565b61138781611565565b50565b60005473ffffffffffffffffffffffffffffffffffffffff163314610b27576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161066f565b80471015611475576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161066f565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d80600081146114cf576040519150601f19603f3d011682016040523d82523d6000602084013e6114d4565b606091505b50509050806105e7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161066f565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b73ffffffffffffffffffffffffffffffffffffffff8116811461138757600080fd5b60006020828403121561160e57600080fd5b8135611619816115da565b9392505050565b60006020828403121561163257600080fd5b5035919050565b60006020828403121561164b57600080fd5b5051919050565b60006020828403121561166457600080fd5b8151801515811461161957600080fd5b60006020828403121561168657600080fd5b8151611619816115da565b808201808211156116cb577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b92915050565b6000806000606084860312156116e657600080fd5b835192506020840151915060408401519050925092509256fea26469706673582212206df511ea66c7579ddd98fd965149c5e7088b64effe22d6dac7fd52b0feeb804664736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106101485760003560e01c80638091f3bf116100c0578063ed739b9811610074578063f3f7338e11610059578063f3f7338e146103a6578063f887ea40146103d3578063fc0c546a1461040057600080fd5b8063ed739b9814610366578063f2fde38b1461038657600080fd5b8063c0d78655116100a5578063c0d786551461031b578063df21311c1461033b578063e8078d941461035157600080fd5b80638091f3bf146102be5780638da5cb5b146102f057600080fd5b8063313c06a01161011757806357ff2d90116100fc57806357ff2d90146102695780636635689214610289578063715018a6146102a957600080fd5b8063313c06a0146101f3578063431b73d91461024557600080fd5b80630cd865ec14610154578063144fa6d7146101765780631a68650214610196578063293230b8146101de57600080fd5b3661014f57005b600080fd5b34801561016057600080fd5b5061017461016f3660046115fc565b61042d565b005b34801561018257600080fd5b506101746101913660046115fc565b6105ec565b3480156101a257600080fd5b506000546101c9907501000000000000000000000000000000000000000000900460ff1681565b60405190151581526020015b60405180910390f35b3480156101ea57600080fd5b5061017461092c565b3480156101ff57600080fd5b506004546102209073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101d5565b34801561025157600080fd5b5061025b60025481565b6040519081526020016101d5565b34801561027557600080fd5b50610174610284366004611620565b610afb565b34801561029557600080fd5b506101746102a4366004611620565b610b08565b3480156102b557600080fd5b50610174610b15565b3480156102ca57600080fd5b506000546101c99074010000000000000000000000000000000000000000900460ff1681565b3480156102fc57600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff16610220565b34801561032757600080fd5b506101746103363660046115fc565b610b29565b34801561034757600080fd5b5061025b60015481565b34801561035d57600080fd5b50610174610b78565b34801561037257600080fd5b506101746103813660046115fc565b611284565b34801561039257600080fd5b506101746103a13660046115fc565b6112d3565b3480156103b257600080fd5b506005546102209073ffffffffffffffffffffffffffffffffffffffff1681565b3480156103df57600080fd5b506003546102209073ffffffffffffffffffffffffffffffffffffffff1681565b34801561040c57600080fd5b506006546102209073ffffffffffffffffffffffffffffffffffffffff1681565b61043561138a565b47801561047b5761047b8161045f60005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff169061140b565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa1580156104e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050c9190611639565b905080156105e7578273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb61054f60005473ffffffffffffffffffffffffffffffffffffffff1690565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602481018490526044016020604051808303816000875af11580156105c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e59190611652565b505b505050565b6105f461138a565b60035473ffffffffffffffffffffffffffffffffffffffff16610678576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6d697373696e6720726f7574657200000000000000000000000000000000000060448201526064015b60405180910390fd5b600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691909117909155600354604080517fc45a01550000000000000000000000000000000000000000000000000000000081529051919092169163c45a015591600480830192602092919082900301816000875af115801561071a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073e9190611674565b600654600354604080517fad5c4648000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff9485169463c9c6539694811693169163ad5c464891600480830192602092919082900301816000875af11580156107bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e19190611674565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff9283166004820152911660248201526044016020604051808303816000875af1158015610853573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108779190611674565b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92831690811782556006546040517f2f34d2820000000000000000000000000000000000000000000000000000000081529283019190915290911690632f34d28290602401600060405180830381600087803b15801561091157600080fd5b505af1158015610925573d6000803e3d6000fd5b5050505050565b61093461138a565b60065473ffffffffffffffffffffffffffffffffffffffff166109b3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f6e6f20746f6b656e000000000000000000000000000000000000000000000000604482015260640161066f565b6000547501000000000000000000000000000000000000000000900460ff16610a38576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f6e6f206c69717569646974790000000000000000000000000000000000000000604482015260640161066f565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a3907d716040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610aa257600080fd5b505af1158015610ab6573d6000803e3d6000fd5b5050600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790555050565b610b0361138a565b600255565b610b1061138a565b600155565b610b1d61138a565b610b276000611565565b565b610b3161138a565b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b610b8061138a565b60045473ffffffffffffffffffffffffffffffffffffffff161580610bbb575060065473ffffffffffffffffffffffffffffffffffffffff16155b15610c22576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f73657420746f6b656e2066697273740000000000000000000000000000000000604482015260640161066f565b60055473ffffffffffffffffffffffffffffffffffffffff16610ca1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f6c7020746f6b656e207265636569766572206e6f742073657400000000000000604482015260640161066f565b47801580610caf5750600254155b80610cbb575080600254115b15610d22576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6e6f7420656e6f756768206e6174697665000000000000000000000000000000604482015260640161066f565b6006546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015610d91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db59190611639565b9050801580610dc45750600154155b80610dd0575080600154115b15610e37576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f6e6f7420656e6f75676820746f6b656e00000000000000000000000000000000604482015260640161066f565b6006546040517f9213a4f800000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff90911690639213a4f890602401600060405180830381600087803b158015610ea257600080fd5b505af1158015610eb6573d6000803e3d6000fd5b50506006546003546001546040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff928316600482015260248101919091529116925063095ea7b391506044016020604051808303816000875af1158015610f39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5d9190611652565b50600354600254600654600154600554600094859473ffffffffffffffffffffffffffffffffffffffff9182169463f305d719949193908316928291859116610fa742603c611691565b60405160e089901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff9687166004820152602481019590955260448501939093526064840191909152909216608482015260a481019190915260c40160606040518083038185885af1158015611039573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061105e91906116d1565b5091509150600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632f2770db6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156110cd57600080fd5b505af11580156110e1573d6000803e3d6000fd5b50506006546040517f2b53ecac00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff9091169250632b53ecac9150602401600060405180830381600087803b15801561115057600080fd5b505af1158015611164573d6000803e3d6000fd5b5050505060015482146111d3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f77726f6e6720616d6f756e74206f6620746f6b656e0000000000000000000000604482015260640161066f565b600254811461123e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f77726f6e6720616d6f756e74206f66206e617469766500000000000000000000604482015260640161066f565b5050600080547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff1675010000000000000000000000000000000000000000001790555050565b61128c61138a565b600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6112db61138a565b73ffffffffffffffffffffffffffffffffffffffff811661137e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161066f565b61138781611565565b50565b60005473ffffffffffffffffffffffffffffffffffffffff163314610b27576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161066f565b80471015611475576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161066f565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d80600081146114cf576040519150601f19603f3d011682016040523d82523d6000602084013e6114d4565b606091505b50509050806105e7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161066f565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b73ffffffffffffffffffffffffffffffffffffffff8116811461138757600080fd5b60006020828403121561160e57600080fd5b8135611619816115da565b9392505050565b60006020828403121561163257600080fd5b5035919050565b60006020828403121561164b57600080fd5b5051919050565b60006020828403121561166457600080fd5b8151801515811461161957600080fd5b60006020828403121561168657600080fd5b8151611619816115da565b808201808211156116cb577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b92915050565b6000806000606084860312156116e657600080fd5b835192506020840151915060408401519050925092509256fea26469706673582212206df511ea66c7579ddd98fd965149c5e7088b64effe22d6dac7fd52b0feeb804664736f6c63430008130033",
  "devdoc": {
    "custom:version": "1.0.0",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "recover(address)": {
        "notice": "admin"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 105,
        "contract": "contracts/LaunchControl.sol:LaunchControl",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10756,
        "contract": "contracts/LaunchControl.sol:LaunchControl",
        "label": "launched",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 10759,
        "contract": "contracts/LaunchControl.sol:LaunchControl",
        "label": "liquidity",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 10762,
        "contract": "contracts/LaunchControl.sol:LaunchControl",
        "label": "startPoolWithToken",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 10765,
        "contract": "contracts/LaunchControl.sol:LaunchControl",
        "label": "startPoolWithNative",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 10767,
        "contract": "contracts/LaunchControl.sol:LaunchControl",
        "label": "router",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 10769,
        "contract": "contracts/LaunchControl.sol:LaunchControl",
        "label": "lp",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 10771,
        "contract": "contracts/LaunchControl.sol:LaunchControl",
        "label": "lpTokenReceiver",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 10773,
        "contract": "contracts/LaunchControl.sol:LaunchControl",
        "label": "token",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}