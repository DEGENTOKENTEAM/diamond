{
  "address": "0x389C9190c4673Ca9eE3ae6Ed84F4807C677ae819",
  "abi": [
    {
      "inputs": [],
      "name": "AddressZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MissingData",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroValueNotAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "feeId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Collected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Distributed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_feeId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_bountyReceiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_bountyShareInBps",
          "type": "uint256"
        }
      ],
      "name": "feeGenericDepositSingleFeeNative",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_feeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bountyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_feeId",
          "type": "bytes32"
        }
      ],
      "name": "feeGenericGetFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeGenericGetHomeChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_homeChainId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeGenericIsHomeChain",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_is",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeGenericIsInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_is",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_homeChainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_nativeWrapper",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswapV2Router",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isHomeChain",
          "type": "bool"
        }
      ],
      "name": "initFeeGenericFacet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x87ce0d4a95f31b054d42aadbc1d88af32689c138da877c30af00717eb665d9b8",
  "receipt": {
    "to": null,
    "from": "0x0000000022D4802541320DB7F22693405Db19422",
    "contractAddress": "0x389C9190c4673Ca9eE3ae6Ed84F4807C677ae819",
    "transactionIndex": 0,
    "gasUsed": "2129936",
    "logsBloom": "0x
    "blockHash": "0x69a21556e36a9ebbe0d3fe5b19a17013914fb743157332e493fd2445a3451692",
    "transactionHash": "0x87ce0d4a95f31b054d42aadbc1d88af32689c138da877c30af00717eb665d9b8",
    "logs": [],
    "blockNumber": 49115541,
    "cumulativeGasUsed": "2129936",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "936a1631bc8aae0663df3f3a20d0ad8a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MissingData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroValueNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"feeId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Collected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Distributed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_feeId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_bountyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bountyShareInBps\",\"type\":\"uint256\"}],\"name\":\"feeGenericDepositSingleFeeNative\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bountyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_feeId\",\"type\":\"bytes32\"}],\"name\":\"feeGenericGetFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGenericGetHomeChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_homeChainId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGenericIsHomeChain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_is\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGenericIsInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_is\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_homeChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nativeWrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapV2Router\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isHomeChain\",\"type\":\"bool\"}],\"name\":\"initFeeGenericFacet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Daniel <danieldegendev@gmail.com>\",\"custom:version\":\"1.0.0\",\"kind\":\"dev\",\"methods\":{\"feeGenericDepositSingleFeeNative(bytes32,address,uint256)\":{\"params\":{\"_bountyReceiver\":\"address of the receiver of the bounty\",\"_bountyShareInBps\":\"bounty share in basis points\",\"_feeId\":\"fee id in bytes32\"},\"returns\":{\"_bountyAmount\":\"amount for the bounty receiver\",\"_feeAmount\":\"fee amount that is being added\"}},\"feeGenericGetFee(bytes32)\":{\"params\":{\"_feeId\":\"fee id in bytes32\"}},\"feeGenericGetHomeChainId()\":{\"returns\":{\"_homeChainId\":\"block.chainid of the configured home chain\"}},\"feeGenericIsHomeChain()\":{\"returns\":{\"_is\":\"whether the diamond is on the home chain or not\"}},\"feeGenericIsInitialized()\":{\"returns\":{\"_is\":\"true if it's initialized, else false\"}},\"initFeeGenericFacet(uint256,address,address,bool)\":{\"params\":{\"_homeChainId\":\"home chain id\",\"_nativeWrapper\":\"address of the native wrapper token\",\"_uniswapV2Router\":\"address of the uniswap v2 conform router\"}}},\"title\":\"Fee Generic Facet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"feeGenericDepositSingleFeeNative(bytes32,address,uint256)\":{\"notice\":\"Deposits a single fee with native currency\"},\"feeGenericGetFee(bytes32)\":{\"notice\":\"Response the value of the fee\"},\"initFeeGenericFacet(uint256,address,address,bool)\":{\"notice\":\"Initializes the facet\"}},\"notice\":\"Contains generic fee functions\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/diamond/facets/FeeGenericFacet.sol\":\"FeeGenericFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC20Internal } from './IERC20Internal.sol';\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface IERC20 is IERC20Internal {\\n    /**\\n     * @notice query the total minted token supply\\n     * @return token supply\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice query the token balance of given account\\n     * @param account address to query\\n     * @return token balance\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice query the allowance granted from given holder to given spender\\n     * @param holder approver of allowance\\n     * @param spender recipient of allowance\\n     * @return token allowance\\n     */\\n    function allowance(\\n        address holder,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice grant approval to spender to spend tokens\\n     * @dev prefer ERC20Extended functions to avoid transaction-ordering vulnerability (see https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729)\\n     * @param spender recipient of allowance\\n     * @param amount quantity of tokens approved for spending\\n     * @return success status (always true; otherwise function should revert)\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @notice transfer tokens to given recipient\\n     * @param recipient beneficiary of token transfer\\n     * @param amount quantity of tokens to transfer\\n     * @return success status (always true; otherwise function should revert)\\n     */\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice transfer tokens to given recipient on behalf of given holder\\n     * @param holder holder of tokens prior to transfer\\n     * @param recipient beneficiary of token transfer\\n     * @param amount quantity of tokens to transfer\\n     * @return success status (always true; otherwise function should revert)\\n     */\\n    function transferFrom(\\n        address holder,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc4554dc5c7fdc1a333511876ea1ab7a932bfdcdf092e658bf66049956c0f8aca\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC20Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC20 interface needed by internal functions\\n */\\ninterface IERC20Internal {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x5dc63954123c58280a48da71f91c435dd7373f56bd472867c80177359c885e53\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC20/metadata/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC20MetadataInternal } from './IERC20MetadataInternal.sol';\\n\\n/**\\n * @title ERC20 metadata interface\\n */\\ninterface IERC20Metadata is IERC20MetadataInternal {\\n    /**\\n     * @notice return token name\\n     * @return token name\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @notice return token symbol\\n     * @return token symbol\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @notice return token decimals, generally used only for display purposes\\n     * @return token decimals\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x22eefd0dbd7637f41c8bfc3662a4b1ae6f084f27f26e34cc9bf124e0aee10a01\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC20/metadata/IERC20MetadataInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title ERC20 metadata internal interface\\n */\\ninterface IERC20MetadataInternal {\\n\\n}\\n\",\"keccak256\":\"0x32464590a972a9325d20c7125d157594df9473b6496ce6a66df617c41c4039ec\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from './UintUtils.sol';\\n\\nlibrary AddressUtils {\\n    using UintUtils for uint256;\\n\\n    error AddressUtils__InsufficientBalance();\\n    error AddressUtils__NotContract();\\n    error AddressUtils__SendValueFailed();\\n\\n    function toString(address account) internal pure returns (string memory) {\\n        return uint256(uint160(account)).toHexString(20);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        if (!success) revert AddressUtils__SendValueFailed();\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        if (value > address(this).balance)\\n            revert AddressUtils__InsufficientBalance();\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    /**\\n     * @notice execute arbitrary external call with limited gas usage and amount of copied return data\\n     * @dev derived from https://github.com/nomad-xyz/ExcessivelySafeCall (MIT License)\\n     * @param target recipient of call\\n     * @param gasAmount gas allowance for call\\n     * @param value native token value to include in call\\n     * @param maxCopy maximum number of bytes to copy from return data\\n     * @param data encoded call data\\n     * @return success whether call is successful\\n     * @return returnData copied return data\\n     */\\n    function excessivelySafeCall(\\n        address target,\\n        uint256 gasAmount,\\n        uint256 value,\\n        uint16 maxCopy,\\n        bytes memory data\\n    ) internal returns (bool success, bytes memory returnData) {\\n        returnData = new bytes(maxCopy);\\n\\n        assembly {\\n            // execute external call via assembly to avoid automatic copying of return data\\n            success := call(\\n                gasAmount,\\n                target,\\n                value,\\n                add(data, 0x20),\\n                mload(data),\\n                0,\\n                0\\n            )\\n\\n            // determine whether to limit amount of data to copy\\n            let toCopy := returndatasize()\\n\\n            if gt(toCopy, maxCopy) {\\n                toCopy := maxCopy\\n            }\\n\\n            // store the length of the copied bytes\\n            mstore(returnData, toCopy)\\n\\n            // copy the bytes from returndata[0:toCopy]\\n            returndatacopy(add(returnData, 0x20), 0, toCopy)\\n        }\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        if (!isContract(target)) revert AddressUtils__NotContract();\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7d924db4dbd9210923ab08db77db3c77438014c255fd49fa208ebce283d991bf\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC20 } from '../interfaces/IERC20.sol';\\nimport { AddressUtils } from './AddressUtils.sol';\\n\\n/**\\n * @title Safe ERC20 interaction library\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary SafeERC20 {\\n    using AddressUtils for address;\\n\\n    error SafeERC20__ApproveFromNonZeroToNonZero();\\n    error SafeERC20__DecreaseAllowanceBelowZero();\\n    error SafeERC20__OperationFailed();\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    /**\\n     * @dev safeApprove (like approve) should only be called when setting an initial allowance or when resetting it to zero; otherwise prefer safeIncreaseAllowance and safeDecreaseAllowance\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        if ((value != 0) && (token.allowance(address(this), spender) != 0))\\n            revert SafeERC20__ApproveFromNonZeroToNonZero();\\n\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            if (oldAllowance < value)\\n                revert SafeERC20__DecreaseAllowanceBelowZero();\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(\\n                token,\\n                abi.encodeWithSelector(\\n                    token.approve.selector,\\n                    spender,\\n                    newAllowance\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice send transaction data and check validity of return value, if present\\n     * @param token ERC20 token interface\\n     * @param data transaction data\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        bytes memory returndata = address(token).functionCall(\\n            data,\\n            'SafeERC20: low-level call failed'\\n        );\\n\\n        if (returndata.length > 0) {\\n            if (!abi.decode(returndata, (bool)))\\n                revert SafeERC20__OperationFailed();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd1d6d797898b4cfd575c8c9aca1194e9de7bb88fe6c8fb2afaf2b100e5992826\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/UintUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title utility functions for uint256 operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary UintUtils {\\n    error UintUtils__InsufficientHexLength();\\n\\n    bytes16 private constant HEX_SYMBOLS = '0123456789abcdef';\\n\\n    function add(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? sub(a, -b) : a + uint256(b);\\n    }\\n\\n    function sub(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? add(a, -b) : a - uint256(b);\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0';\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0x00';\\n        }\\n\\n        uint256 length = 0;\\n\\n        for (uint256 temp = value; temp != 0; temp >>= 8) {\\n            unchecked {\\n                length++;\\n            }\\n        }\\n\\n        return toHexString(value, length);\\n    }\\n\\n    function toHexString(\\n        uint256 value,\\n        uint256 length\\n    ) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n\\n        unchecked {\\n            for (uint256 i = 2 * length + 1; i > 1; --i) {\\n                buffer[i] = HEX_SYMBOLS[value & 0xf];\\n                value >>= 4;\\n            }\\n        }\\n\\n        if (value != 0) revert UintUtils__InsufficientHexLength();\\n\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x5aaeaea22a0800402c6f2d8ce6185293bc64f74f6c390c1b1c53b624b43972f8\",\"license\":\"MIT\"},\"contracts/diamond/facets/FeeGenericFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.19;\\n\\nimport { LibFeeGeneric } from \\\"./../libraries/LibFeeGeneric.sol\\\";\\nimport { IFeeGenericFacet } from \\\"./../interfaces/IFeeGenericFacet.sol\\\";\\nimport { LibFeeGenericStorage } from \\\"./../libraries/LibFeeGenericStorage.sol\\\";\\nimport { LibAccessControlEnumerable } from \\\"./../libraries/LibAccessControlEnumerable.sol\\\";\\nimport { Constants } from \\\"./../helpers/Constants.sol\\\";\\nimport { FeeConfig } from \\\"./../helpers/Structs.sol\\\";\\nimport { AlreadyInitialized, ZeroValueNotAllowed } from \\\"./../helpers/GenericErrors.sol\\\";\\nimport { addressZeroCheck } from \\\"./../helpers/Functions.sol\\\";\\n\\n/// @title Fee Generic Facet\\n/// @author Daniel <danieldegendev@gmail.com>\\n/// @notice Contains generic fee functions\\n/// @custom:version 1.0.0\\ncontract FeeGenericFacet is IFeeGenericFacet {\\n    /// Initializes the facet\\n    /// @param _homeChainId home chain id\\n    /// @param _nativeWrapper address of the native wrapper token\\n    /// @param _uniswapV2Router address of the uniswap v2 conform router\\n    function initFeeGenericFacet(uint256 _homeChainId, address _nativeWrapper, address _uniswapV2Router, bool _isHomeChain) external {\\n        LibAccessControlEnumerable.checkRole(Constants.DEPLOYER_ROLE);\\n        addressZeroCheck(_nativeWrapper);\\n        LibFeeGenericStorage.Storage storage _s = LibFeeGenericStorage.store();\\n        if (_s.initialized) revert AlreadyInitialized();\\n        _s.initialized = true;\\n        _s.isHomeChain = _isHomeChain;\\n        _s.homeChainId = _homeChainId;\\n        _s.nativeWrapper = _nativeWrapper;\\n        _s.uniswapV2Router = _uniswapV2Router;\\n    }\\n\\n    /// @inheritdoc IFeeGenericFacet\\n    function feeGenericIsHomeChain() external view returns (bool _is) {\\n        _is = LibFeeGeneric.isHomeChain();\\n    }\\n\\n    /// @inheritdoc IFeeGenericFacet\\n    function feeGenericGetHomeChainId() external view returns (uint256 _homeChainId) {\\n        _homeChainId = LibFeeGeneric.getHomeChainId();\\n    }\\n\\n    /// @inheritdoc IFeeGenericFacet\\n    function feeGenericIsInitialized() external view returns (bool _is) {\\n        _is = LibFeeGeneric.isInitialized();\\n    }\\n\\n    /// @inheritdoc IFeeGenericFacet\\n    function feeGenericDepositSingleFeeNative(\\n        bytes32 _feeId,\\n        address _bountyReceiver,\\n        uint256 _bountyShareInBps\\n    ) external payable returns (uint256 _feeAmount, uint256 _bountyAmount) {\\n        if (msg.value == 0) revert ZeroValueNotAllowed();\\n        (_feeAmount, _bountyAmount) = LibFeeGeneric.isHomeChain()\\n            ? LibFeeGeneric.depositSingleFeeNativeOnHomeChain(_feeId, _bountyReceiver, _bountyShareInBps)\\n            : LibFeeGeneric.depositSingleFeeNativeOnTargetChain(_feeId, _bountyReceiver, _bountyShareInBps);\\n    }\\n\\n    function feeGenericGetFee(bytes32 _feeId) external view returns (uint256 _fee) {\\n        _fee = LibFeeGeneric.isHomeChain() ? LibFeeGeneric.getFeeOnHomeChain(_feeId) : LibFeeGeneric.getFeeOnTargetChain(_feeId);\\n    }\\n}\\n\",\"keccak256\":\"0x4898733774c706905852694af9107e29f6d5bb12d48a09e6ab93544c2f16a3b4\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/helpers/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nlibrary Constants {\\n    /*-------------------------------- Role --------------------------------*/\\n    // 0x0000000000000000000000000000000000000000000000000000000000000000\\n    bytes32 constant DEFAULT_ADMIN_ROLE = 0x00;\\n    // 0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775\\n    bytes32 constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    // 0xfc425f2263d0df187444b70e47283d622c70181c5baebb1306a01edba1ce184c\\n    bytes32 constant DEPLOYER_ROLE = keccak256(\\\"DEPLOYER_ROLE\\\");\\n    // 0x6c0757dc3e6b28b2580c03fd9e96c274acf4f99d91fbec9b418fa1d70604ff1c\\n    bytes32 constant FEE_MANAGER_ROLE = keccak256(\\\"FEE_MANAGER_ROLE\\\");\\n    // 0x63eb04268b235ac1afacf3bcf4b19c5c175d0417a1555fb3ff79ae190f71ee7c\\n    bytes32 constant FEE_STORE_MANAGER_ROLE = keccak256(\\\"FEE_STORE_MANAGER_ROLE\\\");\\n    // 0x77f52ccf2f32e71a0cff8f14ad8c8303b7d2e4c7609b8fba963114f4db2af767\\n    bytes32 constant FEE_DISTRIBUTOR_PUSH_ROLE = keccak256(\\\"FEE_DISTRIBUTOR_PUSH_ROLE\\\");\\n    // 0xe85d5f1f8338cb18f500856d1568d0f3b0d0971f25b3ccd134475e991354edbf\\n    bytes32 constant FEE_DISTRIBUTOR_MANAGER = keccak256(\\\"FEE_DISTRIBUTOR_MANAGER\\\");\\n    /*----------------------------------------------------------------------*/\\n\\n    /*------------------------------- Fee ID -------------------------------*/\\n    // 0xacfc432e98ad100d9f8c385f3782bc88a17e1de7e53f69678cbcc41e8ffe72b0\\n    bytes32 constant ERC20_MARKETING_FEE = keccak256(\\\"ERC20_MARKETING_FEE\\\");\\n    // 0x6b78196f16f828b24a5a6584d4a1bcc5ce2f3154ba57839db273e6a4ebbe92c2\\n    bytes32 constant ERC20_REWARD_FEE = keccak256(\\\"ERC20_REWARD_FEE\\\");\\n    // 0x6e3678bee6f77c8a6179922c9a518b08407e6d9d2593ac683a87c979c8b31a12\\n    bytes32 constant ERC20_PLATFORM_FEE = keccak256(\\\"ERC20_PLATFORM_FEE\\\");\\n    // 0x6e2178bb28988b4c92cd3092e9e342e7639bfda2f68a02ac478cb084759607cf\\n    bytes32 constant ERC20_DEVELOPER_FEE = keccak256(\\\"ERC20_DEVELOPER_FEE\\\");\\n    /*----------------------------------------------------------------------*/\\n\\n    /*--------------------------- Relayer Actions --------------------------*/\\n    // 0xf145583e6e33d9da99af75b579493b11db4229a339336b82c748312f152b29a9\\n    bytes32 constant RELAYER_ACTION_DEPLOY_FEES = keccak256(\\\"RELAYER_ACTION_DEPLOY_FEES\\\");\\n    // 0xf375f410a0dc135af0d9a16e273eac999064981d8813a68af762e93567a43aac\\n    bytes32 constant RELAYER_ACTION_DEPLOY_FEES_CONFIRM = keccak256(\\\"RELAYER_ACTION_DEPLOY_FEES_CONFIRM\\\");\\n    // 0x9d62257b25ea052fe7cd5123fd6b791268b8673b073aae5de4a823c4dc7d7607\\n    bytes32 constant RELAYER_ACTION_SEND_FEES = keccak256(\\\"RELAYER_ACTION_SEND_FEES\\\");\\n    /*----------------------------------------------------------------------*/\\n}\\n\",\"keccak256\":\"0xf3b8807f72ec8424169fae2f19263439859ede025a6adf2a85060b8c9a8f94a6\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/helpers/Enums.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/// enums\\nenum FeeCurrency {\\n    Null,\\n    // L1\\n    Native,\\n    // different asset\\n    Token\\n}\\n\\nenum FeeType {\\n    Null,\\n    // absolute/onetime\\n    Default,\\n    // buy/sell depending on target\\n    From,\\n    // buy/sell depending on target\\n    To\\n}\\n\\nenum FeeSyncAction {\\n    Null,\\n    // adding a fee\\n    Add,\\n    // updating a fee\\n    Update,\\n    // removing a fee\\n    Delete\\n}\\n\\nenum FeeDeployState {\\n    Null,\\n    // a fee is recently added, updated or removed\\n    Queued,\\n    // a fee config is deployed\\n    Pending,\\n    // a fee gets receives information about being deployed\\n    Deployed\\n}\\n\",\"keccak256\":\"0x0c969525e1a2602179c6b12648cd070a7850be970ae4845b2857d1e888799873\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/helpers/Functions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.17;\\n\\nimport { AddressZero } from \\\"./GenericErrors.sol\\\";\\n\\nfunction addressZeroCheck(address _candidate) pure {\\n    if (_candidate == address(0)) revert AddressZero();\\n}\\n\",\"keccak256\":\"0x944f958352170d69f64999ddbf8d0045b888b1ea3fe73dda77bf435fa80ee763\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/helpers/GenericErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nerror AddressZero();\\nerror ZeroValueNotAllowed();\\nerror InsufficientAllowance();\\nerror InsufficientBalance();\\nerror InsufficientFunds();\\nerror NotAllowed();\\nerror AlreadyInitialized();\\nerror NoReetrancy();\\nerror WrongChain();\\nerror UnexpectedBalance();\\nerror FailToSendNative();\\nerror MissingData();\\n\",\"keccak256\":\"0x51f03c4271fb3d96ec8521c1d058831b0851fc703583c3385ff2440b32a8d738\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/helpers/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport { FeeCurrency, FeeType, FeeSyncAction, FeeDeployState } from \\\"./Enums.sol\\\";\\n\\n/// General Fee Config\\n\\nstruct FeeConfig {\\n    // relative: 10000 = 1% or 100 = 0.01%\\n    // absolute: 10000 = 1 or 1 = 0.0001\\n    uint256 fee;\\n    // Assets are always going to the fee distributor on the home chain. This config is necessary to define which receiver gets this asset.\\n    // It's purpose can be overwritten by the FeeDistributor. So it will serve as a fallback.\\n    address receiver;\\n    // defines the type. It does not have a purpose yet but may have in the future\\n    // see {Enums->FeeType}\\n    FeeType ftype;\\n    // type of how the fees should be handles\\n    // see {Enums->FeeCurrency}\\n    FeeCurrency currency;\\n    // // Deploy state of a fee config\\n    // // see {Enums->FeeDeployState}\\n    // FeeDeployState deployState;\\n}\\n\\n/// Fee Management\\n\\nstruct AddFeeConfigParams {\\n    // fee id which can be defined elsewhere but needs to be a bytes32\\n    bytes32 id;\\n    // see {struct FeeConfig->fee}\\n    uint256 fee;\\n    // see {struct FeeConfig->receiver}\\n    address receiver;\\n    // see {struct FeeConfig->ftype}\\n    FeeType ftype;\\n    // see {struct FeeConfig->currency}\\n    FeeCurrency currency;\\n}\\n\\nstruct UpdateFeeConfigParams {\\n    // see {struct AddFeeConfigParams->id}\\n    bytes32 id;\\n    // see {struct FeeConfig->fee}\\n    uint256 fee;\\n    // see {struct FeeConfig->fee}\\n    address receiver;\\n}\\n\\nstruct RemoveFeeConfigParams {\\n    // see {struct AddFeeConfigParams->id}\\n    bytes32 id;\\n}\\n\\n/// Chain Management\\n\\nstruct AddChainParams {\\n    // chain id\\n    uint256 chainId;\\n    // address of the participant, most likely the diamon address of the target chain\\n    address target;\\n}\\nstruct RemoveChainParams {\\n    // chain id\\n    uint256 chainId;\\n}\\n\\n/// Fee & Chain Management\\n\\nstruct AssignFeeConfigToChainParams {\\n    // fee config id\\n    bytes32 id;\\n    // chain id to assign the fee config id to\\n    uint256 chainId;\\n}\\nstruct UnassignFeeConfigFromChainParams {\\n    // fee config id\\n    bytes32 id;\\n    // chain id to unassign the fee config id from\\n    uint256 chainId;\\n}\\nstruct UnassignFeeConfigFromAllChainsParams {\\n    // fee config id\\n    bytes32 id;\\n}\\n\\n/// Syncing\\n\\nstruct FeeSyncQueue {\\n    // fee config id\\n    bytes32 id;\\n    // chain id\\n    uint256 chainId;\\n    // action to execute on the target chain\\n    FeeSyncAction action;\\n}\\n\\nstruct FeeConfigDeployState {\\n    bytes32 id;\\n    FeeDeployState state;\\n}\\n\\n/// Data Transfer Objects\\n\\nstruct FeeConfigSyncDTO {\\n    // fee config id\\n    bytes32 id;\\n    // fee value\\n    uint256 fee;\\n    // address to make conditional charged based on a specific token\\n    // a contract can decide by itself whether to it or not\\n    // if defined and used, this fee should be restricted and charged onto a specific token\\n    address target;\\n    // desired action to execute on the target chain\\n    FeeSyncAction action;\\n}\\nstruct FeeConfigSyncHomeFees {\\n    // fee config id\\n    bytes32 id;\\n    // amount of the collected fees of this if\\n    uint256 amount;\\n}\\nstruct FeeConfigSyncHomeDTO {\\n    // total amount of collected fees\\n    uint256 totalFees;\\n    // address of the bounty receiver on the home chain\\n    address bountyReceiver;\\n    // containing fee information that will moved to the home chain\\n    FeeConfigSyncHomeFees[] fees;\\n}\\n\\nstruct CelerRelayerData {\\n    // bytes32 hash which defined the action that should be taken\\n    bytes32 what;\\n    // address of the contract which what is being executed to\\n    address target;\\n    // encoded message of the desired scope\\n    bytes message;\\n}\\n\\n/// Fee Store\\n\\nstruct FeeStoreConfig {\\n    // fee config id\\n    bytes32 id;\\n    // fee\\n    uint256 fee;\\n    // address of the contract which what is being executed to\\n    address target;\\n    // flag for being markes as deleted\\n    bool deleted;\\n}\\n\\n/// Fee Distributor\\n\\nstruct AddReceiverParams {\\n    // public name for the receiver\\n    // can be \\\"Staking\\\", \\\"Liquidity Backing\\\" or whatever\\n    string name;\\n    // potion of share in points. Points will be summarized in the distribution to calculate the relative share\\n    uint64 points;\\n    // address of the contract/account that receives the share\\n    address account;\\n    // swap path in case a share receiver expects another token then the intermediate token of the bridge\\n    address[] swapPath;\\n}\\n\",\"keccak256\":\"0x4ce7534af69a6112e17237cd7b86f9c679ce510d363025c6a946ddd27a61527d\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/interfaces/IDepositable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.19;\\n\\n/// @title Depositable Interface\\n/// @author Daniel <danieldegendev@gmail.com>\\ninterface IDepositable {\\n    /// Deposits a token into corresponding contracts like \\\"Liquidity Backing\\\" and \\\"Staking\\\"\\n    /// @param _token address of the token that should be deposited\\n    /// @param _amount amount of token\\n    function deposit(address _token, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xb0287115ecba82425c4aed9297a58334bc327aaa229d329ee75e7078050091de\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/interfaces/IFeeGenericFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.19;\\n\\n/// @title Fee Generic Facet Interface\\n/// @author Daniel <danieldegendev@gmail.com>\\ninterface IFeeGenericFacet {\\n    event Distributed(address indexed account, uint256 amount);\\n    event Collected(bytes32 indexed feeId, uint256 amount);\\n\\n    /// @return _is whether the diamond is on the home chain or not\\n    function feeGenericIsHomeChain() external view returns (bool _is);\\n\\n    /// @return _homeChainId block.chainid of the configured home chain\\n    function feeGenericGetHomeChainId() external view returns (uint256 _homeChainId);\\n\\n    /// @return _is true if it's initialized, else false\\n    function feeGenericIsInitialized() external view returns (bool _is);\\n\\n    /// Deposits a single fee with native currency\\n    /// @param _feeId fee id in bytes32\\n    /// @param _bountyReceiver address of the receiver of the bounty\\n    /// @param _bountyShareInBps bounty share in basis points\\n    /// @return _feeAmount fee amount that is being added\\n    /// @return _bountyAmount amount for the bounty receiver\\n    function feeGenericDepositSingleFeeNative(\\n        bytes32 _feeId,\\n        address _bountyReceiver,\\n        uint256 _bountyShareInBps\\n    ) external payable returns (uint256 _feeAmount, uint256 _bountyAmount);\\n\\n    /// Response the value of the fee\\n    /// @param _feeId fee id in bytes32\\n    function feeGenericGetFee(bytes32 _feeId) external view returns (uint256 _fee);\\n}\\n\",\"keccak256\":\"0x1d085ccadfd126ecc317a1b30467a2679a48ff6ba3d6a701968395601e791c83\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/interfaces/IFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.19;\\n\\nimport { FeeConfig } from \\\"./../helpers/Structs.sol\\\";\\n\\ninterface IFeeManager {\\n    function getFeeConfig(bytes32 _id) external view returns (FeeConfig memory _feeConfig);\\n}\\n\",\"keccak256\":\"0x1e3f72ae62db9dd4a41dc521736044feaea22916e1100303f545f31c01fb37be\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/interfaces/IFeeStoreFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.17;\\n\\nimport { FeeStoreConfig, FeeConfigSyncDTO, FeeConfigSyncHomeDTO } from \\\"./../helpers/Structs.sol\\\";\\n\\n/// @title Fee Store Facet Interface\\n/// @author Daniel <danieldegendev@gmail.com>\\ninterface IFeeStoreFacet {\\n    /// Synchronizes fee configs\\n    /// @param _feeConfigSyncDTO array of fee configs to process in the fee store\\n    function syncFees(FeeConfigSyncDTO[] calldata _feeConfigSyncDTO) external payable;\\n\\n    /// Restores fees which are actually intended to be sent to the home chain\\n    /// @param _dto data which is primarily used for sending fees to the home chain\\n    function restoreFeesFromSendFees(FeeConfigSyncHomeDTO memory _dto) external payable;\\n\\n    /// Gets a fee store config based on the fee id\\n    /// @param _id fee config id\\n    /// @return _feeStoreConfig FeeStoreConfig, see {contracts/diamond/helpers/Structs.sol#FeeStoreConfig}\\n    function getFeeStoreConfig(bytes32 _id) external view returns (FeeStoreConfig memory _feeStoreConfig);\\n}\\n\",\"keccak256\":\"0xffe8110b7ded90364156e20e7a78e0f5feb765530741aa71698650a611f3f33f\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/interfaces/INativeWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.19;\\n\\ninterface INativeWrapper {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0xe7056009fd9dd1df4595c5f95c25514edeaf8c1bf859697608b8bfac45f9bb06\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/interfaces/IRouter02.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.17;\\n\\n/// @title Partial Interface of a Uniswap V2 based router\\n/// @author Daniel <danieldegendev@gmail.com>\\ninterface IRouter02 {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForAVAX(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactAVAXForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\n\\n    function factory() external returns (address);\\n}\\n\",\"keccak256\":\"0x5270590d96486e502778b28db3d85ac4d764b1f859b2a0364153c55599b6ac99\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/interfaces/IWAVAX.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\ninterface IWAVAX {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x5186b26fd4d223e32d7771f34e30ae6f7302bf93174e5aa12ff8b65e52340f87\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/libraries/LibAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nlibrary LibAccessControlEnumerable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    bytes32 constant ACCESS_CONTROL_STORAGE_POSITION = keccak256(\\\"degenx.access.control.storage\\\");\\n\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct AccessControlStorage {\\n        mapping(bytes32 => RoleData) roles;\\n        mapping(bytes32 => EnumerableSet.AddressSet) roleMembers;\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    function accessControlStorage() internal pure returns (AccessControlStorage storage acs) {\\n        bytes32 position = ACCESS_CONTROL_STORAGE_POSITION;\\n        assembly {\\n            acs.slot := position\\n        }\\n    }\\n\\n    function checkRole(bytes32 role) internal view {\\n        checkRole(role, msg.sender);\\n    }\\n\\n    function checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    function hasRole(bytes32 role, address account) internal view returns (bool) {\\n        AccessControlStorage storage acs = accessControlStorage();\\n        return acs.roles[role].members[account];\\n    }\\n\\n    function grantRole(bytes32 role, address account) internal {\\n        AccessControlStorage storage acs = accessControlStorage();\\n        if (!hasRole(role, account)) {\\n            acs.roles[role].members[account] = true;\\n            emit RoleGranted(role, account, msg.sender);\\n            acs.roleMembers[role].add(account);\\n        }\\n    }\\n\\n    function revokeRole(bytes32 role, address account) internal {\\n        AccessControlStorage storage acs = accessControlStorage();\\n        if (hasRole(role, account)) {\\n            acs.roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, msg.sender);\\n            acs.roleMembers[role].remove(account);\\n        }\\n    }\\n\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        AccessControlStorage storage acs = accessControlStorage();\\n        bytes32 previousAdminRole = acs.roles[role].adminRole;\\n        acs.roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n}\\n\",\"keccak256\":\"0xd72f7b388e9d30e2f0dfeaf2dabf1f85785802488695de9b6db540744c7179f3\",\"license\":\"MIT\"},\"contracts/diamond/libraries/LibFeeDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.19;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport { IWAVAX } from \\\"./../interfaces/IWAVAX.sol\\\";\\nimport { IRouter02 } from \\\"./../interfaces/IRouter02.sol\\\";\\nimport { IDepositable } from \\\"./../interfaces/IDepositable.sol\\\";\\nimport { LibFeeManager } from \\\"./LibFeeManager.sol\\\";\\nimport { LibFeeDistributorStorage } from \\\"./LibFeeDistributorStorage.sol\\\";\\nimport { LibAccessControlEnumerable } from \\\"./LibAccessControlEnumerable.sol\\\";\\nimport { Constants } from \\\"./../helpers/Constants.sol\\\";\\nimport { MissingData } from \\\"./../helpers/GenericErrors.sol\\\";\\nimport { FeeConfigSyncHomeDTO, FeeConfigSyncHomeFees } from \\\"./../helpers/Structs.sol\\\";\\n\\n/// @title Lib Fee Distributor\\n/// @author Daniel <danieldegendev@gmail.com>\\n/// @notice Library for the fee distributor facet\\nlibrary LibFeeDistributor {\\n    using Address for address;\\n    using Address for address payable;\\n\\n    // TODO put into generic events interface or something\\n    event TriggerDistributionWhileNotRunning();\\n    event Distributed(address indexed account, uint256 amount);\\n    event BountyPaid(uint256 amount, address indexed receiver);\\n\\n    /// Distributes the fees to the desired receivers based on their share\\n    /// @param _dto a dto that needs to be synced\\n    /// @dev If the distribution is running, it'll distribute it directly, otherwise it will be queued up and distributed once the distirbution is enabled\\n    function pushFees(FeeConfigSyncHomeDTO memory _dto) internal {\\n        LibFeeDistributorStorage.Storage storage s = LibFeeDistributorStorage.store();\\n        if (_dto.fees.length == 0) revert MissingData();\\n        // more efficient way to check this before and not in loop\\n        if (s.running) {\\n            for (uint256 i = 0; i < _dto.fees.length; ) {\\n                distribute(LibFeeManager.getFeeConfigById(_dto.fees[i].id).receiver, _dto.fees[i].amount);\\n                unchecked {\\n                    i++;\\n                }\\n            }\\n        } else {\\n            FeeConfigSyncHomeDTO storage _q = s.queue.push();\\n            _q.totalFees = _dto.totalFees;\\n            _q.bountyReceiver = _dto.bountyReceiver;\\n            for (uint256 i = 0; i < _dto.fees.length; ) {\\n                _q.fees.push(FeeConfigSyncHomeFees({ id: _dto.fees[i].id, amount: _dto.fees[i].amount }));\\n                unchecked {\\n                    i++;\\n                }\\n            }\\n            emit TriggerDistributionWhileNotRunning();\\n        }\\n    }\\n\\n    /// Distributes the fees to the desired addresses\\n    /// @param _receiver address of the receiver, can be address(0)\\n    /// @param _amount amount of tokens being distributed\\n    /// @dev If the receiver is address(0), the funds will be distributed to all defined shares based on their points and desired swap\\n    /// @dev If the receiver is not address(0), the funds will be directly send to the address\\n    function distribute(address _receiver, uint256 _amount) internal {\\n        LibFeeDistributorStorage.Storage storage s = LibFeeDistributorStorage.store();\\n        if (_receiver == address(0) && s.totalPoints > 0) {\\n            uint256 _rest = _amount;\\n            uint256 _shareCount = s.shares.length;\\n            for (uint256 i = 0; i < _shareCount; i++) {\\n                LibFeeDistributorStorage.Share storage _share = s.shares[i];\\n\\n                bool _useRest = _shareCount == i + 1;\\n                uint256 _shareAmount = _useRest ? _rest : (_amount * uint256(_share.points)) / uint256(s.totalPoints);\\n                _rest = _useRest ? 0 : _rest - _shareAmount;\\n\\n                if (_share.swap.length > 1) {\\n                    address _token = _share.swap[_share.swap.length - 1];\\n                    uint256[] memory amounts = IRouter02(s.router).swapExactAVAXForTokens{ value: _shareAmount }(\\n                        0,\\n                        _share.swap,\\n                        _share.receiver.isContract() ? address(this) : _share.receiver,\\n                        block.timestamp\\n                    );\\n                    _shareAmount = amounts[amounts.length - 1];\\n                    if (_share.receiver.isContract()) {\\n                        IERC20(_token).approve(_share.receiver, _shareAmount);\\n                        IDepositable(_share.receiver).deposit(_token, _shareAmount);\\n                    }\\n                    emit Distributed(_share.receiver, _shareAmount);\\n                } else if (_share.receiver.isContract()) {\\n                    IWAVAX(s.nativeWrapper).deposit{ value: _shareAmount }();\\n                    IERC20(s.nativeWrapper).approve(_share.receiver, _shareAmount);\\n                    IDepositable(_share.receiver).deposit(s.nativeWrapper, _shareAmount);\\n                    emit Distributed(_share.receiver, _shareAmount);\\n                } else {\\n                    payable(_share.receiver).sendValue(_shareAmount);\\n                    emit Distributed(_share.receiver, _shareAmount);\\n                }\\n            }\\n        } else {\\n            payable(_receiver).sendValue(_amount);\\n            emit Distributed(_receiver, _amount);\\n        }\\n    }\\n\\n    /// Set the the running state of the distributor\\n    /// @param _running flag\\n    function setRunning(bool _running) internal {\\n        LibFeeDistributorStorage.store().running = _running;\\n    }\\n\\n    /// Pays out the bounty to the bounty receiver\\n    /// @param _token address of the asset\\n    /// @param _amount amount of the asser\\n    /// @param _receiver address of the bounty receiver\\n    /// @dev only pays out the bounty if the distributor is running\\n    function payoutBountyInToken(\\n        address _token,\\n        uint256 _amount,\\n        address _receiver\\n    ) internal returns (uint256 _amountLeft, uint256 _bountyAmount) {\\n        LibFeeDistributorStorage.Storage storage s = LibFeeDistributorStorage.store();\\n        _amountLeft = _amount;\\n        if (s.running && s.bountyActive && s.bountyShare > 0 && _receiver != address(0) && _amountLeft > 0) {\\n            _bountyAmount = (_amountLeft * s.bountyShare) / 10 ** 4;\\n            _amountLeft -= _bountyAmount;\\n            s.totalBounties += _bountyAmount;\\n            s.lastBountyAmount = _bountyAmount;\\n            s.lastBountyReceiver = _receiver;\\n            // slither-disable-next-line unchecked-transfer\\n            IERC20(_token).transfer(_receiver, _bountyAmount);\\n            emit BountyPaid(_bountyAmount, _receiver);\\n        }\\n    }\\n\\n    /// Pays out the bounty to the bounty receiver\\n    /// @param _amount amount of the asser\\n    /// @param _receiver address of the bounty receiver\\n    /// @dev only pays out the bounty if the distributor is running\\n    function payoutBountyInNative(uint256 _amount, address _receiver) internal returns (uint256 _amountLeft, uint256 _bountyAmount) {\\n        LibFeeDistributorStorage.Storage storage s = LibFeeDistributorStorage.store();\\n        (_amountLeft, _bountyAmount) = payoutBountyInNativeWithCustomShare(_amount, _receiver, s.bountyShare);\\n    }\\n\\n    /// Pays out the bounty to the bounty receiver with a given custom share\\n    /// @param _amount base amount for the bounty calculation\\n    /// @param _receiver address of the bounty receiver\\n    /// @param _customShare bps of the custom share of the bounty\\n    function payoutBountyInNativeWithCustomShare(\\n        uint256 _amount,\\n        address _receiver,\\n        uint256 _customShare\\n    ) internal returns (uint256 _amountLeft, uint256 _bountyAmount) {\\n        LibFeeDistributorStorage.Storage storage s = LibFeeDistributorStorage.store();\\n        _amountLeft = _amount;\\n        if (s.running && s.bountyActive && _customShare > 0 && _receiver != address(0) && _amountLeft > 0) {\\n            _bountyAmount = (_amountLeft * _customShare) / 10 ** 4;\\n            _amountLeft -= _bountyAmount;\\n            s.totalBounties += _bountyAmount;\\n            s.lastBountyAmount = _bountyAmount;\\n            s.lastBountyReceiver = _receiver;\\n            payable(_receiver).sendValue(_bountyAmount);\\n            emit BountyPaid(_bountyAmount, _receiver);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x068cf778c168fbfa309975606bf308e9c07709fc8d050f99bb0a6aaa7472f4dd\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/libraries/LibFeeDistributorStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.19;\\n\\nimport { FeeConfigSyncHomeDTO } from \\\"./../helpers/Structs.sol\\\";\\n\\n/// @title Lib Fee Distributor Storage\\n/// @author Daniel <danieldegendev@gmail.com>\\n/// @notice Storage library for the fee distributor facet\\nlibrary LibFeeDistributorStorage {\\n    bytes32 constant FEE_DISTRIBUTOR_STORAGE_NAMESPACE = keccak256(\\\"degenx.fee-distributor.storage.v1\\\");\\n\\n    /// @param name the name of the fee share for the UI\\n    /// @param points the fee share points\\n    /// @param receiver the receiver of the fee share\\n    /// @param swap a dedicated swapping path for the fee share\\n    struct Share {\\n        string name;\\n        uint64 points;\\n        address receiver;\\n        address[] swap;\\n    }\\n\\n    /// @param shares stores the shares in an array\\n    /// @param queue stores a queue of fees that can be send home\\n    /// @param shareIndex store the share index of the shares array\\n    /// @param totalPoints cumulative share points\\n    /// @param baseToken the expected token from the bridge\\n    /// @param router uniswap v2 based router\\n    /// @param bountyShare share of the bounty\\n    /// @param bountyReceiver bounty receiver for processing purposes\\n    /// @param lastBountyReceiver last recent bounty receiver\\n    /// @param lastBountyAmount last recent bounty amount that receiver got\\n    /// @param totalBounties total amount of bounties paid out\\n    /// @param running running state of the fee distributor\\n    /// @param bountyActive is a bounty active or not\\n    /// @param initialized initialize state of the facet\\n    struct Storage {\\n        Share[] shares;\\n        FeeConfigSyncHomeDTO[] queue;\\n        mapping(address => uint256) shareIndex;\\n        uint64 totalPoints;\\n        address baseToken;\\n        address nativeWrapper;\\n        address router;\\n        uint256 pushFeesGasCompensationForCaller;\\n        // bounties\\n        uint64 bountyShare;\\n        address bountyReceiver;\\n        address lastBountyReceiver;\\n        uint256 lastBountyAmount;\\n        uint256 totalBounties;\\n        // flags\\n        bool running;\\n        bool bountyActive;\\n        bool bountyInToken;\\n        bool initialized;\\n    }\\n\\n    /// Store\\n    function store() internal pure returns (Storage storage _s) {\\n        bytes32 position = FEE_DISTRIBUTOR_STORAGE_NAMESPACE;\\n        assembly {\\n            _s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631c866a2584cbdd7f3ff6115dfcaf4564bc70e69af8372b400d22ae35f8d09b\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/libraries/LibFeeGeneric.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.19;\\n\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { IRouter02 } from \\\"./../interfaces/IRouter02.sol\\\";\\nimport { INativeWrapper } from \\\"./../interfaces/INativeWrapper.sol\\\";\\nimport { IFeeGenericFacet } from \\\"./../interfaces/IFeeGenericFacet.sol\\\";\\nimport { IFeeManager } from \\\"./../interfaces/IFeeManager.sol\\\";\\nimport { IFeeStoreFacet } from \\\"./../interfaces/IFeeStoreFacet.sol\\\";\\n\\nimport { LibFeeStore } from \\\"./LibFeeStore.sol\\\";\\nimport { LibFeeDistributor } from \\\"./LibFeeDistributor.sol\\\";\\nimport { LibFeeGenericStorage } from \\\"./LibFeeGenericStorage.sol\\\";\\n\\nimport { ZeroValueNotAllowed, WrongChain } from \\\"./../helpers/GenericErrors.sol\\\";\\nimport { FeeConfigSyncHomeDTO, FeeConfigSyncHomeFees, FeeConfig } from \\\"./../helpers/Structs.sol\\\";\\n\\n/// @title Lib Fee Generic\\n/// @author Daniel <danieldegendev@gmail.com>\\n/// @notice Library for generic functions of the fee protocol\\nlibrary LibFeeGeneric {\\n    using Address for address;\\n    using Address for address payable;\\n\\n    event BountyPaid(uint256 bountyAmount, address indexed bountyReceiver);\\n    event Collected(bytes32 indexed feeId, uint256 amount);\\n\\n    /// @return _is true if is home chain, else false\\n    function isHomeChain() internal view returns (bool _is) {\\n        _is = LibFeeGenericStorage.store().isHomeChain;\\n    }\\n\\n    /// @return _is true if it's initialized, else false\\n    function isInitialized() internal view returns (bool _is) {\\n        _is = LibFeeGenericStorage.store().initialized;\\n    }\\n\\n    /// @return _homeChainId configured home chain id\\n    function getHomeChainId() internal view returns (uint256 _homeChainId) {\\n        _homeChainId = LibFeeGenericStorage.store().homeChainId;\\n    }\\n\\n    /// @return _nativeWrapper address of the native wrapper token\\n    function getNativeWrapper() internal view returns (address _nativeWrapper) {\\n        _nativeWrapper = LibFeeGenericStorage.store().nativeWrapper;\\n    }\\n\\n    /// @return _uniswapV2Router address of a v2 conform dex router\\n    function getUniswapV2Router() internal view returns (address _uniswapV2Router) {\\n        _uniswapV2Router = LibFeeGenericStorage.store().uniswapV2Router;\\n    }\\n\\n    /// Deposits a single fee with native currency on the home chain\\n    /// @param _feeId fee id in bytes32\\n    /// @param _bountyReceiver address of the receiver of the bounty\\n    /// @param _bountyShareInBps bounty share in basis points\\n    /// @return _feeAmount fee amount that is being added\\n    /// @return _bountyAmount amount for the bounty receiver\\n    /// @dev interacts with the fee distributor\\n    function depositSingleFeeNativeOnHomeChain(\\n        bytes32 _feeId,\\n        address _bountyReceiver,\\n        uint256 _bountyShareInBps\\n    ) internal returns (uint256 _feeAmount, uint256 _bountyAmount) {\\n        _feeAmount = msg.value;\\n        (_feeAmount, _bountyAmount) = LibFeeDistributor.payoutBountyInNativeWithCustomShare(_feeAmount, _bountyReceiver, _bountyShareInBps);\\n        FeeConfigSyncHomeDTO memory _updatedDto = FeeConfigSyncHomeDTO({\\n            totalFees: _feeAmount,\\n            bountyReceiver: _bountyReceiver,\\n            fees: new FeeConfigSyncHomeFees[](1)\\n        });\\n        _updatedDto.fees[0] = FeeConfigSyncHomeFees({ id: _feeId, amount: _feeAmount });\\n        LibFeeDistributor.pushFees(_updatedDto);\\n    }\\n\\n    /// Deposits a single fee with native currency on the target chain\\n    /// @param _feeId fee id in bytes32\\n    /// @param _bountyReceiver address of the receiver of the bounty\\n    /// @param _bountyShareInBps bounty share in basis points\\n    /// @return _feeAmount fee amount that is being added\\n    /// @return _bountyAmount amount for the bounty receiver\\n    /// @dev interacts with the fee store\\n    function depositSingleFeeNativeOnTargetChain(\\n        bytes32 _feeId,\\n        address _bountyReceiver,\\n        uint256 _bountyShareInBps\\n    ) internal returns (uint256 _feeAmount, uint256 _bountyAmount) {\\n        uint256 _amount = msg.value;\\n\\n        if (_bountyShareInBps > 0 && _bountyReceiver != address(0)) {\\n            _bountyAmount = (_amount * _bountyShareInBps) / 10 ** 4;\\n            _amount -= _bountyAmount;\\n            payable(_bountyReceiver).sendValue(_bountyAmount);\\n            emit BountyPaid(_bountyAmount, _bountyReceiver);\\n        }\\n\\n        // convert native to native wrapper before because swapExactTokensForTokens is more generic than swapExactAVAX or swapExcatETH\\n        INativeWrapper(getNativeWrapper()).deposit{ value: _amount }();\\n\\n        IERC20(getNativeWrapper()).approve(getUniswapV2Router(), _amount);\\n        address[] memory _path = new address[](2);\\n        _path[0] = getNativeWrapper();\\n        _path[1] = LibFeeStore.getIntermediateAsset();\\n        uint256[] memory _amountsOut = IRouter02(getUniswapV2Router()).getAmountsOut(_amount, _path);\\n        uint256[] memory _amounts = IRouter02(getUniswapV2Router()).swapExactTokensForTokens(\\n            _amount,\\n            (_amountsOut[_amountsOut.length - 1] * 9900) / 10 ** 4, // 1% slippage\\n            _path,\\n            address(this),\\n            block.timestamp + 60\\n        );\\n\\n        _feeAmount = _amounts[_amounts.length - 1];\\n\\n        LibFeeStore.putFees(_feeId, _feeAmount);\\n\\n        emit Collected(_feeId, _feeAmount);\\n    }\\n\\n    function getFeeOnHomeChain(bytes32 _feeId) internal view returns (uint256 _fee) {\\n        _fee = IFeeManager(address(this)).getFeeConfig(_feeId).fee;\\n    }\\n\\n    function getFeeOnTargetChain(bytes32 _feeId) internal view returns (uint256 _fee) {\\n        _fee = IFeeStoreFacet(address(this)).getFeeStoreConfig(_feeId).fee;\\n    }\\n}\\n\",\"keccak256\":\"0x2bd3638e7b4594ed3843c54a05c50c3e502c9b8c30c4e1ce70c16b68d7243bfd\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/libraries/LibFeeGenericStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.19;\\n\\n/// @title Lib Fee Generic Storage\\n/// @author Daniel <danieldegendev@gmail.com>\\n/// @notice Storage for the Fee Generic Facet\\nlibrary LibFeeGenericStorage {\\n    bytes32 constant FEE_GENERIC_STORAGE_POSITION = keccak256(\\\"degenx.fee-generic.storage.v1\\\");\\n\\n    struct Storage {\\n        uint256 homeChainId;\\n        address nativeWrapper;\\n        address uniswapV2Router;\\n        bool isHomeChain;\\n        bool initialized;\\n    }\\n\\n    /// store\\n    function store() internal pure returns (Storage storage _s) {\\n        bytes32 position = FEE_GENERIC_STORAGE_POSITION;\\n        assembly {\\n            _s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdc8944de587286f2f8a74885af9dd94f27256a2d27a7a41f669c734cd432931d\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/libraries/LibFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.19;\\n\\nimport \\\"./LibFeeManagerStorage.sol\\\";\\nimport { FeeConfig, FeeSyncQueue } from \\\"./../helpers/Structs.sol\\\";\\nimport { FeeType, FeeSyncAction, FeeDeployState } from \\\"./../helpers/Enums.sol\\\";\\n\\n/// @title Lib Fee Manager\\n/// @author Daniel <danieldegendev@gmail.com>\\n/// @notice Helper functions for the Fee Manager Facet\\nlibrary LibFeeManager {\\n    /// viewables\\n\\n    /// Checks whether a fee config exsists or not\\n    /// @param _id fee config id\\n    function exists(bytes32 _id) internal view returns (bool _exists) {\\n        _exists = LibFeeManagerStorage.feeManagerStorage().feeConfigs[_id].ftype != FeeType.Null;\\n    }\\n\\n    /// Checks whether a fee config is in use on a specific chain or not\\n    /// @param _id fee config id\\n    function isFeeConfigInUse(bytes32 _id) internal view returns (bool _exists) {\\n        for (uint256 i = 0; i < store().chainIds.length; i++) {\\n            for (uint256 j = 0; j < store().chainIdFeeConfigMap[store().chainIds[i]].length; j++) {\\n                if (store().chainIdFeeConfigMap[store().chainIds[i]][j] == _id) {\\n                    _exists = true;\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// Gets the target address for a specific chain\\n    /// @param _chainId chain id\\n    /// @dev normally the address of the diamond on the target chain\\n    function getChainTarget(uint256 _chainId) internal view returns (address _target) {\\n        _target = store().chainTargets[_chainId];\\n    }\\n\\n    /// Gets the fee config by a given id\\n    /// @param _id fee config id\\n    function getFeeConfigById(bytes32 _id) internal view returns (FeeConfig memory _feeConfig) {\\n        LibFeeManagerStorage.FeeManagerStorage storage s = LibFeeManagerStorage.feeManagerStorage();\\n        _feeConfig = s.feeConfigs[_id];\\n    }\\n\\n    /// internals\\n\\n    /// Queues up a specific fee config for a specific chain with a specific action\\n    /// @param _id fee config id\\n    /// @param _chainId chain id\\n    /// @param _action action to execute on the target chain\\n    function queue(bytes32 _id, uint256 _chainId, FeeSyncAction _action) internal {\\n        LibFeeManagerStorage.FeeManagerStorage storage s = LibFeeManagerStorage.feeManagerStorage();\\n        bool alreadInQueue = false;\\n        for (uint256 i = 0; i < s.feeSyncQueue[_chainId].length; i++)\\n            alreadInQueue = alreadInQueue || (s.feeSyncQueue[_chainId][i].id == _id && s.feeSyncQueue[_chainId][i].chainId == _chainId);\\n\\n        if (!alreadInQueue) {\\n            s.feeSyncQueue[_chainId].push(FeeSyncQueue({ id: _id, chainId: _chainId, action: _action }));\\n            s.feeDeployState[_chainId][_id] = FeeDeployState.Queued;\\n        }\\n    }\\n\\n    /// Simple archiving of fee configs\\n    /// @param _id fee config id\\n    /// will be called on update and delete of a fee config\\n    function archiveFeeConfig(bytes32 _id) internal {\\n        FeeConfig storage feeConfigToArchive = LibFeeManagerStorage.feeManagerStorage().feeConfigs[_id];\\n        LibFeeManagerStorage.feeManagerStorage().feeConfigsArchive[_id].push(feeConfigToArchive);\\n    }\\n\\n    /// store\\n    function store() internal pure returns (LibFeeManagerStorage.FeeManagerStorage storage _store) {\\n        _store = LibFeeManagerStorage.feeManagerStorage();\\n    }\\n}\\n\",\"keccak256\":\"0x29586e749e5c7562908180febb0ce2077423326460034f090568b6a9f45b7fc5\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/libraries/LibFeeManagerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.19;\\n\\nimport { FeeDeployState } from \\\"./../helpers/Enums.sol\\\";\\nimport { FeeConfig, FeeSyncQueue } from \\\"./../helpers/Structs.sol\\\";\\n\\n/// @title Lib Fee Manager Storage\\n/// @author Daniel <danieldegendev@gmail.com>\\n/// @notice Storage for the Fee Manager Facet\\nlibrary LibFeeManagerStorage {\\n    bytes32 constant FEE_MANAGER_STORAGE_POSITION = keccak256(\\\"degenx.fee-manager.storage.v1\\\");\\n\\n    struct FeeManagerStorage {\\n        // all available chains\\n        uint256[] chainIds;\\n        // all available configs\\n        bytes32[] feeConfigIds;\\n        // contract to chain assignments\\n        // chainId => contract\\n        mapping(uint256 => address) chainTargets;\\n        // fee config to chain assignment to store which config should be available on which chain\\n        // chainId => list of fee config ids\\n        mapping(uint256 => bytes32[]) chainIdFeeConfigMap;\\n        // flags for quick checks to avoid looping through chainIdFeeConfigMap\\n        // chainId => feeConfigId\\n        mapping(uint256 => mapping(bytes32 => bool)) chainIdFeeConfig;\\n        // flag if a specific chain is being supported\\n        // chainId => true/false\\n        mapping(uint256 => bool) isChainSupported;\\n        // fee config id to fee config mapping. The fee config itself doesn't need to know its id\\n        // feeConfigId => FeeConfig\\n        mapping(bytes32 => FeeConfig) feeConfigs;\\n        // fee config archive of recent fee config settings to a specific fee config id\\n        // feeConfigId => list of fee config variants\\n        mapping(bytes32 => FeeConfig[]) feeConfigsArchive;\\n        // queue for syncing configs with the target contracts\\n        // chainId => list of fee sync data\\n        mapping(uint256 => FeeSyncQueue[]) feeSyncQueue;\\n        // deployment state per chain per fee config id\\n        // chainId => fee config id => deployment state of a fee config\\n        mapping(uint256 => mapping(bytes32 => FeeDeployState)) feeDeployState;\\n    }\\n\\n    /// store\\n    function feeManagerStorage() internal pure returns (FeeManagerStorage storage fms) {\\n        bytes32 position = FEE_MANAGER_STORAGE_POSITION;\\n        assembly {\\n            fms.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf75585e28177d67470e525ee0e38896aa7de5d57a4ea239138c44d7cdc76f1c2\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/libraries/LibFeeStore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.17;\\n\\nimport { IERC20Metadata } from \\\"@solidstate/contracts/token/ERC20/metadata/IERC20Metadata.sol\\\";\\nimport { SafeERC20 } from \\\"@solidstate/contracts/utils/SafeERC20.sol\\\";\\nimport { IERC20 } from \\\"@solidstate/contracts/interfaces/IERC20.sol\\\";\\n\\nimport { LibFeeStoreStorage } from \\\"./LibFeeStoreStorage.sol\\\";\\nimport { ZeroValueNotAllowed, NotAllowed } from \\\"./../helpers/GenericErrors.sol\\\";\\nimport { FeeStoreConfig, FeeConfigSyncHomeDTO, FeeConfigSyncHomeFees } from \\\"./../helpers/Structs.sol\\\";\\n\\n/// @title Fee Store Library\\n/// @author Daniel <danieldegendev@gmail.com>\\n/// @notice Functions to help with the fee store for other instances\\nlibrary LibFeeStore {\\n    using SafeERC20 for IERC20;\\n    uint256 constant BPS_DENOMINATOR = 10 ** 4;\\n\\n    error ZeroFees();\\n    error FeeNotExisting(bytes32 id);\\n    error FeeExists(bytes32 id);\\n\\n    event FeeConfigAdded(bytes32 indexed id);\\n    event FeeConfigUpdated(bytes32 indexed id);\\n    event FeeConfigDeleted(bytes32 indexed id);\\n    event FeeConfigMarkedAsDeleted(bytes32 indexed id);\\n    event FeesPrepared(uint256 amount, FeeConfigSyncHomeDTO candidate);\\n\\n    /// Store a specific amount of fees in the store\\n    /// @param _feeConfigId fee config id\\n    /// @param _amount amount of tokens\\n    function putFees(bytes32 _feeConfigId, uint256 _amount) internal {\\n        if (_amount == 0) revert ZeroValueNotAllowed();\\n        LibFeeStoreStorage.FeeStoreStorage storage s = LibFeeStoreStorage.feeStoreStorage();\\n        FeeStoreConfig memory _config = s.feeConfigs[_feeConfigId];\\n        if (_config.id == bytes32(\\\"\\\")) revert NotAllowed();\\n        s.collectedFees[_config.id] += _amount;\\n        s.collectedFeesTotal += _amount;\\n    }\\n\\n    /// Prepares the fees collected on the store to be send to the home chain\\n    /// @return _dto the dto that will be used on the home chain for receiving and process fees\\n    /// @dev this method will also clean up every fee collected and sets it to 0\\n    function prepareToSendFees() internal returns (FeeConfigSyncHomeDTO memory _dto) {\\n        LibFeeStoreStorage.FeeStoreStorage storage s = LibFeeStoreStorage.feeStoreStorage();\\n        if (s.collectedFeesTotal == 0) revert ZeroFees();\\n\\n        uint256 _feeIndex = 0;\\n        uint256 _noOfExpectedFees = 0;\\n\\n        // get how many fees need to get sent\\n        for (uint256 i = 0; i < s.feeConfigIds.length; ) {\\n            if (s.collectedFees[s.feeConfigIds[i]] > 0) _noOfExpectedFees++;\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        // collect amounts and gathers configs\\n        _dto.fees = new FeeConfigSyncHomeFees[](_noOfExpectedFees);\\n        for (uint256 i = 0; i < s.feeConfigIds.length; ) {\\n            bytes32 _id = s.feeConfigIds[i];\\n            if (s.collectedFees[_id] > 0) {\\n                uint256 _amount = s.collectedFees[_id];\\n                s.collectedFees[_id] = 0;\\n                if (s.feeConfigs[_id].deleted) deleteFee(_id);\\n                _dto.totalFees += _amount;\\n                _dto.fees[_feeIndex] = FeeConfigSyncHomeFees({ id: _id, amount: _amount });\\n                unchecked {\\n                    _feeIndex++;\\n                }\\n            }\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        s.collectedFeesTotal = 0;\\n        emit FeesPrepared(_dto.totalFees, _dto);\\n    }\\n\\n    /// Removes a fee from the store\\n    /// @param _id fee id\\n    /// @dev if a fee is still in use, it will be marked as deleted. Once fees get moved to home chain, it will be deleted properly\\n    function deleteFee(bytes32 _id) internal {\\n        LibFeeStoreStorage.FeeStoreStorage storage s = LibFeeStoreStorage.feeStoreStorage();\\n        if (s.feeConfigs[_id].id == bytes32(0)) revert FeeNotExisting(_id);\\n        if (s.collectedFees[_id] > 0) {\\n            s.feeConfigs[_id].deleted = true;\\n            emit FeeConfigMarkedAsDeleted(_id);\\n        } else {\\n            delete s.collectedFees[_id];\\n            delete s.feeConfigs[_id];\\n            for (uint256 i = 0; i < s.feeConfigIds.length; ) {\\n                if (s.feeConfigIds[i] == _id) {\\n                    s.feeConfigIds[i] = s.feeConfigIds[s.feeConfigIds.length - 1];\\n                    break;\\n                }\\n                unchecked {\\n                    i++;\\n                }\\n            }\\n            s.feeConfigIds.pop();\\n            emit FeeConfigDeleted(_id);\\n        }\\n    }\\n\\n    /// Adds a fee to the store\\n    /// @param _id fee id\\n    /// @param _fee fee value\\n    /// @param _target the target address\\n    function addFee(bytes32 _id, uint256 _fee, address _target) internal {\\n        LibFeeStoreStorage.FeeStoreStorage storage s = LibFeeStoreStorage.feeStoreStorage();\\n        if (s.feeConfigs[_id].id != bytes32(0)) revert FeeExists(_id);\\n        s.feeConfigs[_id] = FeeStoreConfig({ id: _id, fee: _fee, target: _target, deleted: false });\\n        s.feeConfigIds.push(_id);\\n        emit FeeConfigAdded(_id);\\n    }\\n\\n    /// Updates a fee on the store\\n    /// @param _id fee id\\n    /// @param _fee fee value\\n    /// @param _target the target address\\n    function updateFee(bytes32 _id, uint256 _fee, address _target) internal {\\n        LibFeeStoreStorage.FeeStoreStorage storage s = LibFeeStoreStorage.feeStoreStorage();\\n        if (s.feeConfigs[_id].id == bytes32(0)) revert FeeNotExisting(_id);\\n        s.feeConfigs[_id] = FeeStoreConfig({ id: _id, fee: _fee, target: _target, deleted: false });\\n        emit FeeConfigUpdated(_id);\\n    }\\n\\n    /// viewables\\n\\n    /// Calculates the relative fee based on the inserted amount\\n    /// @param _feeConfigId fee config id\\n    /// @param _amount amount that fees are based on\\n    /// @return _amountNet amount excluding fee\\n    /// @return _fee amount of fee\\n    /// @return _feePoints fee value that is applied\\n    function calcFeesRelative(\\n        bytes32 _feeConfigId,\\n        uint256 _amount\\n    ) internal view returns (uint256 _amountNet, uint256 _fee, uint256 _feePoints) {\\n        if (_amount == 0) revert ZeroValueNotAllowed();\\n        LibFeeStoreStorage.FeeStoreStorage storage s = LibFeeStoreStorage.feeStoreStorage();\\n        FeeStoreConfig memory _config = s.feeConfigs[_feeConfigId];\\n        if (_config.id == bytes32(\\\"\\\")) return (_amount, 0, 0);\\n        _feePoints = _config.fee;\\n        _fee = ((_amount * _feePoints) / BPS_DENOMINATOR);\\n        _amountNet = _amount - _fee;\\n    }\\n\\n    function getOperator() internal view returns (address _operator) {\\n        LibFeeStoreStorage.FeeStoreStorage storage s = LibFeeStoreStorage.feeStoreStorage();\\n        _operator = s.operator;\\n    }\\n\\n    function setOperator(address _operator) internal {\\n        LibFeeStoreStorage.FeeStoreStorage storage s = LibFeeStoreStorage.feeStoreStorage();\\n        s.operator = _operator;\\n    }\\n\\n    function getIntermediateAsset() internal view returns (address _intermediateAsset) {\\n        LibFeeStoreStorage.FeeStoreStorage storage s = LibFeeStoreStorage.feeStoreStorage();\\n        _intermediateAsset = s.intermediateAsset;\\n    }\\n\\n    function setIntermediateAsset(address _intermediateAsset) internal {\\n        LibFeeStoreStorage.FeeStoreStorage storage s = LibFeeStoreStorage.feeStoreStorage();\\n        s.intermediateAsset = _intermediateAsset;\\n    }\\n}\\n\",\"keccak256\":\"0x1f4a5e852d4963f4dc3f771e01aa98b5afdc621167009c6a85e19a0a3e7119fb\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/libraries/LibFeeStoreStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.19;\\n\\nimport { FeeStoreConfig } from \\\"./../helpers/Structs.sol\\\";\\n\\nlibrary LibFeeStoreStorage {\\n    bytes32 constant FEE_STORE_STORAGE_POSITION = keccak256(\\\"degenx.fee-store.storage.v1\\\");\\n\\n    struct FeeStoreStorage {\\n        // feeConfigId => FeeStoreConfig\\n        mapping(bytes32 => FeeStoreConfig) feeConfigs;\\n        // feeConfigId => amount of fees collected\\n        mapping(bytes32 => uint256) collectedFees;\\n        // represents a sum of each amount in collectedFees\\n        uint256 collectedFeesTotal;\\n        bytes32[] feeConfigIds;\\n        address operator;\\n        address intermediateAsset;\\n    }\\n\\n    function feeStoreStorage() internal pure returns (FeeStoreStorage storage fss) {\\n        bytes32 position = FEE_STORE_STORAGE_POSITION;\\n        assembly {\\n            fss.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x397c3b0f45509218df7e843804c84408b399b33bdc7cd29e30e2366f3c1d5a5d\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506125c9806100206000396000f3fe6080604052600436106100655760003560e01c80639a15f78f116100435780639a15f78f14610115578063b86a86b614610143578063c5e834e11461019257600080fd5b80634d7b0bfb1461006a5780636505d7791461008c5780638363f86c146100b9575b600080fd5b34801561007657600080fd5b5061008a610085366004611f2a565b6101a7565b005b61009f61009a366004611f7d565b610328565b604080519283526020830191909152015b60405180910390f35b3480156100c557600080fd5b507fc59bb21ecb9b2eca8466a1cf45b9119ee8dc98dfd6d31fdc87ca84eb7d7aa666547501000000000000000000000000000000000000000000900460ff165b60405190151581526020016100b0565b34801561012157600080fd5b50610135610130366004611fb5565b6103d2565b6040519081526020016100b0565b34801561014f57600080fd5b507fc59bb21ecb9b2eca8466a1cf45b9119ee8dc98dfd6d31fdc87ca84eb7d7aa6665474010000000000000000000000000000000000000000900460ff16610105565b34801561019e57600080fd5b50610135610433565b6101d07ffc425f2263d0df187444b70e47283d622c70181c5baebb1306a01edba1ce184c61045d565b6101d98361046a565b7fc59bb21ecb9b2eca8466a1cf45b9119ee8dc98dfd6d31fdc87ca84eb7d7aa666547fc59bb21ecb9b2eca8466a1cf45b9119ee8dc98dfd6d31fdc87ca84eb7d7aa664907501000000000000000000000000000000000000000000900460ff1615610270576040517f0dc149f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600281018054958255600191909101805473ffffffffffffffffffffffffffffffffffffffff9586167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216179091559290931690151574010000000000000000000000000000000000000000027fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff9094169390931775010000000000000000000000000000000000000000001716919091179055565b60008034600003610365576040517f9cf8540c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7fc59bb21ecb9b2eca8466a1cf45b9119ee8dc98dfd6d31fdc87ca84eb7d7aa6665474010000000000000000000000000000000000000000900460ff166103b6576103b18585856104b7565b6103c1565b6103c1858585610a9d565b90969095509350505050565b905090565b7fc59bb21ecb9b2eca8466a1cf45b9119ee8dc98dfd6d31fdc87ca84eb7d7aa6665460009074010000000000000000000000000000000000000000900460ff166104245761041f82610b6a565b61042d565b61042d82610bf0565b92915050565b60006103cd7fc59bb21ecb9b2eca8466a1cf45b9119ee8dc98dfd6d31fdc87ca84eb7d7aa6645490565b6104678133610c73565b50565b73ffffffffffffffffffffffffffffffffffffffff8116610467576040517f9fabe1c100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000803483158015906104df575073ffffffffffffffffffffffffffffffffffffffff851615155b1561057a576127106104f18583611ffd565b6104fb9190612014565b9150610507828261204f565b905061052973ffffffffffffffffffffffffffffffffffffffff861683610d59565b8473ffffffffffffffffffffffffffffffffffffffff167fb36d901fccb6f536689eeb11a0ae1432218e5e52acaf7a8e7eb7693197fb3fae8360405161057191815260200190565b60405180910390a25b7fc59bb21ecb9b2eca8466a1cf45b9119ee8dc98dfd6d31fdc87ca84eb7d7aa6655473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156105f957600080fd5b505af115801561060d573d6000803e3d6000fd5b50505050506106507fc59bb21ecb9b2eca8466a1cf45b9119ee8dc98dfd6d31fdc87ca84eb7d7aa6655473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1663095ea7b36106a97fc59bb21ecb9b2eca8466a1cf45b9119ee8dc98dfd6d31fdc87ca84eb7d7aa6665473ffffffffffffffffffffffffffffffffffffffff1690565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602481018490526044016020604051808303816000875af115801561071b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073f9190612062565b5060408051600280825260608201835260009260208301908036833750507fc59bb21ecb9b2eca8466a1cf45b9119ee8dc98dfd6d31fdc87ca84eb7d7aa665549192505073ffffffffffffffffffffffffffffffffffffffff16816000815181106107ac576107ac6120ae565b73ffffffffffffffffffffffffffffffffffffffff92831660209182029290920101527f1ef17e9a165a4e1a08bf7c7a70090c7711ef4b97027937554becb896058c668e541681600181518110610805576108056120ae565b73ffffffffffffffffffffffffffffffffffffffff92831660209182029290920101527fc59bb21ecb9b2eca8466a1cf45b9119ee8dc98dfd6d31fdc87ca84eb7d7aa666546040517fd06ca61f000000000000000000000000000000000000000000000000000000008152600092919091169063d06ca61f9061088e908690869060040161212e565b600060405180830381865afa1580156108ab573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526108f191908101906121c7565b905060006109337fc59bb21ecb9b2eca8466a1cf45b9119ee8dc98dfd6d31fdc87ca84eb7d7aa6665473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff166338ed1739856127108560018751610961919061204f565b81518110610971576109716120ae565b60200260200101516126ac6109869190611ffd565b6109909190612014565b863061099d42603c61226d565b6040518663ffffffff1660e01b81526004016109bd959493929190612280565b6000604051808303816000875af11580156109dc573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610a2291908101906121c7565b90508060018251610a33919061204f565b81518110610a4357610a436120ae565b60200260200101519550610a578987610eb8565b887ff17fdee613a92b35db6b7598eb43750b24d4072eb304e6eca80121e40402e34b87604051610a8991815260200190565b60405180910390a250505050935093915050565b346000610aab828585611007565b6040805160608101825283815273ffffffffffffffffffffffffffffffffffffffff8816602082015281516001808252818401845294965092945060009390929183019190816020015b6040805180820190915260008082526020820152815260200190600190039081610af55790505081525090506040518060400160405280878152602001848152508160400151600081518110610b4d57610b4d6120ae565b6020026020010181905250610b6181611193565b50935093915050565b6040517f4c358768000000000000000000000000000000000000000000000000000000008152600481018290526000903090634c35876890602401608060405180830381865afa158015610bc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be691906122c9565b6020015192915050565b6040517f146516df00000000000000000000000000000000000000000000000000000000815260048101829052600090309063146516df90602401608060405180830381865afa158015610c48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6c919061231e565b5192915050565b60008281527ff72ca309d9a3d085eca8abc0d0f1efd7a9682e454e7a123eb852dac23bbd2afa6020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16610d5557610cd2816113a0565b610cdd8360206113bf565b604051602001610cee92919061239c565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a0000000000000000000000000000000000000000000000000000000008252610d4c9160040161241d565b60405180910390fd5b5050565b80471015610dc3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610d4c565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114610e1d576040519150601f19603f3d011682016040523d82523d6000602084013e610e22565b606091505b5050905080610eb3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610d4c565b505050565b80600003610ef2576040517f9cf8540c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007f1ef17e9a165a4e1a08bf7c7a70090c7711ef4b97027937554becb896058c6689600084815260208281526040918290208251608081018452815480825260018301549382019390935260029091015473ffffffffffffffffffffffffffffffffffffffff8116938201939093527401000000000000000000000000000000000000000090920460ff161515606083015291925090610fbf576040517f3d693ada00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8051600090815260018301602052604081208054859290610fe190849061226d565b9250508190555082826002016000828254610ffc919061226d565b909155505050505050565b7f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fda5483906000907f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fcf9060ff1680156110685750600b810154610100900460ff165b80156110745750600084115b8015611095575073ffffffffffffffffffffffffffffffffffffffff851615155b80156110a15750600083115b15610b61576127106110b38585611ffd565b6110bd9190612014565b91506110c9828461204f565b92508181600a0160008282546110df919061226d565b9091555050600981018290556008810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff871690811790915561113a9083610d59565b8473ffffffffffffffffffffffffffffffffffffffff167fb36d901fccb6f536689eeb11a0ae1432218e5e52acaf7a8e7eb7693197fb3fae8360405161118291815260200190565b60405180910390a250935093915050565b6040810151517f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fcf906000036111f4576040517fff47559b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600b81015460ff16156112715760005b826040015151811015610eb35761126961123e8460400151838151811061122d5761122d6120ae565b602002602001015160000151611609565b6020015184604001518381518110611258576112586120ae565b60200260200101516020015161173b565b600101611204565b60018181018054808301825560009182526020808320865160039093020191825585015192810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909416939093179092555b836040015151811015611371578160020160405180604001604052808660400151848151811061130e5761130e6120ae565b602002602001015160000151815260200186604001518481518110611335576113356120ae565b602090810291909101810151810151909152825460018181018555600094855293829020835160029092020190815591015190820155016112dc565b506040517f1899e1ef2ab1c39f90ce7819a51f1bab74d6fe2da1b56995e43af8f8549654ed90600090a1505050565b606061042d73ffffffffffffffffffffffffffffffffffffffff831660145b606060006113ce836002611ffd565b6113d990600261226d565b67ffffffffffffffff8111156113f1576113f161207f565b6040519080825280601f01601f19166020018201604052801561141b576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611452576114526120ae565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106114b5576114b56120ae565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006114f1846002611ffd565b6114fc90600161226d565b90505b6001811115611599577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061153d5761153d6120ae565b1a60f81b828281518110611553576115536120ae565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c936115928161246e565b90506114ff565b508315611602576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610d4c565b9392505050565b61163360408051608081018252600080825260208201819052909182019081526020016000905290565b60008281527f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbdc6020908152604091829020825160808101845281548152600182015473ffffffffffffffffffffffffffffffffffffffff8116938201939093527f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbd69390929083019074010000000000000000000000000000000000000000900460ff1660038111156116e7576116e76124a3565b60038111156116f8576116f86124a3565b81526020016001820160159054906101000a900460ff166002811115611720576117206124a3565b6002811115611731576117316124a3565b9052509392505050565b7f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fcf73ffffffffffffffffffffffffffffffffffffffff831615801561178d5750600381015467ffffffffffffffff1615155b15611e85578054829060005b81811015611e7d5760008460000182815481106117b8576117b86120ae565b60009182526020822060039091020191506117d483600161226d565b84149050600081611810576003870154600184015467ffffffffffffffff9182169161180191168a611ffd565b61180b9190612014565b611812565b855b90508161182857611823818761204f565b61182b565b60005b600284015490965060011015611b7057600283018054600091906118519060019061204f565b81548110611861576118616120ae565b600091825260208220015460058a0154600187015473ffffffffffffffffffffffffffffffffffffffff92831694509082169163a2a1623d918691859160028b019168010000000000000000909104163b6118e25760018a015468010000000000000000900473ffffffffffffffffffffffffffffffffffffffff166118e4565b305b426040518663ffffffff1660e01b815260040161190494939291906124d2565b60006040518083038185885af1158015611922573d6000803e3d6000fd5b50505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261196991908101906121c7565b9050806001825161197a919061204f565b8151811061198a5761198a6120ae565b6020908102919091010151600186015490935068010000000000000000900473ffffffffffffffffffffffffffffffffffffffff163b15611b0d5760018501546040517f095ea7b30000000000000000000000000000000000000000000000000000000081526801000000000000000090910473ffffffffffffffffffffffffffffffffffffffff90811660048301526024820185905283169063095ea7b3906044016020604051808303816000875af1158015611a4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a709190612062565b5060018501546040517f47e7ef2400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526024820186905268010000000000000000909204909116906347e7ef2490604401600060405180830381600087803b158015611af457600080fd5b505af1158015611b08573d6000803e3d6000fd5b505050505b60018501546040518481526801000000000000000090910473ffffffffffffffffffffffffffffffffffffffff16907fb649c98f58055c520df0dcb5709eff2e931217ff2fb1e21376130d31bbb1c0af9060200160405180910390a25050611e67565b600183015468010000000000000000900473ffffffffffffffffffffffffffffffffffffffff163b15611dd957600480880154604080517fd0e30db0000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff9092169263d0e30db0928592808301926000929182900301818588803b158015611c0a57600080fd5b505af1158015611c1e573d6000803e3d6000fd5b5050505060048881015460018601546040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff680100000000000000009092048216938101939093526024830185905216915063095ea7b3906044016020604051808303816000875af1158015611cb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd49190612062565b5060018301546004888101546040517f47e7ef2400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff918216928101929092526024820184905268010000000000000000909204909116906347e7ef2490604401600060405180830381600087803b158015611d6057600080fd5b505af1158015611d74573d6000803e3d6000fd5b5050505060018301546040518281526801000000000000000090910473ffffffffffffffffffffffffffffffffffffffff16907fb649c98f58055c520df0dcb5709eff2e931217ff2fb1e21376130d31bbb1c0af9060200160405180910390a2611e67565b6001830154611e0a9068010000000000000000900473ffffffffffffffffffffffffffffffffffffffff1682610d59565b60018301546040518281526801000000000000000090910473ffffffffffffffffffffffffffffffffffffffff16907fb649c98f58055c520df0dcb5709eff2e931217ff2fb1e21376130d31bbb1c0af9060200160405180910390a25b5050508080611e759061255b565b915050611799565b505050505050565b611ea573ffffffffffffffffffffffffffffffffffffffff841683610d59565b8273ffffffffffffffffffffffffffffffffffffffff167fb649c98f58055c520df0dcb5709eff2e931217ff2fb1e21376130d31bbb1c0af83604051611eed91815260200190565b60405180910390a2505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461046757600080fd5b801515811461046757600080fd5b60008060008060808587031215611f4057600080fd5b843593506020850135611f5281611efa565b92506040850135611f6281611efa565b91506060850135611f7281611f1c565b939692955090935050565b600080600060608486031215611f9257600080fd5b833592506020840135611fa481611efa565b929592945050506040919091013590565b600060208284031215611fc757600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808202811582820484141761042d5761042d611fce565b60008261204a577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b8181038181111561042d5761042d611fce565b60006020828403121561207457600080fd5b815161160281611f1c565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081518084526020808501945080840160005b8381101561212357815173ffffffffffffffffffffffffffffffffffffffff16875295820195908201906001016120f1565b509495945050505050565b82815260406020820152600061214760408301846120dd565b949350505050565b6040516080810167ffffffffffffffff811182821017156121725761217261207f565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156121bf576121bf61207f565b604052919050565b600060208083850312156121da57600080fd5b825167ffffffffffffffff808211156121f257600080fd5b818501915085601f83011261220657600080fd5b8151818111156122185761221861207f565b8060051b9150612229848301612178565b818152918301840191848101908884111561224357600080fd5b938501935b8385101561226157845182529385019390850190612248565b98975050505050505050565b8082018082111561042d5761042d611fce565b85815284602082015260a06040820152600061229f60a08301866120dd565b73ffffffffffffffffffffffffffffffffffffffff94909416606083015250608001529392505050565b6000608082840312156122db57600080fd5b6122e361214f565b825181526020830151602082015260408301516122ff81611efa565b6040820152606083015161231281611f1c565b60608201529392505050565b60006080828403121561233057600080fd5b61233861214f565b82518152602083015161234a81611efa565b602082015260408301516004811061236157600080fd5b604082015260608301516003811061231257600080fd5b60005b8381101561239357818101518382015260200161237b565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516123d4816017850160208801612378565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351612411816028840160208801612378565b01602801949350505050565b602081526000825180602084015261243c816040850160208701612378565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008161247d5761247d611fce565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600060808201868352602060808185015281875480845260a0860191508860005282600020935060005b8181101561252e57845473ffffffffffffffffffffffffffffffffffffffff16835260019485019492840192016124fc565b505073ffffffffffffffffffffffffffffffffffffffff9690961660408501525050506060015292915050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361258c5761258c611fce565b506001019056fea2646970667358221220d796b12d3a7601c8ff016cebd273dc2272e5925da0b7c5ddc2f7229d4bd0431864736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106100655760003560e01c80639a15f78f116100435780639a15f78f14610115578063b86a86b614610143578063c5e834e11461019257600080fd5b80634d7b0bfb1461006a5780636505d7791461008c5780638363f86c146100b9575b600080fd5b34801561007657600080fd5b5061008a610085366004611f2a565b6101a7565b005b61009f61009a366004611f7d565b610328565b604080519283526020830191909152015b60405180910390f35b3480156100c557600080fd5b507fc59bb21ecb9b2eca8466a1cf45b9119ee8dc98dfd6d31fdc87ca84eb7d7aa666547501000000000000000000000000000000000000000000900460ff165b60405190151581526020016100b0565b34801561012157600080fd5b50610135610130366004611fb5565b6103d2565b6040519081526020016100b0565b34801561014f57600080fd5b507fc59bb21ecb9b2eca8466a1cf45b9119ee8dc98dfd6d31fdc87ca84eb7d7aa6665474010000000000000000000000000000000000000000900460ff16610105565b34801561019e57600080fd5b50610135610433565b6101d07ffc425f2263d0df187444b70e47283d622c70181c5baebb1306a01edba1ce184c61045d565b6101d98361046a565b7fc59bb21ecb9b2eca8466a1cf45b9119ee8dc98dfd6d31fdc87ca84eb7d7aa666547fc59bb21ecb9b2eca8466a1cf45b9119ee8dc98dfd6d31fdc87ca84eb7d7aa664907501000000000000000000000000000000000000000000900460ff1615610270576040517f0dc149f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600281018054958255600191909101805473ffffffffffffffffffffffffffffffffffffffff9586167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216179091559290931690151574010000000000000000000000000000000000000000027fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff9094169390931775010000000000000000000000000000000000000000001716919091179055565b60008034600003610365576040517f9cf8540c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7fc59bb21ecb9b2eca8466a1cf45b9119ee8dc98dfd6d31fdc87ca84eb7d7aa6665474010000000000000000000000000000000000000000900460ff166103b6576103b18585856104b7565b6103c1565b6103c1858585610a9d565b90969095509350505050565b905090565b7fc59bb21ecb9b2eca8466a1cf45b9119ee8dc98dfd6d31fdc87ca84eb7d7aa6665460009074010000000000000000000000000000000000000000900460ff166104245761041f82610b6a565b61042d565b61042d82610bf0565b92915050565b60006103cd7fc59bb21ecb9b2eca8466a1cf45b9119ee8dc98dfd6d31fdc87ca84eb7d7aa6645490565b6104678133610c73565b50565b73ffffffffffffffffffffffffffffffffffffffff8116610467576040517f9fabe1c100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000803483158015906104df575073ffffffffffffffffffffffffffffffffffffffff851615155b1561057a576127106104f18583611ffd565b6104fb9190612014565b9150610507828261204f565b905061052973ffffffffffffffffffffffffffffffffffffffff861683610d59565b8473ffffffffffffffffffffffffffffffffffffffff167fb36d901fccb6f536689eeb11a0ae1432218e5e52acaf7a8e7eb7693197fb3fae8360405161057191815260200190565b60405180910390a25b7fc59bb21ecb9b2eca8466a1cf45b9119ee8dc98dfd6d31fdc87ca84eb7d7aa6655473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156105f957600080fd5b505af115801561060d573d6000803e3d6000fd5b50505050506106507fc59bb21ecb9b2eca8466a1cf45b9119ee8dc98dfd6d31fdc87ca84eb7d7aa6655473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1663095ea7b36106a97fc59bb21ecb9b2eca8466a1cf45b9119ee8dc98dfd6d31fdc87ca84eb7d7aa6665473ffffffffffffffffffffffffffffffffffffffff1690565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602481018490526044016020604051808303816000875af115801561071b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073f9190612062565b5060408051600280825260608201835260009260208301908036833750507fc59bb21ecb9b2eca8466a1cf45b9119ee8dc98dfd6d31fdc87ca84eb7d7aa665549192505073ffffffffffffffffffffffffffffffffffffffff16816000815181106107ac576107ac6120ae565b73ffffffffffffffffffffffffffffffffffffffff92831660209182029290920101527f1ef17e9a165a4e1a08bf7c7a70090c7711ef4b97027937554becb896058c668e541681600181518110610805576108056120ae565b73ffffffffffffffffffffffffffffffffffffffff92831660209182029290920101527fc59bb21ecb9b2eca8466a1cf45b9119ee8dc98dfd6d31fdc87ca84eb7d7aa666546040517fd06ca61f000000000000000000000000000000000000000000000000000000008152600092919091169063d06ca61f9061088e908690869060040161212e565b600060405180830381865afa1580156108ab573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526108f191908101906121c7565b905060006109337fc59bb21ecb9b2eca8466a1cf45b9119ee8dc98dfd6d31fdc87ca84eb7d7aa6665473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff166338ed1739856127108560018751610961919061204f565b81518110610971576109716120ae565b60200260200101516126ac6109869190611ffd565b6109909190612014565b863061099d42603c61226d565b6040518663ffffffff1660e01b81526004016109bd959493929190612280565b6000604051808303816000875af11580156109dc573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610a2291908101906121c7565b90508060018251610a33919061204f565b81518110610a4357610a436120ae565b60200260200101519550610a578987610eb8565b887ff17fdee613a92b35db6b7598eb43750b24d4072eb304e6eca80121e40402e34b87604051610a8991815260200190565b60405180910390a250505050935093915050565b346000610aab828585611007565b6040805160608101825283815273ffffffffffffffffffffffffffffffffffffffff8816602082015281516001808252818401845294965092945060009390929183019190816020015b6040805180820190915260008082526020820152815260200190600190039081610af55790505081525090506040518060400160405280878152602001848152508160400151600081518110610b4d57610b4d6120ae565b6020026020010181905250610b6181611193565b50935093915050565b6040517f4c358768000000000000000000000000000000000000000000000000000000008152600481018290526000903090634c35876890602401608060405180830381865afa158015610bc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be691906122c9565b6020015192915050565b6040517f146516df00000000000000000000000000000000000000000000000000000000815260048101829052600090309063146516df90602401608060405180830381865afa158015610c48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6c919061231e565b5192915050565b60008281527ff72ca309d9a3d085eca8abc0d0f1efd7a9682e454e7a123eb852dac23bbd2afa6020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16610d5557610cd2816113a0565b610cdd8360206113bf565b604051602001610cee92919061239c565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a0000000000000000000000000000000000000000000000000000000008252610d4c9160040161241d565b60405180910390fd5b5050565b80471015610dc3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610d4c565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114610e1d576040519150601f19603f3d011682016040523d82523d6000602084013e610e22565b606091505b5050905080610eb3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610d4c565b505050565b80600003610ef2576040517f9cf8540c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007f1ef17e9a165a4e1a08bf7c7a70090c7711ef4b97027937554becb896058c6689600084815260208281526040918290208251608081018452815480825260018301549382019390935260029091015473ffffffffffffffffffffffffffffffffffffffff8116938201939093527401000000000000000000000000000000000000000090920460ff161515606083015291925090610fbf576040517f3d693ada00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8051600090815260018301602052604081208054859290610fe190849061226d565b9250508190555082826002016000828254610ffc919061226d565b909155505050505050565b7f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fda5483906000907f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fcf9060ff1680156110685750600b810154610100900460ff165b80156110745750600084115b8015611095575073ffffffffffffffffffffffffffffffffffffffff851615155b80156110a15750600083115b15610b61576127106110b38585611ffd565b6110bd9190612014565b91506110c9828461204f565b92508181600a0160008282546110df919061226d565b9091555050600981018290556008810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff871690811790915561113a9083610d59565b8473ffffffffffffffffffffffffffffffffffffffff167fb36d901fccb6f536689eeb11a0ae1432218e5e52acaf7a8e7eb7693197fb3fae8360405161118291815260200190565b60405180910390a250935093915050565b6040810151517f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fcf906000036111f4576040517fff47559b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600b81015460ff16156112715760005b826040015151811015610eb35761126961123e8460400151838151811061122d5761122d6120ae565b602002602001015160000151611609565b6020015184604001518381518110611258576112586120ae565b60200260200101516020015161173b565b600101611204565b60018181018054808301825560009182526020808320865160039093020191825585015192810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909416939093179092555b836040015151811015611371578160020160405180604001604052808660400151848151811061130e5761130e6120ae565b602002602001015160000151815260200186604001518481518110611335576113356120ae565b602090810291909101810151810151909152825460018181018555600094855293829020835160029092020190815591015190820155016112dc565b506040517f1899e1ef2ab1c39f90ce7819a51f1bab74d6fe2da1b56995e43af8f8549654ed90600090a1505050565b606061042d73ffffffffffffffffffffffffffffffffffffffff831660145b606060006113ce836002611ffd565b6113d990600261226d565b67ffffffffffffffff8111156113f1576113f161207f565b6040519080825280601f01601f19166020018201604052801561141b576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611452576114526120ae565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106114b5576114b56120ae565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006114f1846002611ffd565b6114fc90600161226d565b90505b6001811115611599577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061153d5761153d6120ae565b1a60f81b828281518110611553576115536120ae565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c936115928161246e565b90506114ff565b508315611602576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610d4c565b9392505050565b61163360408051608081018252600080825260208201819052909182019081526020016000905290565b60008281527f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbdc6020908152604091829020825160808101845281548152600182015473ffffffffffffffffffffffffffffffffffffffff8116938201939093527f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbd69390929083019074010000000000000000000000000000000000000000900460ff1660038111156116e7576116e76124a3565b60038111156116f8576116f86124a3565b81526020016001820160159054906101000a900460ff166002811115611720576117206124a3565b6002811115611731576117316124a3565b9052509392505050565b7f8c1c9ced99be2ac6a93f8732fafbecb5f923c3012303702655892ee588142fcf73ffffffffffffffffffffffffffffffffffffffff831615801561178d5750600381015467ffffffffffffffff1615155b15611e85578054829060005b81811015611e7d5760008460000182815481106117b8576117b86120ae565b60009182526020822060039091020191506117d483600161226d565b84149050600081611810576003870154600184015467ffffffffffffffff9182169161180191168a611ffd565b61180b9190612014565b611812565b855b90508161182857611823818761204f565b61182b565b60005b600284015490965060011015611b7057600283018054600091906118519060019061204f565b81548110611861576118616120ae565b600091825260208220015460058a0154600187015473ffffffffffffffffffffffffffffffffffffffff92831694509082169163a2a1623d918691859160028b019168010000000000000000909104163b6118e25760018a015468010000000000000000900473ffffffffffffffffffffffffffffffffffffffff166118e4565b305b426040518663ffffffff1660e01b815260040161190494939291906124d2565b60006040518083038185885af1158015611922573d6000803e3d6000fd5b50505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261196991908101906121c7565b9050806001825161197a919061204f565b8151811061198a5761198a6120ae565b6020908102919091010151600186015490935068010000000000000000900473ffffffffffffffffffffffffffffffffffffffff163b15611b0d5760018501546040517f095ea7b30000000000000000000000000000000000000000000000000000000081526801000000000000000090910473ffffffffffffffffffffffffffffffffffffffff90811660048301526024820185905283169063095ea7b3906044016020604051808303816000875af1158015611a4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a709190612062565b5060018501546040517f47e7ef2400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526024820186905268010000000000000000909204909116906347e7ef2490604401600060405180830381600087803b158015611af457600080fd5b505af1158015611b08573d6000803e3d6000fd5b505050505b60018501546040518481526801000000000000000090910473ffffffffffffffffffffffffffffffffffffffff16907fb649c98f58055c520df0dcb5709eff2e931217ff2fb1e21376130d31bbb1c0af9060200160405180910390a25050611e67565b600183015468010000000000000000900473ffffffffffffffffffffffffffffffffffffffff163b15611dd957600480880154604080517fd0e30db0000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff9092169263d0e30db0928592808301926000929182900301818588803b158015611c0a57600080fd5b505af1158015611c1e573d6000803e3d6000fd5b5050505060048881015460018601546040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff680100000000000000009092048216938101939093526024830185905216915063095ea7b3906044016020604051808303816000875af1158015611cb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd49190612062565b5060018301546004888101546040517f47e7ef2400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff918216928101929092526024820184905268010000000000000000909204909116906347e7ef2490604401600060405180830381600087803b158015611d6057600080fd5b505af1158015611d74573d6000803e3d6000fd5b5050505060018301546040518281526801000000000000000090910473ffffffffffffffffffffffffffffffffffffffff16907fb649c98f58055c520df0dcb5709eff2e931217ff2fb1e21376130d31bbb1c0af9060200160405180910390a2611e67565b6001830154611e0a9068010000000000000000900473ffffffffffffffffffffffffffffffffffffffff1682610d59565b60018301546040518281526801000000000000000090910473ffffffffffffffffffffffffffffffffffffffff16907fb649c98f58055c520df0dcb5709eff2e931217ff2fb1e21376130d31bbb1c0af9060200160405180910390a25b5050508080611e759061255b565b915050611799565b505050505050565b611ea573ffffffffffffffffffffffffffffffffffffffff841683610d59565b8273ffffffffffffffffffffffffffffffffffffffff167fb649c98f58055c520df0dcb5709eff2e931217ff2fb1e21376130d31bbb1c0af83604051611eed91815260200190565b60405180910390a2505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461046757600080fd5b801515811461046757600080fd5b60008060008060808587031215611f4057600080fd5b843593506020850135611f5281611efa565b92506040850135611f6281611efa565b91506060850135611f7281611f1c565b939692955090935050565b600080600060608486031215611f9257600080fd5b833592506020840135611fa481611efa565b929592945050506040919091013590565b600060208284031215611fc757600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808202811582820484141761042d5761042d611fce565b60008261204a577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b8181038181111561042d5761042d611fce565b60006020828403121561207457600080fd5b815161160281611f1c565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081518084526020808501945080840160005b8381101561212357815173ffffffffffffffffffffffffffffffffffffffff16875295820195908201906001016120f1565b509495945050505050565b82815260406020820152600061214760408301846120dd565b949350505050565b6040516080810167ffffffffffffffff811182821017156121725761217261207f565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156121bf576121bf61207f565b604052919050565b600060208083850312156121da57600080fd5b825167ffffffffffffffff808211156121f257600080fd5b818501915085601f83011261220657600080fd5b8151818111156122185761221861207f565b8060051b9150612229848301612178565b818152918301840191848101908884111561224357600080fd5b938501935b8385101561226157845182529385019390850190612248565b98975050505050505050565b8082018082111561042d5761042d611fce565b85815284602082015260a06040820152600061229f60a08301866120dd565b73ffffffffffffffffffffffffffffffffffffffff94909416606083015250608001529392505050565b6000608082840312156122db57600080fd5b6122e361214f565b825181526020830151602082015260408301516122ff81611efa565b6040820152606083015161231281611f1c565b60608201529392505050565b60006080828403121561233057600080fd5b61233861214f565b82518152602083015161234a81611efa565b602082015260408301516004811061236157600080fd5b604082015260608301516003811061231257600080fd5b60005b8381101561239357818101518382015260200161237b565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516123d4816017850160208801612378565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351612411816028840160208801612378565b01602801949350505050565b602081526000825180602084015261243c816040850160208701612378565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008161247d5761247d611fce565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600060808201868352602060808185015281875480845260a0860191508860005282600020935060005b8181101561252e57845473ffffffffffffffffffffffffffffffffffffffff16835260019485019492840192016124fc565b505073ffffffffffffffffffffffffffffffffffffffff9690961660408501525050506060015292915050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361258c5761258c611fce565b506001019056fea2646970667358221220d796b12d3a7601c8ff016cebd273dc2272e5925da0b7c5ddc2f7229d4bd0431864736f6c63430008130033",
  "devdoc": {
    "author": "Daniel <danieldegendev@gmail.com>",
    "custom:version": "1.0.0",
    "kind": "dev",
    "methods": {
      "feeGenericDepositSingleFeeNative(bytes32,address,uint256)": {
        "params": {
          "_bountyReceiver": "address of the receiver of the bounty",
          "_bountyShareInBps": "bounty share in basis points",
          "_feeId": "fee id in bytes32"
        },
        "returns": {
          "_bountyAmount": "amount for the bounty receiver",
          "_feeAmount": "fee amount that is being added"
        }
      },
      "feeGenericGetFee(bytes32)": {
        "params": {
          "_feeId": "fee id in bytes32"
        }
      },
      "feeGenericGetHomeChainId()": {
        "returns": {
          "_homeChainId": "block.chainid of the configured home chain"
        }
      },
      "feeGenericIsHomeChain()": {
        "returns": {
          "_is": "whether the diamond is on the home chain or not"
        }
      },
      "feeGenericIsInitialized()": {
        "returns": {
          "_is": "true if it's initialized, else false"
        }
      },
      "initFeeGenericFacet(uint256,address,address,bool)": {
        "params": {
          "_homeChainId": "home chain id",
          "_nativeWrapper": "address of the native wrapper token",
          "_uniswapV2Router": "address of the uniswap v2 conform router"
        }
      }
    },
    "title": "Fee Generic Facet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "feeGenericDepositSingleFeeNative(bytes32,address,uint256)": {
        "notice": "Deposits a single fee with native currency"
      },
      "feeGenericGetFee(bytes32)": {
        "notice": "Response the value of the fee"
      },
      "initFeeGenericFacet(uint256,address,address,bool)": {
        "notice": "Initializes the facet"
      }
    },
    "notice": "Contains generic fee functions",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}