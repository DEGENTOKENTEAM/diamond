{
  "address": "0x5A54bFd04Ed29Ec5Fb76dA5D6ea1F7B412CD12C2",
  "abi": [
    {
      "inputs": [],
      "name": "AddressZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        }
      ],
      "name": "ChainIdExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        }
      ],
      "name": "ChainIdNotExisting",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ChainIdZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        }
      ],
      "name": "ConfigAlreadyAssignedToChain",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ConfigExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ConfigInUse",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        }
      ],
      "name": "ConfigNotAssignedToChain",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ConfigNotExisting",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        }
      ],
      "name": "ConfigsAssignedToChain",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FeeZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SyncQueueEmpty",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "ChainAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        }
      ],
      "name": "ChainRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "ClearQueue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        }
      ],
      "name": "ConfigAssignedToChain",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ConfigUnassignedFromAllChains",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        }
      ],
      "name": "ConfigUnassignedFromChain",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "enum FeeType",
              "name": "ftype",
              "type": "uint8"
            },
            {
              "internalType": "enum FeeCurrency",
              "name": "currency",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct AddFeeConfigParams",
          "name": "params",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "FeeConfigAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "FeeConfigRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct UpdateFeeConfigParams",
          "name": "params",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "FeeConfigUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "ManuallyQueued",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            }
          ],
          "internalType": "struct AddChainParams",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "addChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "enum FeeType",
              "name": "ftype",
              "type": "uint8"
            },
            {
              "internalType": "enum FeeCurrency",
              "name": "currency",
              "type": "uint8"
            }
          ],
          "internalType": "struct AddFeeConfigParams",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "addFeeConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            }
          ],
          "internalType": "struct AssignFeeConfigToChainParams",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "assignFeeConfigToChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "clearQueue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        }
      ],
      "name": "getArchivedFeeConfigs",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "enum FeeType",
              "name": "ftype",
              "type": "uint8"
            },
            {
              "internalType": "enum FeeCurrency",
              "name": "currency",
              "type": "uint8"
            }
          ],
          "internalType": "struct FeeConfig[]",
          "name": "_feeConfig",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        }
      ],
      "name": "getDeployStatesForChain",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "enum FeeDeployState",
              "name": "state",
              "type": "uint8"
            }
          ],
          "internalType": "struct FeeConfigDeployState[]",
          "name": "_states",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        }
      ],
      "name": "getFeeConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "enum FeeType",
              "name": "ftype",
              "type": "uint8"
            },
            {
              "internalType": "enum FeeCurrency",
              "name": "currency",
              "type": "uint8"
            }
          ],
          "internalType": "struct FeeConfig",
          "name": "_feeConfig",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        }
      ],
      "name": "getFeeConfigDeployState",
      "outputs": [
        {
          "internalType": "enum FeeDeployState",
          "name": "_state",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeeConfigIds",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "_feeConfigIds",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        }
      ],
      "name": "getFeeConfigsByChain",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "_feeConfigs",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        }
      ],
      "name": "getFeeSyncQueueByChain",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "enum FeeSyncAction",
              "name": "action",
              "type": "uint8"
            }
          ],
          "internalType": "struct FeeSyncQueue[]",
          "name": "_feeSyncQueue",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "enum FeeSyncAction",
              "name": "action",
              "type": "uint8"
            }
          ],
          "internalType": "struct FeeSyncQueue[]",
          "name": "_syncQueue",
          "type": "tuple[]"
        }
      ],
      "name": "queueUpManually",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            }
          ],
          "internalType": "struct RemoveChainParams",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "removeChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            }
          ],
          "internalType": "struct RemoveFeeConfigParams",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "removeFeeConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            }
          ],
          "internalType": "struct UnassignFeeConfigFromAllChainsParams",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "unassignFeeConfigFromAllChains",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            }
          ],
          "internalType": "struct UnassignFeeConfigFromChainParams",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "unassignFeeConfigFromChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            }
          ],
          "internalType": "struct UpdateFeeConfigParams",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "updateFeeConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd93ba6be6b081caac75460687f16f60ecfe5a7bb434ab5c126ccfc71d24f36e6",
  "receipt": {
    "to": null,
    "from": "0x0000000022D4802541320DB7F22693405Db19422",
    "contractAddress": "0x5A54bFd04Ed29Ec5Fb76dA5D6ea1F7B412CD12C2",
    "transactionIndex": 55,
    "gasUsed": "2647282",
    "logsBloom": "0x
    "blockHash": "0xa8fa67e18bd947c02f29264d469c9cea7b8391dee409d0778594a2cd92720268",
    "transactionHash": "0xd93ba6be6b081caac75460687f16f60ecfe5a7bb434ab5c126ccfc71d24f36e6",
    "logs": [],
    "blockNumber": 39159708,
    "cumulativeGasUsed": "4244272",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ab1b8e45ec943447e24d132ebc1c295a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AddressZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"ChainIdExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"ChainIdNotExisting\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ChainIdZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"ConfigAlreadyAssignedToChain\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ConfigExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ConfigInUse\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"ConfigNotAssignedToChain\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ConfigNotExisting\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"ConfigsAssignedToChain\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SyncQueueEmpty\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"ChainAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"ChainRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ClearQueue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"ConfigAssignedToChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ConfigUnassignedFromAllChains\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"ConfigUnassignedFromChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"enum FeeType\",\"name\":\"ftype\",\"type\":\"uint8\"},{\"internalType\":\"enum FeeCurrency\",\"name\":\"currency\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct AddFeeConfigParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"FeeConfigAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"FeeConfigRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct UpdateFeeConfigParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"FeeConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ManuallyQueued\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"internalType\":\"struct AddChainParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"addChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"enum FeeType\",\"name\":\"ftype\",\"type\":\"uint8\"},{\"internalType\":\"enum FeeCurrency\",\"name\":\"currency\",\"type\":\"uint8\"}],\"internalType\":\"struct AddFeeConfigParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"addFeeConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct AssignFeeConfigToChainParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"assignFeeConfigToChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearQueue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"getArchivedFeeConfigs\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"enum FeeType\",\"name\":\"ftype\",\"type\":\"uint8\"},{\"internalType\":\"enum FeeCurrency\",\"name\":\"currency\",\"type\":\"uint8\"}],\"internalType\":\"struct FeeConfig[]\",\"name\":\"_feeConfig\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"}],\"name\":\"getDeployStatesForChain\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"enum FeeDeployState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"struct FeeConfigDeployState[]\",\"name\":\"_states\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"getFeeConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"enum FeeType\",\"name\":\"ftype\",\"type\":\"uint8\"},{\"internalType\":\"enum FeeCurrency\",\"name\":\"currency\",\"type\":\"uint8\"}],\"internalType\":\"struct FeeConfig\",\"name\":\"_feeConfig\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"getFeeConfigDeployState\",\"outputs\":[{\"internalType\":\"enum FeeDeployState\",\"name\":\"_state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeConfigIds\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_feeConfigIds\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"}],\"name\":\"getFeeConfigsByChain\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_feeConfigs\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"}],\"name\":\"getFeeSyncQueueByChain\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"enum FeeSyncAction\",\"name\":\"action\",\"type\":\"uint8\"}],\"internalType\":\"struct FeeSyncQueue[]\",\"name\":\"_feeSyncQueue\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"enum FeeSyncAction\",\"name\":\"action\",\"type\":\"uint8\"}],\"internalType\":\"struct FeeSyncQueue[]\",\"name\":\"_syncQueue\",\"type\":\"tuple[]\"}],\"name\":\"queueUpManually\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct RemoveChainParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"removeChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"internalType\":\"struct RemoveFeeConfigParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"removeFeeConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"internalType\":\"struct UnassignFeeConfigFromAllChainsParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"unassignFeeConfigFromAllChains\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct UnassignFeeConfigFromChainParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"unassignFeeConfigFromChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"internalType\":\"struct UpdateFeeConfigParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"updateFeeConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Daniel <danieldegendev@gmail.com>\",\"custom:version\":\"1.0.0\",\"kind\":\"dev\",\"methods\":{\"addChain((uint256,address))\":{\"details\":\"the target address is the desired contract address receiving the fee config information\",\"params\":{\"_params\":\"consists of the chain id and target addess\"}},\"addFeeConfig((bytes32,uint256,address,uint8,uint8))\":{\"details\":\"will fail if a config id is already existing or the fee value is zero\",\"params\":{\"_params\":\"see {contracts/diamond/helpers/Structs.sol#AddFeeConfigParams}\"}},\"assignFeeConfigToChain((bytes32,uint256))\":{\"details\":\"after the assignment, the fee config is added to a queue with an add action\",\"params\":{\"_params\":\"see {contracts/diamond/helpers/Structs.sol#AssignFeeConfigToChainParams}\"}},\"clearQueue()\":{\"details\":\"the deployment state is set to pending while doing\"},\"getArchivedFeeConfigs(bytes32)\":{\"params\":{\"_id\":\"fee config id\"},\"returns\":{\"_feeConfig\":\"array of fee configs\"}},\"getDeployStatesForChain(uint256)\":{\"params\":{\"_chainId\":\"chain id\"},\"returns\":{\"_states\":\"all deployment states of config ids for a specific chain\"}},\"getFeeConfig(bytes32)\":{\"params\":{\"_id\":\"fee config id\"},\"returns\":{\"_feeConfig\":\"fee config\"}},\"getFeeConfigDeployState(uint256,bytes32)\":{\"params\":{\"_chainId\":\"chain id\",\"_id\":\"fee config id\"},\"returns\":{\"_state\":\"deployment state of a fee config\"}},\"getFeeConfigIds()\":{\"returns\":{\"_feeConfigIds\":\"returns an arrayf of fee config ids\"}},\"getFeeConfigsByChain(uint256)\":{\"params\":{\"_chainId\":\"chain id\"},\"returns\":{\"_feeConfigs\":\"array of fee config ids\"}},\"getFeeSyncQueueByChain(uint256)\":{\"params\":{\"_chainId\":\"chain id\"},\"returns\":{\"_feeSyncQueue\":\"returns an array of queue items. See {contracts/diamond/helpers/Structs.sol#FeeSyncQueue}\"}},\"queueUpManually((bytes32,uint256,uint8)[])\":{\"params\":{\"_syncQueue\":\"list of FeeSyncQueue data\"}},\"removeChain((uint256))\":{\"params\":{\"_params\":\"consists only of the chain id\"}},\"removeFeeConfig((bytes32))\":{\"params\":{\"_params\":\"params consist of a fee id that should be removed\"}},\"unassignFeeConfigFromAllChains((bytes32))\":{\"details\":\"it will iteration through all chains and removes the connections. The main task will be done in {_decoupleFeeConfigFromChain}\",\"params\":{\"_params\":\"see {contracts/diamond/helpers/Structs.sol#UnassignFeeConfigFromAllChainsParams}\"}},\"unassignFeeConfigFromChain((bytes32,uint256))\":{\"details\":\"the main task will be done in {_decoupleFeeConfigFromChain}\",\"params\":{\"_params\":\"see {contracts/diamond/helpers/Structs.sol#UnassignFeeConfigFromChainParams}\"}},\"updateFeeConfig((bytes32,uint256,address))\":{\"details\":\"if you need more data changed than _params in providing, remove and add a fee\",\"params\":{\"_params\":\"see {contracts/diamond/helpers/Structs.sol#UpdateFeeConfigParams}\"}}},\"title\":\"Fee Manager Facet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addChain((uint256,address))\":{\"notice\":\"Adds a corresponding chain\"},\"addFeeConfig((bytes32,uint256,address,uint8,uint8))\":{\"notice\":\"Adds a fee config\"},\"assignFeeConfigToChain((bytes32,uint256))\":{\"notice\":\"Adds a fee config to chain connection\"},\"clearQueue()\":{\"notice\":\"Clears the queue and removes all current jobs\"},\"getArchivedFeeConfigs(bytes32)\":{\"notice\":\"Gets all previous fee config states by fee config id\"},\"getDeployStatesForChain(uint256)\":{\"notice\":\"Gets the current deployment state of all fee config ids from a given chain id\"},\"getFeeConfig(bytes32)\":{\"notice\":\"Gets the fee config by fee config id\"},\"getFeeConfigDeployState(uint256,bytes32)\":{\"notice\":\"Gets the current deployment state of a fee config id\"},\"getFeeConfigIds()\":{\"notice\":\"Gets the fee config ids\"},\"getFeeConfigsByChain(uint256)\":{\"notice\":\"Gets all fee config ids by chain id\"},\"getFeeSyncQueueByChain(uint256)\":{\"notice\":\"Gets the current queue for a chain\"},\"queueUpManually((bytes32,uint256,uint8)[])\":{\"notice\":\"Queues up fee configs manually\"},\"removeChain((uint256))\":{\"notice\":\"Removes a corresponding chain\"},\"removeFeeConfig((bytes32))\":{\"notice\":\"Removes a fee config\"},\"unassignFeeConfigFromAllChains((bytes32))\":{\"notice\":\"Removes all existing fee config to chain connections\"},\"unassignFeeConfigFromChain((bytes32,uint256))\":{\"notice\":\"Removes a fee config to chain connection\"},\"updateFeeConfig((bytes32,uint256,address))\":{\"notice\":\"Updates a fee config partially\"}},\"notice\":\"It's responsible for managing fees and its state of deployment. This contract supposed to be deployed only on the home chain, not on the target chain.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/diamond/facets/FeeManagerFacet.sol\":\"FeeManagerFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/diamond/facets/FeeManagerFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.19;\\n\\nimport { LibAccessControlEnumerable } from \\\"./../libraries/LibAccessControlEnumerable.sol\\\";\\nimport { LibFeeManagerStorage } from \\\"./../libraries/LibFeeManagerStorage.sol\\\";\\nimport { LibFeeManager } from \\\"./../libraries/LibFeeManager.sol\\\";\\nimport {\\n    AddChainParams,\\n    AddFeeConfigParams,\\n    AssignFeeConfigToChainParams,\\n    FeeConfig,\\n    FeeConfigDeployState,\\n    FeeSyncQueue,\\n    RemoveChainParams,\\n    RemoveFeeConfigParams,\\n    UnassignFeeConfigFromAllChainsParams,\\n    UnassignFeeConfigFromChainParams,\\n    UpdateFeeConfigParams\\n} from \\\"./../helpers/Structs.sol\\\";\\nimport { addressZeroCheck } from \\\"./../helpers/Functions.sol\\\";\\nimport { FeeSyncAction, FeeDeployState } from \\\"./../helpers/Enums.sol\\\";\\nimport { Constants } from \\\"./../helpers/Constants.sol\\\";\\n\\n/// @title Fee Manager Facet\\n/// @author Daniel <danieldegendev@gmail.com>\\n/// @notice It's responsible for managing fees and its state of deployment. This contract supposed to be deployed only on the home chain, not on the target chain.\\n/// @custom:version 1.0.0\\ncontract FeeManagerFacet {\\n    error ChainIdZero();\\n    error ChainIdExists(uint256 chainId);\\n    error ChainIdNotExisting(uint256 chainId);\\n    error ConfigAlreadyAssignedToChain(bytes32 id, uint256 chainId);\\n    error ConfigNotAssignedToChain(bytes32 id, uint256 chainId);\\n    error ConfigsAssignedToChain(uint256 chainId);\\n    error ConfigInUse(bytes32 id);\\n    error FeeZero();\\n    error ConfigExists(bytes32 id);\\n    error ConfigNotExisting(bytes32 id);\\n    error SyncQueueEmpty();\\n\\n    event FeeConfigAdded(bytes32 indexed id, AddFeeConfigParams params, address sender);\\n    event FeeConfigUpdated(bytes32 indexed id, UpdateFeeConfigParams params, address sender);\\n    event FeeConfigRemoved(bytes32 indexed id, address sender);\\n    event ChainAdded(uint256 chainId, address target);\\n    event ChainRemoved(uint256 chainId);\\n    event ConfigAssignedToChain(bytes32 indexed id, uint256 chainId);\\n    event ConfigUnassignedFromChain(bytes32 indexed id, uint256 chainId);\\n    event ConfigUnassignedFromAllChains(bytes32 indexed id);\\n    event ClearQueue();\\n    event ManuallyQueued();\\n\\n    /// Adds a corresponding chain\\n    /// @param _params consists of the chain id and target addess\\n    /// @dev the target address is the desired contract address receiving the fee config information\\n    function addChain(AddChainParams calldata _params) external {\\n        LibAccessControlEnumerable.checkRole(Constants.FEE_MANAGER_ROLE);\\n        if (_params.chainId == 0) revert ChainIdZero();\\n        addressZeroCheck(_params.target);\\n        LibFeeManagerStorage.FeeManagerStorage storage _store = LibFeeManagerStorage.feeManagerStorage();\\n        if (_store.isChainSupported[_params.chainId]) revert ChainIdExists(_params.chainId);\\n        _store.isChainSupported[_params.chainId] = true;\\n        _store.chainTargets[_params.chainId] = _params.target;\\n        _store.chainIds.push(_params.chainId);\\n        emit ChainAdded(_params.chainId, _params.target);\\n    }\\n\\n    /// Removes a corresponding chain\\n    /// @param _params consists only of the chain id\\n    function removeChain(RemoveChainParams calldata _params) external {\\n        LibAccessControlEnumerable.checkRole(Constants.FEE_MANAGER_ROLE);\\n        LibFeeManagerStorage.FeeManagerStorage storage _store = LibFeeManagerStorage.feeManagerStorage();\\n        if (!_store.isChainSupported[_params.chainId]) revert ChainIdNotExisting(_params.chainId);\\n        if (_store.chainIdFeeConfigMap[_params.chainId].length > 0) revert ConfigsAssignedToChain(_params.chainId);\\n        delete _store.chainTargets[_params.chainId];\\n        delete _store.isChainSupported[_params.chainId];\\n        emit ChainRemoved(_params.chainId);\\n    }\\n\\n    /// Adds a fee config\\n    /// @param _params see {contracts/diamond/helpers/Structs.sol#AddFeeConfigParams}\\n    /// @dev will fail if a config id is already existing or the fee value is zero\\n    function addFeeConfig(AddFeeConfigParams calldata _params) external {\\n        LibAccessControlEnumerable.checkRole(Constants.FEE_MANAGER_ROLE);\\n        if (LibFeeManager.exists(_params.id)) revert ConfigExists(_params.id);\\n        if (_params.fee == 0) revert FeeZero();\\n        LibFeeManagerStorage.FeeManagerStorage storage _store = LibFeeManagerStorage.feeManagerStorage();\\n        _store.feeConfigs[_params.id] = FeeConfig({\\n            fee: _params.fee,\\n            receiver: _params.receiver,\\n            ftype: _params.ftype,\\n            currency: _params.currency\\n        });\\n        _store.feeConfigIds.push(_params.id);\\n        emit FeeConfigAdded(_params.id, _params, msg.sender);\\n    }\\n\\n    /// Updates a fee config partially\\n    /// @param _params see {contracts/diamond/helpers/Structs.sol#UpdateFeeConfigParams}\\n    /// @dev if you need more data changed than _params in providing, remove and add a fee\\n    function updateFeeConfig(UpdateFeeConfigParams calldata _params) external {\\n        LibAccessControlEnumerable.checkRole(Constants.FEE_MANAGER_ROLE);\\n        if (!LibFeeManager.exists(_params.id)) revert ConfigNotExisting(_params.id);\\n        if (_params.fee == 0) revert FeeZero();\\n        LibFeeManagerStorage.FeeManagerStorage storage _store = LibFeeManagerStorage.feeManagerStorage();\\n        LibFeeManager.archiveFeeConfig(_params.id);\\n        _store.feeConfigs[_params.id].fee = _params.fee;\\n        _store.feeConfigs[_params.id].receiver = _params.receiver;\\n        for (uint256 i = 0; i < _store.chainIds.length; i++) {\\n            for (uint256 j = 0; j < _store.chainIdFeeConfigMap[_store.chainIds[i]].length; j++) {\\n                if (_store.chainIdFeeConfigMap[_store.chainIds[i]][j] == _params.id) {\\n                    LibFeeManager.queue(_params.id, _store.chainIds[i], FeeSyncAction.Update);\\n                }\\n            }\\n        }\\n        emit FeeConfigUpdated(_params.id, _params, msg.sender);\\n    }\\n\\n    /// Removes a fee config\\n    /// @param _params params consist of a fee id that should be removed\\n    function removeFeeConfig(RemoveFeeConfigParams calldata _params) external {\\n        LibAccessControlEnumerable.checkRole(Constants.FEE_MANAGER_ROLE);\\n        if (!LibFeeManager.exists(_params.id)) revert ConfigNotExisting(_params.id);\\n        if (LibFeeManager.isFeeConfigInUse(_params.id)) revert ConfigInUse(_params.id);\\n        LibFeeManagerStorage.FeeManagerStorage storage _store = LibFeeManagerStorage.feeManagerStorage();\\n        LibFeeManager.archiveFeeConfig(_params.id);\\n        for (uint256 i = 0; i < _store.feeConfigIds.length; i++) {\\n            if (_store.feeConfigIds[i] == _params.id) {\\n                _store.feeConfigIds[i] = _store.feeConfigIds[_store.feeConfigIds.length - 1];\\n                break;\\n            }\\n        }\\n        _store.feeConfigIds.pop();\\n        delete _store.feeConfigs[_params.id];\\n        emit FeeConfigRemoved(_params.id, msg.sender);\\n    }\\n\\n    /// Adds a fee config to chain connection\\n    /// @param _params see {contracts/diamond/helpers/Structs.sol#AssignFeeConfigToChainParams}\\n    /// @dev after the assignment, the fee config is added to a queue with an add action\\n    function assignFeeConfigToChain(AssignFeeConfigToChainParams calldata _params) external {\\n        LibAccessControlEnumerable.checkRole(Constants.FEE_MANAGER_ROLE);\\n        if (!LibFeeManager.exists(_params.id)) revert ConfigNotExisting(_params.id);\\n        LibFeeManagerStorage.FeeManagerStorage storage _store = LibFeeManagerStorage.feeManagerStorage();\\n        if (!_store.isChainSupported[_params.chainId]) revert ChainIdNotExisting(_params.chainId);\\n        if (_store.chainIdFeeConfig[_params.chainId][_params.id]) revert ConfigAlreadyAssignedToChain(_params.id, _params.chainId);\\n        _store.chainIdFeeConfig[_params.chainId][_params.id] = true;\\n        _store.chainIdFeeConfigMap[_params.chainId].push(_params.id);\\n        LibFeeManager.queue(_params.id, _params.chainId, FeeSyncAction.Add);\\n        emit ConfigAssignedToChain(_params.id, _params.chainId);\\n    }\\n\\n    /// Removes a fee config to chain connection\\n    /// @param _params see {contracts/diamond/helpers/Structs.sol#UnassignFeeConfigFromChainParams}\\n    /// @dev the main task will be done in {_decoupleFeeConfigFromChain}\\n    function unassignFeeConfigFromChain(UnassignFeeConfigFromChainParams calldata _params) external {\\n        LibAccessControlEnumerable.checkRole(Constants.FEE_MANAGER_ROLE);\\n        if (!LibFeeManager.exists(_params.id)) revert ConfigNotExisting(_params.id);\\n        LibFeeManagerStorage.FeeManagerStorage storage _store = LibFeeManagerStorage.feeManagerStorage();\\n        if (!_store.isChainSupported[_params.chainId]) revert ChainIdNotExisting(_params.chainId);\\n        if (!_store.chainIdFeeConfig[_params.chainId][_params.id]) revert ConfigNotAssignedToChain(_params.id, _params.chainId);\\n        _decoupleFeeConfigFromChain(_params.id, _params.chainId);\\n        emit ConfigUnassignedFromChain(_params.id, _params.chainId);\\n    }\\n\\n    /// Removes all existing fee config to chain connections\\n    /// @param _params see {contracts/diamond/helpers/Structs.sol#UnassignFeeConfigFromAllChainsParams}\\n    /// @dev it will iteration through all chains and removes the connections. The main task will be done in {_decoupleFeeConfigFromChain}\\n    function unassignFeeConfigFromAllChains(UnassignFeeConfigFromAllChainsParams calldata _params) external {\\n        LibAccessControlEnumerable.checkRole(Constants.FEE_MANAGER_ROLE);\\n        if (!LibFeeManager.exists(_params.id)) revert ConfigNotExisting(_params.id);\\n        LibFeeManagerStorage.FeeManagerStorage storage _store = LibFeeManagerStorage.feeManagerStorage();\\n        for (uint256 i = 0; i < _store.chainIds.length; i++) _decoupleFeeConfigFromChain(_params.id, _store.chainIds[i]);\\n        emit ConfigUnassignedFromAllChains(_params.id);\\n    }\\n\\n    /// Clears the queue and removes all current jobs\\n    /// @dev the deployment state is set to pending while doing\\n    function clearQueue() external {\\n        LibAccessControlEnumerable.checkRole(Constants.FEE_MANAGER_ROLE);\\n        LibFeeManagerStorage.FeeManagerStorage storage s = LibFeeManagerStorage.feeManagerStorage();\\n        uint256[] memory _chainIds = s.chainIds;\\n        for (uint256 i = 0; i < _chainIds.length; i++) {\\n            for (uint256 j = 0; j < s.feeSyncQueue[_chainIds[i]].length; j++) {\\n                delete s.feeDeployState[_chainIds[i]][s.feeSyncQueue[_chainIds[i]][j].id];\\n            }\\n            delete s.feeSyncQueue[_chainIds[i]];\\n        }\\n        emit ClearQueue();\\n    }\\n\\n    /// Queues up fee configs manually\\n    /// @param _syncQueue list of FeeSyncQueue data\\n    function queueUpManually(FeeSyncQueue[] calldata _syncQueue) external {\\n        LibAccessControlEnumerable.checkRole(Constants.FEE_MANAGER_ROLE);\\n        LibFeeManagerStorage.FeeManagerStorage storage s = LibFeeManagerStorage.feeManagerStorage();\\n        for (uint256 i = 0; i < _syncQueue.length; i++) {\\n            if (!LibFeeManager.exists(_syncQueue[i].id)) revert ConfigNotExisting(_syncQueue[i].id);\\n            if (!s.isChainSupported[_syncQueue[i].chainId]) revert ChainIdNotExisting(_syncQueue[i].chainId);\\n            LibFeeManager.queue(_syncQueue[i].id, _syncQueue[i].chainId, _syncQueue[i].action);\\n        }\\n        emit ManuallyQueued();\\n    }\\n\\n    /// viewables\\n\\n    /// Gets the fee config ids\\n    /// @return _feeConfigIds returns an arrayf of fee config ids\\n    function getFeeConfigIds() external view returns (bytes32[] memory _feeConfigIds) {\\n        _feeConfigIds = LibFeeManagerStorage.feeManagerStorage().feeConfigIds;\\n    }\\n\\n    /// Gets the fee config by fee config id\\n    /// @param _id fee config id\\n    /// @return _feeConfig fee config\\n    function getFeeConfig(bytes32 _id) external view returns (FeeConfig memory _feeConfig) {\\n        _feeConfig = LibFeeManagerStorage.feeManagerStorage().feeConfigs[_id];\\n    }\\n\\n    /// Gets all previous fee config states by fee config id\\n    /// @param _id fee config id\\n    /// @return _feeConfig array of fee configs\\n    function getArchivedFeeConfigs(bytes32 _id) external view returns (FeeConfig[] memory _feeConfig) {\\n        _feeConfig = LibFeeManagerStorage.feeManagerStorage().feeConfigsArchive[_id];\\n    }\\n\\n    /// Gets all fee config ids by chain id\\n    /// @param _chainId chain id\\n    /// @return _feeConfigs array of fee config ids\\n    function getFeeConfigsByChain(uint256 _chainId) external view returns (bytes32[] memory _feeConfigs) {\\n        _feeConfigs = LibFeeManagerStorage.feeManagerStorage().chainIdFeeConfigMap[_chainId];\\n    }\\n\\n    /// Gets the current queue for a chain\\n    /// @param _chainId chain id\\n    /// @return _feeSyncQueue returns an array of queue items. See {contracts/diamond/helpers/Structs.sol#FeeSyncQueue}\\n    function getFeeSyncQueueByChain(uint256 _chainId) external view returns (FeeSyncQueue[] memory _feeSyncQueue) {\\n        _feeSyncQueue = LibFeeManagerStorage.feeManagerStorage().feeSyncQueue[_chainId];\\n    }\\n\\n    /// Gets the current deployment state of a fee config id\\n    /// @param _chainId chain id\\n    /// @param _id fee config id\\n    /// @return _state deployment state of a fee config\\n    function getFeeConfigDeployState(uint256 _chainId, bytes32 _id) external view returns (FeeDeployState _state) {\\n        _state = LibFeeManagerStorage.feeManagerStorage().feeDeployState[_chainId][_id];\\n    }\\n\\n    /// Gets the current deployment state of all fee config ids from a given chain id\\n    /// @param _chainId chain id\\n    /// @return _states all deployment states of config ids for a specific chain\\n    function getDeployStatesForChain(uint256 _chainId) external view returns (FeeConfigDeployState[] memory _states) {\\n        LibFeeManagerStorage.FeeManagerStorage storage _s = LibFeeManagerStorage.feeManagerStorage();\\n        if (_s.chainIdFeeConfigMap[_chainId].length > 0) {\\n            _states = new FeeConfigDeployState[](_s.chainIdFeeConfigMap[_chainId].length);\\n            for (uint256 i = 0; i < _s.chainIdFeeConfigMap[_chainId].length; i++) {\\n                _states[i] = FeeConfigDeployState({\\n                    id: _s.chainIdFeeConfigMap[_chainId][i],\\n                    state: _s.feeDeployState[_chainId][_s.chainIdFeeConfigMap[_chainId][i]]\\n                });\\n            }\\n        }\\n    }\\n\\n    /// internals\\n\\n    /// Removes a fee config to chain connection and queues it\\n    /// @param _id fee config id\\n    /// @param _chainId chain id\\n    function _decoupleFeeConfigFromChain(bytes32 _id, uint256 _chainId) internal {\\n        LibFeeManagerStorage.FeeManagerStorage storage _store = LibFeeManagerStorage.feeManagerStorage();\\n        if (_store.chainIdFeeConfigMap[_chainId].length > 0) {\\n            for (uint256 i = 0; i < _store.chainIdFeeConfigMap[_chainId].length; i++) {\\n                if (_store.chainIdFeeConfigMap[_chainId][i] == _id) {\\n                    _store.chainIdFeeConfigMap[_chainId][i] = _store.chainIdFeeConfigMap[_chainId][\\n                        _store.chainIdFeeConfigMap[_chainId].length - 1\\n                    ];\\n                    break;\\n                }\\n            }\\n            _store.chainIdFeeConfigMap[_chainId].pop();\\n            delete _store.chainIdFeeConfig[_chainId][_id];\\n            LibFeeManager.queue(_id, _chainId, FeeSyncAction.Delete);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xff2f1f74d0f560fc42e4ddcc5efb3f23023c58ee45bebfa6f720fe6ed814790a\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/helpers/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nlibrary Constants {\\n    /*-------------------------------- Role --------------------------------*/\\n    // 0x0000000000000000000000000000000000000000000000000000000000000000\\n    bytes32 constant DEFAULT_ADMIN_ROLE = 0x00;\\n    // 0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775\\n    bytes32 constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    // 0xfc425f2263d0df187444b70e47283d622c70181c5baebb1306a01edba1ce184c\\n    bytes32 constant DEPLOYER_ROLE = keccak256(\\\"DEPLOYER_ROLE\\\");\\n    // 0x6c0757dc3e6b28b2580c03fd9e96c274acf4f99d91fbec9b418fa1d70604ff1c\\n    bytes32 constant FEE_MANAGER_ROLE = keccak256(\\\"FEE_MANAGER_ROLE\\\");\\n    // 0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6\\n    bytes32 constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    // 0x3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a848\\n    bytes32 constant BURNER_ROLE = keccak256(\\\"BURNER_ROLE\\\");\\n    // 0x63eb04268b235ac1afacf3bcf4b19c5c175d0417a1555fb3ff79ae190f71ee7c\\n    bytes32 constant FEE_STORE_MANAGER_ROLE = keccak256(\\\"FEE_STORE_MANAGER_ROLE\\\");\\n    // 0x77f52ccf2f32e71a0cff8f14ad8c8303b7d2e4c7609b8fba963114f4db2af767\\n    bytes32 constant FEE_DISTRIBUTOR_PUSH_ROLE = keccak256(\\\"FEE_DISTRIBUTOR_PUSH_ROLE\\\");\\n    // 0xe85d5f1f8338cb18f500856d1568d0f3b0d0971f25b3ccd134475e991354edbf\\n    bytes32 constant FEE_DISTRIBUTOR_MANAGER = keccak256(\\\"FEE_DISTRIBUTOR_MANAGER\\\");\\n    /*----------------------------------------------------------------------*/\\n\\n    /*------------------------------- Fee ID -------------------------------*/\\n    // 0xacfc432e98ad100d9f8c385f3782bc88a17e1de7e53f69678cbcc41e8ffe72b0\\n    bytes32 constant ERC20_MARKETING_FEE = keccak256(\\\"ERC20_MARKETING_FEE\\\");\\n    // 0x6b78196f16f828b24a5a6584d4a1bcc5ce2f3154ba57839db273e6a4ebbe92c2\\n    bytes32 constant ERC20_REWARD_FEE = keccak256(\\\"ERC20_REWARD_FEE\\\");\\n    // 0x6e3678bee6f77c8a6179922c9a518b08407e6d9d2593ac683a87c979c8b31a12\\n    bytes32 constant ERC20_PLATFORM_FEE = keccak256(\\\"ERC20_PLATFORM_FEE\\\");\\n    // 0x6e2178bb28988b4c92cd3092e9e342e7639bfda2f68a02ac478cb084759607cf\\n    bytes32 constant ERC20_DEVELOPER_FEE = keccak256(\\\"ERC20_DEVELOPER_FEE\\\");\\n    /*----------------------------------------------------------------------*/\\n\\n    /*--------------------------- Relayer Actions --------------------------*/\\n    // 0xf145583e6e33d9da99af75b579493b11db4229a339336b82c748312f152b29a9\\n    bytes32 constant RELAYER_ACTION_DEPLOY_FEES = keccak256(\\\"RELAYER_ACTION_DEPLOY_FEES\\\");\\n    // 0xf375f410a0dc135af0d9a16e273eac999064981d8813a68af762e93567a43aac\\n    bytes32 constant RELAYER_ACTION_DEPLOY_FEES_CONFIRM = keccak256(\\\"RELAYER_ACTION_DEPLOY_FEES_CONFIRM\\\");\\n    // 0x9d62257b25ea052fe7cd5123fd6b791268b8673b073aae5de4a823c4dc7d7607\\n    bytes32 constant RELAYER_ACTION_SEND_FEES = keccak256(\\\"RELAYER_ACTION_SEND_FEES\\\");\\n    /*----------------------------------------------------------------------*/\\n}\\n\",\"keccak256\":\"0xd97d83c120a78ed4d7d6cc2ca3b62d2e9fd2fd82d3ffebfffb1659f05218c6cf\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/helpers/Enums.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/// enums\\nenum FeeCurrency {\\n    Null,\\n    // L1\\n    Native,\\n    // different asset\\n    Token\\n}\\n\\nenum FeeType {\\n    Null,\\n    // absolute/onetime\\n    Default,\\n    // buy/sell depending on target\\n    From,\\n    // buy/sell depending on target\\n    To\\n}\\n\\nenum FeeSyncAction {\\n    Null,\\n    // adding a fee\\n    Add,\\n    // updating a fee\\n    Update,\\n    // removing a fee\\n    Delete\\n}\\n\\nenum FeeDeployState {\\n    Null,\\n    // a fee is recently added, updated or removed\\n    Queued,\\n    // a fee config is deployed\\n    Pending,\\n    // a fee gets receives information about being deployed\\n    Deployed\\n}\\n\",\"keccak256\":\"0x0c969525e1a2602179c6b12648cd070a7850be970ae4845b2857d1e888799873\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/helpers/Functions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.17;\\n\\nimport { AddressZero } from \\\"./GenericErrors.sol\\\";\\n\\nfunction addressZeroCheck(address _candidate) pure {\\n    if (_candidate == address(0)) revert AddressZero();\\n}\\n\",\"keccak256\":\"0x944f958352170d69f64999ddbf8d0045b888b1ea3fe73dda77bf435fa80ee763\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/helpers/GenericErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nerror AddressZero();\\nerror ZeroValueNotAllowed();\\nerror InsufficientAllowance();\\nerror InsufficientBalance();\\nerror InsufficientFunds();\\nerror NotAllowed();\\nerror AlreadyInitialized();\\nerror NoReetrancy();\\nerror WrongChain();\\nerror UnexpectedBalance();\\nerror FailToSendNative();\\n\",\"keccak256\":\"0xa32b95f0bbd73e6900f30956dc9a0019ec3637eb09f7bab6454bff46d662403d\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/helpers/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport { FeeCurrency, FeeType, FeeSyncAction, FeeDeployState } from \\\"./Enums.sol\\\";\\n\\n/// General Fee Config\\n\\nstruct FeeConfig {\\n    // relative: 10000 = 1% or 100 = 0.01%\\n    // absolute: 10000 = 1 or 1 = 0.0001\\n    uint256 fee;\\n    // Assets are always going to the fee distributor on the home chain. This config is necessary to define which receiver gets this asset.\\n    // It's purpose can be overwritten by the FeeDistributor. So it will serve as a fallback.\\n    address receiver;\\n    // defines the type. It does not have a purpose yet but may have in the future\\n    // see {Enums->FeeType}\\n    FeeType ftype;\\n    // type of how the fees should be handles\\n    // see {Enums->FeeCurrency}\\n    FeeCurrency currency;\\n    // // Deploy state of a fee config\\n    // // see {Enums->FeeDeployState}\\n    // FeeDeployState deployState;\\n}\\n\\n/// Fee Management\\n\\nstruct AddFeeConfigParams {\\n    // fee id which can be defined elsewhere but needs to be a bytes32\\n    bytes32 id;\\n    // see {struct FeeConfig->fee}\\n    uint256 fee;\\n    // see {struct FeeConfig->receiver}\\n    address receiver;\\n    // see {struct FeeConfig->ftype}\\n    FeeType ftype;\\n    // see {struct FeeConfig->currency}\\n    FeeCurrency currency;\\n}\\n\\nstruct UpdateFeeConfigParams {\\n    // see {struct AddFeeConfigParams->id}\\n    bytes32 id;\\n    // see {struct FeeConfig->fee}\\n    uint256 fee;\\n    // see {struct FeeConfig->fee}\\n    address receiver;\\n}\\n\\nstruct RemoveFeeConfigParams {\\n    // see {struct AddFeeConfigParams->id}\\n    bytes32 id;\\n}\\n\\n/// Chain Management\\n\\nstruct AddChainParams {\\n    // chain id\\n    uint256 chainId;\\n    // address of the participant, most likely the diamon address of the target chain\\n    address target;\\n}\\nstruct RemoveChainParams {\\n    // chain id\\n    uint256 chainId;\\n}\\n\\n/// Fee & Chain Management\\n\\nstruct AssignFeeConfigToChainParams {\\n    // fee config id\\n    bytes32 id;\\n    // chain id to assign the fee config id to\\n    uint256 chainId;\\n}\\nstruct UnassignFeeConfigFromChainParams {\\n    // fee config id\\n    bytes32 id;\\n    // chain id to unassign the fee config id from\\n    uint256 chainId;\\n}\\nstruct UnassignFeeConfigFromAllChainsParams {\\n    // fee config id\\n    bytes32 id;\\n}\\n\\n/// Syncing\\n\\nstruct FeeSyncQueue {\\n    // fee config id\\n    bytes32 id;\\n    // chain id\\n    uint256 chainId;\\n    // action to execute on the target chain\\n    FeeSyncAction action;\\n}\\n\\nstruct FeeConfigDeployState {\\n    bytes32 id;\\n    FeeDeployState state;\\n}\\n\\n/// Data Transfer Objects\\n\\nstruct FeeConfigSyncDTO {\\n    // fee config id\\n    bytes32 id;\\n    // fee value\\n    uint256 fee;\\n    // address to make conditional charged based on a specific token\\n    // a contract can decide by itself whether to it or not\\n    // if defined and used, this fee should be restricted and charged onto a specific token\\n    address target;\\n    // desired action to execute on the target chain\\n    FeeSyncAction action;\\n}\\nstruct FeeConfigSyncHomeFees {\\n    // fee config id\\n    bytes32 id;\\n    // amount of the collected fees of this if\\n    uint256 amount;\\n}\\nstruct FeeConfigSyncHomeDTO {\\n    // total amount of collected fees\\n    uint256 totalFees;\\n    // address of the bounty receiver on the home chain\\n    address bountyReceiver;\\n    // containing fee information that will moved to the home chain\\n    FeeConfigSyncHomeFees[] fees;\\n}\\n\\nstruct CelerRelayerData {\\n    // bytes32 hash which defined the action that should be taken\\n    bytes32 what;\\n    // address of the contract which what is being executed to\\n    address target;\\n    // encoded message of the desired scope\\n    bytes message;\\n}\\n\\n/// Fee Store\\n\\nstruct FeeStoreConfig {\\n    // fee config id\\n    bytes32 id;\\n    // fee\\n    uint256 fee;\\n    // address of the contract which what is being executed to\\n    address target;\\n    // flag for being markes as deleted\\n    bool deleted;\\n}\\n\\n/// Fee Distributor\\n\\nstruct AddReceiverParams {\\n    // public name for the receiver\\n    // can be \\\"Staking\\\", \\\"Liquidity Backing\\\" or whatever\\n    string name;\\n    // potion of share in points. Points will be summarized in the distribution to calculate the relative share\\n    uint64 points;\\n    // address of the contract/account that receives the share\\n    address account;\\n    // swap path in case a share receiver expects another token then the intermediate token of the bridge\\n    address[] swapPath;\\n}\\n\",\"keccak256\":\"0x4ce7534af69a6112e17237cd7b86f9c679ce510d363025c6a946ddd27a61527d\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/libraries/LibAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nlibrary LibAccessControlEnumerable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    bytes32 constant ACCESS_CONTROL_STORAGE_POSITION = keccak256(\\\"degenx.access.control.storage\\\");\\n\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct AccessControlStorage {\\n        mapping(bytes32 => RoleData) roles;\\n        mapping(bytes32 => EnumerableSet.AddressSet) roleMembers;\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    function accessControlStorage() internal pure returns (AccessControlStorage storage acs) {\\n        bytes32 position = ACCESS_CONTROL_STORAGE_POSITION;\\n        assembly {\\n            acs.slot := position\\n        }\\n    }\\n\\n    function checkRole(bytes32 role) internal view {\\n        checkRole(role, msg.sender);\\n    }\\n\\n    function checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    function hasRole(bytes32 role, address account) internal view returns (bool) {\\n        AccessControlStorage storage acs = accessControlStorage();\\n        return acs.roles[role].members[account];\\n    }\\n\\n    function grantRole(bytes32 role, address account) internal {\\n        AccessControlStorage storage acs = accessControlStorage();\\n        if (!hasRole(role, account)) {\\n            acs.roles[role].members[account] = true;\\n            emit RoleGranted(role, account, msg.sender);\\n            acs.roleMembers[role].add(account);\\n        }\\n    }\\n\\n    function revokeRole(bytes32 role, address account) internal {\\n        AccessControlStorage storage acs = accessControlStorage();\\n        if (hasRole(role, account)) {\\n            acs.roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, msg.sender);\\n            acs.roleMembers[role].remove(account);\\n        }\\n    }\\n\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        AccessControlStorage storage acs = accessControlStorage();\\n        bytes32 previousAdminRole = acs.roles[role].adminRole;\\n        acs.roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n}\\n\",\"keccak256\":\"0xd72f7b388e9d30e2f0dfeaf2dabf1f85785802488695de9b6db540744c7179f3\",\"license\":\"MIT\"},\"contracts/diamond/libraries/LibFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.19;\\n\\nimport \\\"./LibFeeManagerStorage.sol\\\";\\nimport { FeeConfig, FeeSyncQueue } from \\\"./../helpers/Structs.sol\\\";\\nimport { FeeType, FeeSyncAction, FeeDeployState } from \\\"./../helpers/Enums.sol\\\";\\n\\n/// @title Lib Fee Manager\\n/// @author Daniel <danieldegendev@gmail.com>\\n/// @notice Helper functions for the Fee Manager Facet\\nlibrary LibFeeManager {\\n    /// viewables\\n\\n    /// Checks whether a fee config exsists or not\\n    /// @param _id fee config id\\n    function exists(bytes32 _id) internal view returns (bool _exists) {\\n        _exists = LibFeeManagerStorage.feeManagerStorage().feeConfigs[_id].ftype != FeeType.Null;\\n    }\\n\\n    /// Checks whether a fee config is in use on a specific chain or not\\n    /// @param _id fee config id\\n    function isFeeConfigInUse(bytes32 _id) internal view returns (bool _exists) {\\n        for (uint256 i = 0; i < store().chainIds.length; i++) {\\n            for (uint256 j = 0; j < store().chainIdFeeConfigMap[store().chainIds[i]].length; j++) {\\n                if (store().chainIdFeeConfigMap[store().chainIds[i]][j] == _id) {\\n                    _exists = true;\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// Gets the target address for a specific chain\\n    /// @param _chainId chain id\\n    /// @dev normally the address of the diamond on the target chain\\n    function getChainTarget(uint256 _chainId) internal view returns (address _target) {\\n        _target = store().chainTargets[_chainId];\\n    }\\n\\n    /// Gets the fee config by a given id\\n    /// @param _id fee config id\\n    function getFeeConfigById(bytes32 _id) internal view returns (FeeConfig memory _feeConfig) {\\n        LibFeeManagerStorage.FeeManagerStorage storage s = LibFeeManagerStorage.feeManagerStorage();\\n        _feeConfig = s.feeConfigs[_id];\\n    }\\n\\n    /// internals\\n\\n    /// Queues up a specific fee config for a specific chain with a specific action\\n    /// @param _id fee config id\\n    /// @param _chainId chain id\\n    /// @param _action action to execute on the target chain\\n    function queue(bytes32 _id, uint256 _chainId, FeeSyncAction _action) internal {\\n        LibFeeManagerStorage.FeeManagerStorage storage s = LibFeeManagerStorage.feeManagerStorage();\\n        bool alreadInQueue = false;\\n        for (uint256 i = 0; i < s.feeSyncQueue[_chainId].length; i++)\\n            alreadInQueue = alreadInQueue || (s.feeSyncQueue[_chainId][i].id == _id && s.feeSyncQueue[_chainId][i].chainId == _chainId);\\n\\n        if (!alreadInQueue) {\\n            s.feeSyncQueue[_chainId].push(FeeSyncQueue({ id: _id, chainId: _chainId, action: _action }));\\n            s.feeDeployState[_chainId][_id] = FeeDeployState.Queued;\\n        }\\n    }\\n\\n    /// Simple archiving of fee configs\\n    /// @param _id fee config id\\n    /// will be called on update and delete of a fee config\\n    function archiveFeeConfig(bytes32 _id) internal {\\n        FeeConfig storage feeConfigToArchive = LibFeeManagerStorage.feeManagerStorage().feeConfigs[_id];\\n        LibFeeManagerStorage.feeManagerStorage().feeConfigsArchive[_id].push(feeConfigToArchive);\\n    }\\n\\n    /// store\\n    function store() internal pure returns (LibFeeManagerStorage.FeeManagerStorage storage _store) {\\n        _store = LibFeeManagerStorage.feeManagerStorage();\\n    }\\n}\\n\",\"keccak256\":\"0x29586e749e5c7562908180febb0ce2077423326460034f090568b6a9f45b7fc5\",\"license\":\"GPL-3.0-only\"},\"contracts/diamond/libraries/LibFeeManagerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.19;\\n\\nimport { FeeDeployState } from \\\"./../helpers/Enums.sol\\\";\\nimport { FeeConfig, FeeSyncQueue } from \\\"./../helpers/Structs.sol\\\";\\n\\n/// @title Lib Fee Manager Storage\\n/// @author Daniel <danieldegendev@gmail.com>\\n/// @notice Storage for the Fee Manager Facet\\nlibrary LibFeeManagerStorage {\\n    bytes32 constant FEE_MANAGER_STORAGE_POSITION = keccak256(\\\"degenx.fee-manager.storage.v1\\\");\\n\\n    struct FeeManagerStorage {\\n        // all available chains\\n        uint256[] chainIds;\\n        // all available configs\\n        bytes32[] feeConfigIds;\\n        // contract to chain assignments\\n        // chainId => contract\\n        mapping(uint256 => address) chainTargets;\\n        // fee config to chain assignment to store which config should be available on which chain\\n        // chainId => list of fee config ids\\n        mapping(uint256 => bytes32[]) chainIdFeeConfigMap;\\n        // flags for quick checks to avoid looping through chainIdFeeConfigMap\\n        // chainId => feeConfigId\\n        mapping(uint256 => mapping(bytes32 => bool)) chainIdFeeConfig;\\n        // flag if a specific chain is being supported\\n        // chainId => true/false\\n        mapping(uint256 => bool) isChainSupported;\\n        // fee config id to fee config mapping. The fee config itself doesn't need to know its id\\n        // feeConfigId => FeeConfig\\n        mapping(bytes32 => FeeConfig) feeConfigs;\\n        // fee config archive of recent fee config settings to a specific fee config id\\n        // feeConfigId => list of fee config variants\\n        mapping(bytes32 => FeeConfig[]) feeConfigsArchive;\\n        // queue for syncing configs with the target contracts\\n        // chainId => list of fee sync data\\n        mapping(uint256 => FeeSyncQueue[]) feeSyncQueue;\\n        // deployment state per chain per fee config id\\n        // chainId => fee config id => deployment state of a fee config\\n        mapping(uint256 => mapping(bytes32 => FeeDeployState)) feeDeployState;\\n    }\\n\\n    /// store\\n    function feeManagerStorage() internal pure returns (FeeManagerStorage storage fms) {\\n        bytes32 position = FEE_MANAGER_STORAGE_POSITION;\\n        assembly {\\n            fms.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf75585e28177d67470e525ee0e38896aa7de5d57a4ea239138c44d7cdc76f1c2\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612f2a806100206000396000f3fe608060405234801561001057600080fd5b506004361061011b5760003560e01c80635fc3e68b116100b2578063a2a7799e11610081578063bd32fd1f11610066578063bd32fd1f146102a5578063f0eab4f2146102c5578063f22cb874146102d857600080fd5b8063a2a7799e1461027f578063bb4731dd1461029257600080fd5b80635fc3e68b14610219578063679feb0514610239578063742f988f1461024c5780637944bac41461025f57600080fd5b80633d378de4116100ee5780633d378de4146101865780633f91c417146101995780634d441b34146101ac57806352709698146101bf57600080fd5b80630c846a9514610120578063146516df1461013e578063257c12101461015e57806336f95f2114610173575b600080fd5b6101286102e0565b604051610135919061280f565b60405180910390f35b61015161014c366004612853565b61035a565b604051610135919061290a565b61017161016c36600461292a565b61046a565b005b610128610181366004612853565b610613565b610171610194366004612946565b610694565b6101716101a736600461292a565b61095d565b6101716101ba366004612958565b610a66565b61020c6101cd3660046129cd565b60009182527f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbdf6020908152604080842092845291905290205460ff1690565b60405161013591906129ef565b61022c610227366004612853565b610c6d565b6040516101359190612a02565b610171610247366004612a76565b610d44565b61017161025a36600461292a565b610f65565b61027261026d366004612853565b611196565b6040516101359190612a92565b61017161028d366004612a76565b6112bd565b6101716102a0366004612ad4565b6114d3565b6102b86102b3366004612853565b61175e565b6040516101359190612ae6565b6101716102d3366004612a76565b611920565b610171611acb565b60607f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbd660010180548060200260200160405190810160405280929190818152602001828054801561035057602002820191906000526020600020905b81548152602001906001019080831161033c575b5050505050905090565b61038460408051608081018252600080825260208201819052909182019081526020016000905290565b60008281527f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbdc6020908152604091829020825160808101845281548152600182015473ffffffffffffffffffffffffffffffffffffffff8116938201939093529290919083019074010000000000000000000000000000000000000000900460ff1660038111156104175761041761286c565b60038111156104285761042861286c565b81526020016001820160159054906101000a900460ff1660028111156104505761045061286c565b60028111156104615761046161286c565b90525092915050565b6104937f6c0757dc3e6b28b2580c03fd9e96c274acf4f99d91fbec9b418fa1d70604ff1c611cf2565b803560009081527f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbdb60205260409020547f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbd69060ff16610526576040517f9dbc0be9000000000000000000000000000000000000000000000000000000008152823560048201526024015b60405180910390fd5b8135600090815260038201602052604090205415610573576040517fc1acfb9b0000000000000000000000000000000000000000000000000000000081528235600482015260240161051d565b81356000818152600283016020908152604080832080547fffffffffffffffffffffffff00000000000000000000000000000000000000001690556005850182529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905590519182527f11a9d1a77f76361ed131c19b1dc5758504c51dbde2e49fc973a0ef9577ad13d591015b60405180910390a15050565b60008181527f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbd9602090815260409182902080548351818402810184019094528084526060939283018282801561068857602002820191906000526020600020905b815481526020019060010190808311610674575b50505050509050919050565b6106bd7f6c0757dc3e6b28b2580c03fd9e96c274acf4f99d91fbec9b418fa1d70604ff1c611cf2565b6106c78135611cff565b15610701576040517fc39f80020000000000000000000000000000000000000000000000000000000081528135600482015260240161051d565b806020013560000361073f576040517f96b28c3700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805160808101825260208084013582527f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbd692908201906107879060608601908601612b5a565b73ffffffffffffffffffffffffffffffffffffffff1681526020016107b26080850160608601612b82565b60038111156107c3576107c361286c565b81526020016107d860a0850160808601612bae565b60028111156107e9576107e961286c565b905282356000908152600683016020908152604091829020835181559083015160018201805473ffffffffffffffffffffffffffffffffffffffff9092167fffffffffffffffffffffffff000000000000000000000000000000000000000083168117825593850151929390917fffffffffffffffffffffff0000000000000000000000000000000000000000001617740100000000000000000000000000000000000000008360038111156108a1576108a161286c565b021790555060608201516001820180547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff1675010000000000000000000000000000000000000000008360028111156108fc576108fc61286c565b02179055505050600180820180549182018155600090815260209020833591018190556040517f9b11f1505f73962adc35b003152bc612f9ce8e778b65b47270bc89458ee3d2cb906109519085903390612bc9565b60405180910390a25050565b6109867f6c0757dc3e6b28b2580c03fd9e96c274acf4f99d91fbec9b418fa1d70604ff1c611cf2565b6109908135611cff565b6109c9576040517f4b5215fe0000000000000000000000000000000000000000000000000000000081528135600482015260240161051d565b7f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbd660005b8154811015610a3557610a238360000135836000018381548110610a1357610a13612c4e565b9060005260206000200154611d66565b80610a2d81612cac565b9150506109ed565b506040518235907fa0b31ce9354d554d5ef35c6d3b5a465fe5f5839e27a552874f114634dc92995e90600090a25050565b610a8f7f6c0757dc3e6b28b2580c03fd9e96c274acf4f99d91fbec9b418fa1d70604ff1c611cf2565b7f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbd660005b82811015610c3e57610adf848483818110610ad057610ad0612c4e565b90506060020160000135611cff565b610b3457838382818110610af557610af5612c4e565b905060600201600001356040517f4b5215fe00000000000000000000000000000000000000000000000000000000815260040161051d91815260200190565b816005016000858584818110610b4c57610b4c612c4e565b60206060909102929092018201358352508101919091526040016000205460ff16610bc257838382818110610b8357610b83612c4e565b905060600201602001356040517f9dbc0be900000000000000000000000000000000000000000000000000000000815260040161051d91815260200190565b610c2c848483818110610bd757610bd7612c4e565b90506060020160000135858584818110610bf357610bf3612c4e565b90506060020160200135868685818110610c0f57610c0f612c4e565b9050606002016040016020810190610c279190612b82565b611f33565b80610c3681612cac565b915050610ab3565b506040517f707187addb456130158bf357fd5fd416e8b077de0320933bbdf40fc42a5bae7f90600090a1505050565b60008181527f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbde60209081526040808320805482518185028101850190935280835260609492939192909184015b82821015610d39578382906000526020600020906003020160405180606001604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff166003811115610d1557610d1561286c565b6003811115610d2657610d2661286c565b8152505081526020019060010190610cba565b505050509050919050565b610d6d7f6c0757dc3e6b28b2580c03fd9e96c274acf4f99d91fbec9b418fa1d70604ff1c611cf2565b8035600003610da8576040517f1721c97600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610dc0610dbb6040830160208401612b5a565b61210e565b803560009081527f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbdb60205260409020547f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbd69060ff1615610e4f576040517f92ffa31d0000000000000000000000000000000000000000000000000000000081528235600482015260240161051d565b8135600090815260058201602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055610e9c918401908401612b5a565b82356000818152600284016020908152604080832080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff96909616959095179094558454600181018655858352918190209091018290557fd34413f9daf08c09e55b3ad5e2f7f18249f3ff26c061cb904f99597dd14ad53e92610f3b91908601908601612b5a565b6040805192835273ffffffffffffffffffffffffffffffffffffffff909116602083015201610607565b610f8e7f6c0757dc3e6b28b2580c03fd9e96c274acf4f99d91fbec9b418fa1d70604ff1c611cf2565b610f988135611cff565b610fd1576040517f4b5215fe0000000000000000000000000000000000000000000000000000000081528135600482015260240161051d565b610fdb813561215b565b15611015576040517fa551148c0000000000000000000000000000000000000000000000000000000081528135600482015260240161051d565b7f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbd661104082356122ca565b60005b60018201548110156110de57826000013582600101828154811061106957611069612c4e565b9060005260206000200154036110cc5760018083018054909161108b91612ce4565b8154811061109b5761109b612c4e565b90600052602060002001548260010182815481106110bb576110bb612c4e565b6000918252602090912001556110de565b806110d681612cac565b915050611043565b50806001018054806110f2576110f2612cf7565b600082815260208082207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff908401810183905590920190925583358083526006840182526040808420938455600190930180547fffffffffffffffffffff0000000000000000000000000000000000000000000016905591513381527f9820d3c0902e565389fef3be28f870ec956f349a35cb94c9ae0d2e58e57be0de9101610951565b60008181527f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbdd60209081526040808320805482518185028101850190935280835260609492939192909184015b82821015610d39576000848152602090819020604080516080810182526002860290920180548352600181015473ffffffffffffffffffffffffffffffffffffffff81169484019490945291929083019074010000000000000000000000000000000000000000900460ff1660038111156112605761126061286c565b60038111156112715761127161286c565b81526020016001820160159054906101000a900460ff1660028111156112995761129961286c565b60028111156112aa576112aa61286c565b81525050815260200190600101906111e3565b6112e67f6c0757dc3e6b28b2580c03fd9e96c274acf4f99d91fbec9b418fa1d70604ff1c611cf2565b6112f08135611cff565b611329576040517f4b5215fe0000000000000000000000000000000000000000000000000000000081528135600482015260240161051d565b60208181013560009081527f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbdb90915260409020547f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbd69060ff166113be576040517f9dbc0be90000000000000000000000000000000000000000000000000000000081526020830135600482015260240161051d565b6020808301356000908152600483018252604080822085358352909252205460ff1615611424576040517f58aa741e000000000000000000000000000000000000000000000000000000008152823560048201526020830135602482015260440161051d565b60208083013560008181526004840183526040808220863580845290855281832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001908117909155848452600387018652918320805480840182559084529490922090930181905561149d92909190611f33565b60405160208084013582528335917f6d54e8fb9f0a9a81b723ec0b146c8a76f26da65a9899a8bdb1f8843194a2ba629101610951565b6114fc7f6c0757dc3e6b28b2580c03fd9e96c274acf4f99d91fbec9b418fa1d70604ff1c611cf2565b6115068135611cff565b61153f576040517f4b5215fe0000000000000000000000000000000000000000000000000000000081528135600482015260240161051d565b806020013560000361157d576040517f96b28c3700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbd66115a882356122ca565b813560009081526006820160209081526040918290209084013590556115d49060608401908401612b5a565b82356000908152600683016020526040812060010180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff93909316929092179091555b81548110156117275760005b82600301600084600001848154811061165557611655612c4e565b906000526020600020015481526020019081526020016000208054905081101561171457836000013583600301600085600001858154811061169957611699612c4e565b9060005260206000200154815260200190815260200160002082815481106116c3576116c3612c4e565b9060005260206000200154036117025761170284600001358460000184815481106116f0576116f0612c4e565b90600052602060002001546002611f33565b8061170c81612cac565b91505061163a565b508061171f81612cac565b91505061162e565b5081600001357ffc6ae11d87bd961aff738c22c1089ae358d192107f1552fc4900554b996c2c3e8333604051610951929190612d26565b60008181527f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbd960205260409020546060907f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbd6901561191a57600083815260038201602052604090205467ffffffffffffffff8111156117df576117df612d70565b60405190808252806020026020018201604052801561182457816020015b60408051808201909152600080825260208201528152602001906001900390816117fd5790505b50915060005b6000848152600383016020526040902054811015611918576040518060400160405280836003016000878152602001908152602001600020838154811061187357611873612c4e565b6000918252602080832090910154835287825260098601815260408083206003880183529083208054949092019390929190869081106118b5576118b5612c4e565b6000918252602080832090910154835282019290925260400190205460ff1660038111156118e5576118e561286c565b8152508382815181106118fa576118fa612c4e565b6020026020010181905250808061191090612cac565b91505061182a565b505b50919050565b6119497f6c0757dc3e6b28b2580c03fd9e96c274acf4f99d91fbec9b418fa1d70604ff1c611cf2565b6119538135611cff565b61198c576040517f4b5215fe0000000000000000000000000000000000000000000000000000000081528135600482015260240161051d565b60208181013560009081527f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbdb90915260409020547f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbd69060ff16611a21576040517f9dbc0be90000000000000000000000000000000000000000000000000000000081526020830135600482015260240161051d565b6020808301356000908152600483018252604080822085358352909252205460ff16611a86576040517fc341c0c6000000000000000000000000000000000000000000000000000000008152823560048201526020830135602482015260440161051d565b611a9582356020840135611d66565b60405160208084013582528335917f7db04db666b7659097604d338544633c7185607ebe82d723bee1cc0d133564d79101610951565b611af47f6c0757dc3e6b28b2580c03fd9e96c274acf4f99d91fbec9b418fa1d70604ff1c611cf2565b7f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbd68054604080516020808402820181019092528281526000929091849190830182828015611b6157602002820191906000526020600020905b815481526020019060010190808311611b4d575b5050505050905060005b8151811015611cc45760005b836008016000848481518110611b8f57611b8f612c4e565b6020026020010151815260200190815260200160002080549050811015611c7757836009016000848481518110611bc857611bc8612c4e565b602002602001015181526020019081526020016000206000856008016000868681518110611bf857611bf8612c4e565b602002602001015181526020019081526020016000208381548110611c1f57611c1f612c4e565b600091825260208083206003909202909101548352820192909252604001902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905580611c6f81612cac565b915050611b77565b50826008016000838381518110611c9057611c90612c4e565b602002602001015181526020019081526020016000206000611cb291906127aa565b80611cbc81612cac565b915050611b6b565b506040517fd73de5a4cc1c0a670519195edfed79fadf88d2d85c304dfba6e2d90b1942da6490600090a15050565b611cfc8133612453565b50565b60008181527f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbdc6020526040812060010154819074010000000000000000000000000000000000000000900460ff166003811115611d5e57611d5e61286c565b141592915050565b60008181527f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbd960205260409020547f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbd69015611f2e5760005b6000838152600383016020526040902054811015611e8d5760008381526003830160205260409020805485919083908110611dfb57611dfb612c4e565b906000526020600020015403611e7b57600083815260038301602052604090208054611e2990600190612ce4565b81548110611e3957611e39612c4e565b90600052602060002001548260030160008581526020019081526020016000208281548110611e6a57611e6a612c4e565b600091825260209091200155611e8d565b80611e8581612cac565b915050611dbe565b5060008281526003820160205260409020805480611ead57611ead612cf7565b6000828152602080822083017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9081018390559092019092558382526004830181526040808320868452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055611f2e83836003611f33565b505050565b7f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbd66000805b6000858152600884016020526040902054811015612003578180611fef575060008581526008840160205260409020805487919083908110611f9c57611f9c612c4e565b906000526020600020906003020160000154148015611fef575060008581526008840160205260409020805486919083908110611fdb57611fdb612c4e565b906000526020600020906003020160010154145b915080611ffb81612cac565b915050611f58565b50806121075781600801600085815260200190815260200160002060405180606001604052808781526020018681526020018560038111156120475761204761286c565b905281546001818101845560009384526020938490208351600393840290910190815593830151848201556040830151600285018054949594919390927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00909216919084908111156120bb576120bb61286c565b0217905550505060008481526009830160209081526040808320888452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555b5050505050565b73ffffffffffffffffffffffffffffffffffffffff8116611cfc576040517f9fabe1c100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000805b7f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbd65481101561191a5760005b7f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbd660030160007f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbd68054859081106121e4576121e4612c4e565b90600052602060002001548152602001908152602001600020805490508110156122b757837f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbd660030160007f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbd680548690811061226257612262612c4e565b90600052602060002001548152602001908152602001600020828154811061228c5761228c612c4e565b9060005260206000200154036122a557600192506122b7565b806122af81612cac565b91505061218b565b50806122c281612cac565b91505061215f565b60008181527f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbdc602090815260408083207f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbdd8352908320805460018082018355918552929093208154600290930201918255828101805493830180547fffffffffffffffffffffffff0000000000000000000000000000000000000000811673ffffffffffffffffffffffffffffffffffffffff90961695861782559154929485949360ff740100000000000000000000000000000000000000009182900416937fffffffffffffffffffffff00000000000000000000000000000000000000000016909117908360038111156123e2576123e261286c565b0217905550600182810154908201805460ff75010000000000000000000000000000000000000000009384900416927fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff909116908360028111156124485761244861286c565b021790555050505050565b61245d82826124e8565b6124e45761246a81612541565b612475836020612560565b604051602001612486929190612dc3565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a000000000000000000000000000000000000000000000000000000000825261051d91600401612e44565b5050565b60008281527ff72ca309d9a3d085eca8abc0d0f1efd7a9682e454e7a123eb852dac23bbd2afa6020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff165b92915050565b606061253b73ffffffffffffffffffffffffffffffffffffffff831660145b6060600061256f836002612e95565b61257a906002612eac565b67ffffffffffffffff81111561259257612592612d70565b6040519080825280601f01601f1916602001820160405280156125bc576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106125f3576125f3612c4e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061265657612656612c4e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000612692846002612e95565b61269d906001612eac565b90505b600181111561273a577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106126de576126de612c4e565b1a60f81b8282815181106126f4576126f4612c4e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361273381612ebf565b90506126a0565b5083156127a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161051d565b9392505050565b5080546000825560030290600052602060002090810190611cfc91905b8082111561280b57600080825560018201556002810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690556003016127c7565b5090565b6020808252825182820181905260009190848201906040850190845b818110156128475783518352928401929184019160010161282b565b50909695505050505050565b60006020828403121561286557600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110611cfc57611cfc61286c565b600381106128bb576128bb61286c565b9052565b8051825273ffffffffffffffffffffffffffffffffffffffff602082015116602083015260408101516128f18161289b565b806040840152506060810151611f2e60608401826128ab565b6080810161253b82846128bf565b60006020828403121561191a57600080fd5b60006020828403121561293c57600080fd5b6127a38383612918565b600060a0828403121561191a57600080fd5b6000806020838503121561296b57600080fd5b823567ffffffffffffffff8082111561298357600080fd5b818501915085601f83011261299757600080fd5b8135818111156129a657600080fd5b8660206060830285010111156129bb57600080fd5b60209290920196919550909350505050565b600080604083850312156129e057600080fd5b50508035926020909101359150565b602081016129fc8361289b565b91905290565b602080825282518282018190526000919060409081850190868401855b82811015612a57578151805185528681015187860152850151612a418161289b565b8486015260609093019290850190600101612a1f565b5091979650505050505050565b60006040828403121561191a57600080fd5b600060408284031215612a8857600080fd5b6127a38383612a64565b6020808252825182820181905260009190848201906040850190845b8181101561284757612ac18385516128bf565b9284019260809290920191600101612aae565b60006060828403121561191a57600080fd5b602080825282518282018190526000919060409081850190868401855b82811015612a5757815180518552860151612b1d8161289b565b848701529284019290850190600101612b03565b803573ffffffffffffffffffffffffffffffffffffffff81168114612b5557600080fd5b919050565b600060208284031215612b6c57600080fd5b6127a382612b31565b60048110611cfc57600080fd5b600060208284031215612b9457600080fd5b81356127a381612b75565b803560038110612b5557600080fd5b600060208284031215612bc057600080fd5b6127a382612b9f565b823581526020808401359082015260c08101612be760408501612b31565b73ffffffffffffffffffffffffffffffffffffffff9081166040840152606085013590612c1382612b75565b612c1c8261289b565b816060850152612c2e60808701612b9f565b9150612c3d60808501836128ab565b80851660a085015250509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612cdd57612cdd612c7d565b5060010190565b8181038181111561253b5761253b612c7d565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b823581526020808401359082015260808101612d4460408501612b31565b73ffffffffffffffffffffffffffffffffffffffff908116604084015292909216606090910152919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60005b83811015612dba578181015183820152602001612da2565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612dfb816017850160208801612d9f565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351612e38816028840160208801612d9f565b01602801949350505050565b6020815260008251806020840152612e63816040850160208701612d9f565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b808202811582820484141761253b5761253b612c7d565b8082018082111561253b5761253b612c7d565b600081612ece57612ece612c7d565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fea26469706673582212201b9ef985fdf9a043acdc4061127bbbd3626f859d7b51c4d70b26b5f3121cfa4a64736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061011b5760003560e01c80635fc3e68b116100b2578063a2a7799e11610081578063bd32fd1f11610066578063bd32fd1f146102a5578063f0eab4f2146102c5578063f22cb874146102d857600080fd5b8063a2a7799e1461027f578063bb4731dd1461029257600080fd5b80635fc3e68b14610219578063679feb0514610239578063742f988f1461024c5780637944bac41461025f57600080fd5b80633d378de4116100ee5780633d378de4146101865780633f91c417146101995780634d441b34146101ac57806352709698146101bf57600080fd5b80630c846a9514610120578063146516df1461013e578063257c12101461015e57806336f95f2114610173575b600080fd5b6101286102e0565b604051610135919061280f565b60405180910390f35b61015161014c366004612853565b61035a565b604051610135919061290a565b61017161016c36600461292a565b61046a565b005b610128610181366004612853565b610613565b610171610194366004612946565b610694565b6101716101a736600461292a565b61095d565b6101716101ba366004612958565b610a66565b61020c6101cd3660046129cd565b60009182527f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbdf6020908152604080842092845291905290205460ff1690565b60405161013591906129ef565b61022c610227366004612853565b610c6d565b6040516101359190612a02565b610171610247366004612a76565b610d44565b61017161025a36600461292a565b610f65565b61027261026d366004612853565b611196565b6040516101359190612a92565b61017161028d366004612a76565b6112bd565b6101716102a0366004612ad4565b6114d3565b6102b86102b3366004612853565b61175e565b6040516101359190612ae6565b6101716102d3366004612a76565b611920565b610171611acb565b60607f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbd660010180548060200260200160405190810160405280929190818152602001828054801561035057602002820191906000526020600020905b81548152602001906001019080831161033c575b5050505050905090565b61038460408051608081018252600080825260208201819052909182019081526020016000905290565b60008281527f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbdc6020908152604091829020825160808101845281548152600182015473ffffffffffffffffffffffffffffffffffffffff8116938201939093529290919083019074010000000000000000000000000000000000000000900460ff1660038111156104175761041761286c565b60038111156104285761042861286c565b81526020016001820160159054906101000a900460ff1660028111156104505761045061286c565b60028111156104615761046161286c565b90525092915050565b6104937f6c0757dc3e6b28b2580c03fd9e96c274acf4f99d91fbec9b418fa1d70604ff1c611cf2565b803560009081527f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbdb60205260409020547f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbd69060ff16610526576040517f9dbc0be9000000000000000000000000000000000000000000000000000000008152823560048201526024015b60405180910390fd5b8135600090815260038201602052604090205415610573576040517fc1acfb9b0000000000000000000000000000000000000000000000000000000081528235600482015260240161051d565b81356000818152600283016020908152604080832080547fffffffffffffffffffffffff00000000000000000000000000000000000000001690556005850182529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905590519182527f11a9d1a77f76361ed131c19b1dc5758504c51dbde2e49fc973a0ef9577ad13d591015b60405180910390a15050565b60008181527f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbd9602090815260409182902080548351818402810184019094528084526060939283018282801561068857602002820191906000526020600020905b815481526020019060010190808311610674575b50505050509050919050565b6106bd7f6c0757dc3e6b28b2580c03fd9e96c274acf4f99d91fbec9b418fa1d70604ff1c611cf2565b6106c78135611cff565b15610701576040517fc39f80020000000000000000000000000000000000000000000000000000000081528135600482015260240161051d565b806020013560000361073f576040517f96b28c3700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805160808101825260208084013582527f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbd692908201906107879060608601908601612b5a565b73ffffffffffffffffffffffffffffffffffffffff1681526020016107b26080850160608601612b82565b60038111156107c3576107c361286c565b81526020016107d860a0850160808601612bae565b60028111156107e9576107e961286c565b905282356000908152600683016020908152604091829020835181559083015160018201805473ffffffffffffffffffffffffffffffffffffffff9092167fffffffffffffffffffffffff000000000000000000000000000000000000000083168117825593850151929390917fffffffffffffffffffffff0000000000000000000000000000000000000000001617740100000000000000000000000000000000000000008360038111156108a1576108a161286c565b021790555060608201516001820180547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff1675010000000000000000000000000000000000000000008360028111156108fc576108fc61286c565b02179055505050600180820180549182018155600090815260209020833591018190556040517f9b11f1505f73962adc35b003152bc612f9ce8e778b65b47270bc89458ee3d2cb906109519085903390612bc9565b60405180910390a25050565b6109867f6c0757dc3e6b28b2580c03fd9e96c274acf4f99d91fbec9b418fa1d70604ff1c611cf2565b6109908135611cff565b6109c9576040517f4b5215fe0000000000000000000000000000000000000000000000000000000081528135600482015260240161051d565b7f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbd660005b8154811015610a3557610a238360000135836000018381548110610a1357610a13612c4e565b9060005260206000200154611d66565b80610a2d81612cac565b9150506109ed565b506040518235907fa0b31ce9354d554d5ef35c6d3b5a465fe5f5839e27a552874f114634dc92995e90600090a25050565b610a8f7f6c0757dc3e6b28b2580c03fd9e96c274acf4f99d91fbec9b418fa1d70604ff1c611cf2565b7f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbd660005b82811015610c3e57610adf848483818110610ad057610ad0612c4e565b90506060020160000135611cff565b610b3457838382818110610af557610af5612c4e565b905060600201600001356040517f4b5215fe00000000000000000000000000000000000000000000000000000000815260040161051d91815260200190565b816005016000858584818110610b4c57610b4c612c4e565b60206060909102929092018201358352508101919091526040016000205460ff16610bc257838382818110610b8357610b83612c4e565b905060600201602001356040517f9dbc0be900000000000000000000000000000000000000000000000000000000815260040161051d91815260200190565b610c2c848483818110610bd757610bd7612c4e565b90506060020160000135858584818110610bf357610bf3612c4e565b90506060020160200135868685818110610c0f57610c0f612c4e565b9050606002016040016020810190610c279190612b82565b611f33565b80610c3681612cac565b915050610ab3565b506040517f707187addb456130158bf357fd5fd416e8b077de0320933bbdf40fc42a5bae7f90600090a1505050565b60008181527f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbde60209081526040808320805482518185028101850190935280835260609492939192909184015b82821015610d39578382906000526020600020906003020160405180606001604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff166003811115610d1557610d1561286c565b6003811115610d2657610d2661286c565b8152505081526020019060010190610cba565b505050509050919050565b610d6d7f6c0757dc3e6b28b2580c03fd9e96c274acf4f99d91fbec9b418fa1d70604ff1c611cf2565b8035600003610da8576040517f1721c97600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610dc0610dbb6040830160208401612b5a565b61210e565b803560009081527f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbdb60205260409020547f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbd69060ff1615610e4f576040517f92ffa31d0000000000000000000000000000000000000000000000000000000081528235600482015260240161051d565b8135600090815260058201602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055610e9c918401908401612b5a565b82356000818152600284016020908152604080832080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff96909616959095179094558454600181018655858352918190209091018290557fd34413f9daf08c09e55b3ad5e2f7f18249f3ff26c061cb904f99597dd14ad53e92610f3b91908601908601612b5a565b6040805192835273ffffffffffffffffffffffffffffffffffffffff909116602083015201610607565b610f8e7f6c0757dc3e6b28b2580c03fd9e96c274acf4f99d91fbec9b418fa1d70604ff1c611cf2565b610f988135611cff565b610fd1576040517f4b5215fe0000000000000000000000000000000000000000000000000000000081528135600482015260240161051d565b610fdb813561215b565b15611015576040517fa551148c0000000000000000000000000000000000000000000000000000000081528135600482015260240161051d565b7f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbd661104082356122ca565b60005b60018201548110156110de57826000013582600101828154811061106957611069612c4e565b9060005260206000200154036110cc5760018083018054909161108b91612ce4565b8154811061109b5761109b612c4e565b90600052602060002001548260010182815481106110bb576110bb612c4e565b6000918252602090912001556110de565b806110d681612cac565b915050611043565b50806001018054806110f2576110f2612cf7565b600082815260208082207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff908401810183905590920190925583358083526006840182526040808420938455600190930180547fffffffffffffffffffff0000000000000000000000000000000000000000000016905591513381527f9820d3c0902e565389fef3be28f870ec956f349a35cb94c9ae0d2e58e57be0de9101610951565b60008181527f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbdd60209081526040808320805482518185028101850190935280835260609492939192909184015b82821015610d39576000848152602090819020604080516080810182526002860290920180548352600181015473ffffffffffffffffffffffffffffffffffffffff81169484019490945291929083019074010000000000000000000000000000000000000000900460ff1660038111156112605761126061286c565b60038111156112715761127161286c565b81526020016001820160159054906101000a900460ff1660028111156112995761129961286c565b60028111156112aa576112aa61286c565b81525050815260200190600101906111e3565b6112e67f6c0757dc3e6b28b2580c03fd9e96c274acf4f99d91fbec9b418fa1d70604ff1c611cf2565b6112f08135611cff565b611329576040517f4b5215fe0000000000000000000000000000000000000000000000000000000081528135600482015260240161051d565b60208181013560009081527f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbdb90915260409020547f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbd69060ff166113be576040517f9dbc0be90000000000000000000000000000000000000000000000000000000081526020830135600482015260240161051d565b6020808301356000908152600483018252604080822085358352909252205460ff1615611424576040517f58aa741e000000000000000000000000000000000000000000000000000000008152823560048201526020830135602482015260440161051d565b60208083013560008181526004840183526040808220863580845290855281832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001908117909155848452600387018652918320805480840182559084529490922090930181905561149d92909190611f33565b60405160208084013582528335917f6d54e8fb9f0a9a81b723ec0b146c8a76f26da65a9899a8bdb1f8843194a2ba629101610951565b6114fc7f6c0757dc3e6b28b2580c03fd9e96c274acf4f99d91fbec9b418fa1d70604ff1c611cf2565b6115068135611cff565b61153f576040517f4b5215fe0000000000000000000000000000000000000000000000000000000081528135600482015260240161051d565b806020013560000361157d576040517f96b28c3700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbd66115a882356122ca565b813560009081526006820160209081526040918290209084013590556115d49060608401908401612b5a565b82356000908152600683016020526040812060010180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff93909316929092179091555b81548110156117275760005b82600301600084600001848154811061165557611655612c4e565b906000526020600020015481526020019081526020016000208054905081101561171457836000013583600301600085600001858154811061169957611699612c4e565b9060005260206000200154815260200190815260200160002082815481106116c3576116c3612c4e565b9060005260206000200154036117025761170284600001358460000184815481106116f0576116f0612c4e565b90600052602060002001546002611f33565b8061170c81612cac565b91505061163a565b508061171f81612cac565b91505061162e565b5081600001357ffc6ae11d87bd961aff738c22c1089ae358d192107f1552fc4900554b996c2c3e8333604051610951929190612d26565b60008181527f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbd960205260409020546060907f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbd6901561191a57600083815260038201602052604090205467ffffffffffffffff8111156117df576117df612d70565b60405190808252806020026020018201604052801561182457816020015b60408051808201909152600080825260208201528152602001906001900390816117fd5790505b50915060005b6000848152600383016020526040902054811015611918576040518060400160405280836003016000878152602001908152602001600020838154811061187357611873612c4e565b6000918252602080832090910154835287825260098601815260408083206003880183529083208054949092019390929190869081106118b5576118b5612c4e565b6000918252602080832090910154835282019290925260400190205460ff1660038111156118e5576118e561286c565b8152508382815181106118fa576118fa612c4e565b6020026020010181905250808061191090612cac565b91505061182a565b505b50919050565b6119497f6c0757dc3e6b28b2580c03fd9e96c274acf4f99d91fbec9b418fa1d70604ff1c611cf2565b6119538135611cff565b61198c576040517f4b5215fe0000000000000000000000000000000000000000000000000000000081528135600482015260240161051d565b60208181013560009081527f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbdb90915260409020547f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbd69060ff16611a21576040517f9dbc0be90000000000000000000000000000000000000000000000000000000081526020830135600482015260240161051d565b6020808301356000908152600483018252604080822085358352909252205460ff16611a86576040517fc341c0c6000000000000000000000000000000000000000000000000000000008152823560048201526020830135602482015260440161051d565b611a9582356020840135611d66565b60405160208084013582528335917f7db04db666b7659097604d338544633c7185607ebe82d723bee1cc0d133564d79101610951565b611af47f6c0757dc3e6b28b2580c03fd9e96c274acf4f99d91fbec9b418fa1d70604ff1c611cf2565b7f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbd68054604080516020808402820181019092528281526000929091849190830182828015611b6157602002820191906000526020600020905b815481526020019060010190808311611b4d575b5050505050905060005b8151811015611cc45760005b836008016000848481518110611b8f57611b8f612c4e565b6020026020010151815260200190815260200160002080549050811015611c7757836009016000848481518110611bc857611bc8612c4e565b602002602001015181526020019081526020016000206000856008016000868681518110611bf857611bf8612c4e565b602002602001015181526020019081526020016000208381548110611c1f57611c1f612c4e565b600091825260208083206003909202909101548352820192909252604001902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905580611c6f81612cac565b915050611b77565b50826008016000838381518110611c9057611c90612c4e565b602002602001015181526020019081526020016000206000611cb291906127aa565b80611cbc81612cac565b915050611b6b565b506040517fd73de5a4cc1c0a670519195edfed79fadf88d2d85c304dfba6e2d90b1942da6490600090a15050565b611cfc8133612453565b50565b60008181527f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbdc6020526040812060010154819074010000000000000000000000000000000000000000900460ff166003811115611d5e57611d5e61286c565b141592915050565b60008181527f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbd960205260409020547f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbd69015611f2e5760005b6000838152600383016020526040902054811015611e8d5760008381526003830160205260409020805485919083908110611dfb57611dfb612c4e565b906000526020600020015403611e7b57600083815260038301602052604090208054611e2990600190612ce4565b81548110611e3957611e39612c4e565b90600052602060002001548260030160008581526020019081526020016000208281548110611e6a57611e6a612c4e565b600091825260209091200155611e8d565b80611e8581612cac565b915050611dbe565b5060008281526003820160205260409020805480611ead57611ead612cf7565b6000828152602080822083017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9081018390559092019092558382526004830181526040808320868452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055611f2e83836003611f33565b505050565b7f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbd66000805b6000858152600884016020526040902054811015612003578180611fef575060008581526008840160205260409020805487919083908110611f9c57611f9c612c4e565b906000526020600020906003020160000154148015611fef575060008581526008840160205260409020805486919083908110611fdb57611fdb612c4e565b906000526020600020906003020160010154145b915080611ffb81612cac565b915050611f58565b50806121075781600801600085815260200190815260200160002060405180606001604052808781526020018681526020018560038111156120475761204761286c565b905281546001818101845560009384526020938490208351600393840290910190815593830151848201556040830151600285018054949594919390927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00909216919084908111156120bb576120bb61286c565b0217905550505060008481526009830160209081526040808320888452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555b5050505050565b73ffffffffffffffffffffffffffffffffffffffff8116611cfc576040517f9fabe1c100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000805b7f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbd65481101561191a5760005b7f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbd660030160007f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbd68054859081106121e4576121e4612c4e565b90600052602060002001548152602001908152602001600020805490508110156122b757837f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbd660030160007f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbd680548690811061226257612262612c4e565b90600052602060002001548152602001908152602001600020828154811061228c5761228c612c4e565b9060005260206000200154036122a557600192506122b7565b806122af81612cac565b91505061218b565b50806122c281612cac565b91505061215f565b60008181527f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbdc602090815260408083207f9c0d1aa28706b015335cfcad9f64557dc37cf2a3cb8f83623896252dbb48dbdd8352908320805460018082018355918552929093208154600290930201918255828101805493830180547fffffffffffffffffffffffff0000000000000000000000000000000000000000811673ffffffffffffffffffffffffffffffffffffffff90961695861782559154929485949360ff740100000000000000000000000000000000000000009182900416937fffffffffffffffffffffff00000000000000000000000000000000000000000016909117908360038111156123e2576123e261286c565b0217905550600182810154908201805460ff75010000000000000000000000000000000000000000009384900416927fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff909116908360028111156124485761244861286c565b021790555050505050565b61245d82826124e8565b6124e45761246a81612541565b612475836020612560565b604051602001612486929190612dc3565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a000000000000000000000000000000000000000000000000000000000825261051d91600401612e44565b5050565b60008281527ff72ca309d9a3d085eca8abc0d0f1efd7a9682e454e7a123eb852dac23bbd2afa6020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff165b92915050565b606061253b73ffffffffffffffffffffffffffffffffffffffff831660145b6060600061256f836002612e95565b61257a906002612eac565b67ffffffffffffffff81111561259257612592612d70565b6040519080825280601f01601f1916602001820160405280156125bc576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106125f3576125f3612c4e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061265657612656612c4e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000612692846002612e95565b61269d906001612eac565b90505b600181111561273a577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106126de576126de612c4e565b1a60f81b8282815181106126f4576126f4612c4e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361273381612ebf565b90506126a0565b5083156127a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161051d565b9392505050565b5080546000825560030290600052602060002090810190611cfc91905b8082111561280b57600080825560018201556002810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690556003016127c7565b5090565b6020808252825182820181905260009190848201906040850190845b818110156128475783518352928401929184019160010161282b565b50909695505050505050565b60006020828403121561286557600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110611cfc57611cfc61286c565b600381106128bb576128bb61286c565b9052565b8051825273ffffffffffffffffffffffffffffffffffffffff602082015116602083015260408101516128f18161289b565b806040840152506060810151611f2e60608401826128ab565b6080810161253b82846128bf565b60006020828403121561191a57600080fd5b60006020828403121561293c57600080fd5b6127a38383612918565b600060a0828403121561191a57600080fd5b6000806020838503121561296b57600080fd5b823567ffffffffffffffff8082111561298357600080fd5b818501915085601f83011261299757600080fd5b8135818111156129a657600080fd5b8660206060830285010111156129bb57600080fd5b60209290920196919550909350505050565b600080604083850312156129e057600080fd5b50508035926020909101359150565b602081016129fc8361289b565b91905290565b602080825282518282018190526000919060409081850190868401855b82811015612a57578151805185528681015187860152850151612a418161289b565b8486015260609093019290850190600101612a1f565b5091979650505050505050565b60006040828403121561191a57600080fd5b600060408284031215612a8857600080fd5b6127a38383612a64565b6020808252825182820181905260009190848201906040850190845b8181101561284757612ac18385516128bf565b9284019260809290920191600101612aae565b60006060828403121561191a57600080fd5b602080825282518282018190526000919060409081850190868401855b82811015612a5757815180518552860151612b1d8161289b565b848701529284019290850190600101612b03565b803573ffffffffffffffffffffffffffffffffffffffff81168114612b5557600080fd5b919050565b600060208284031215612b6c57600080fd5b6127a382612b31565b60048110611cfc57600080fd5b600060208284031215612b9457600080fd5b81356127a381612b75565b803560038110612b5557600080fd5b600060208284031215612bc057600080fd5b6127a382612b9f565b823581526020808401359082015260c08101612be760408501612b31565b73ffffffffffffffffffffffffffffffffffffffff9081166040840152606085013590612c1382612b75565b612c1c8261289b565b816060850152612c2e60808701612b9f565b9150612c3d60808501836128ab565b80851660a085015250509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612cdd57612cdd612c7d565b5060010190565b8181038181111561253b5761253b612c7d565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b823581526020808401359082015260808101612d4460408501612b31565b73ffffffffffffffffffffffffffffffffffffffff908116604084015292909216606090910152919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60005b83811015612dba578181015183820152602001612da2565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612dfb816017850160208801612d9f565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351612e38816028840160208801612d9f565b01602801949350505050565b6020815260008251806020840152612e63816040850160208701612d9f565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b808202811582820484141761253b5761253b612c7d565b8082018082111561253b5761253b612c7d565b600081612ece57612ece612c7d565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fea26469706673582212201b9ef985fdf9a043acdc4061127bbbd3626f859d7b51c4d70b26b5f3121cfa4a64736f6c63430008130033",
  "devdoc": {
    "author": "Daniel <danieldegendev@gmail.com>",
    "custom:version": "1.0.0",
    "kind": "dev",
    "methods": {
      "addChain((uint256,address))": {
        "details": "the target address is the desired contract address receiving the fee config information",
        "params": {
          "_params": "consists of the chain id and target addess"
        }
      },
      "addFeeConfig((bytes32,uint256,address,uint8,uint8))": {
        "details": "will fail if a config id is already existing or the fee value is zero",
        "params": {
          "_params": "see {contracts/diamond/helpers/Structs.sol#AddFeeConfigParams}"
        }
      },
      "assignFeeConfigToChain((bytes32,uint256))": {
        "details": "after the assignment, the fee config is added to a queue with an add action",
        "params": {
          "_params": "see {contracts/diamond/helpers/Structs.sol#AssignFeeConfigToChainParams}"
        }
      },
      "clearQueue()": {
        "details": "the deployment state is set to pending while doing"
      },
      "getArchivedFeeConfigs(bytes32)": {
        "params": {
          "_id": "fee config id"
        },
        "returns": {
          "_feeConfig": "array of fee configs"
        }
      },
      "getDeployStatesForChain(uint256)": {
        "params": {
          "_chainId": "chain id"
        },
        "returns": {
          "_states": "all deployment states of config ids for a specific chain"
        }
      },
      "getFeeConfig(bytes32)": {
        "params": {
          "_id": "fee config id"
        },
        "returns": {
          "_feeConfig": "fee config"
        }
      },
      "getFeeConfigDeployState(uint256,bytes32)": {
        "params": {
          "_chainId": "chain id",
          "_id": "fee config id"
        },
        "returns": {
          "_state": "deployment state of a fee config"
        }
      },
      "getFeeConfigIds()": {
        "returns": {
          "_feeConfigIds": "returns an arrayf of fee config ids"
        }
      },
      "getFeeConfigsByChain(uint256)": {
        "params": {
          "_chainId": "chain id"
        },
        "returns": {
          "_feeConfigs": "array of fee config ids"
        }
      },
      "getFeeSyncQueueByChain(uint256)": {
        "params": {
          "_chainId": "chain id"
        },
        "returns": {
          "_feeSyncQueue": "returns an array of queue items. See {contracts/diamond/helpers/Structs.sol#FeeSyncQueue}"
        }
      },
      "queueUpManually((bytes32,uint256,uint8)[])": {
        "params": {
          "_syncQueue": "list of FeeSyncQueue data"
        }
      },
      "removeChain((uint256))": {
        "params": {
          "_params": "consists only of the chain id"
        }
      },
      "removeFeeConfig((bytes32))": {
        "params": {
          "_params": "params consist of a fee id that should be removed"
        }
      },
      "unassignFeeConfigFromAllChains((bytes32))": {
        "details": "it will iteration through all chains and removes the connections. The main task will be done in {_decoupleFeeConfigFromChain}",
        "params": {
          "_params": "see {contracts/diamond/helpers/Structs.sol#UnassignFeeConfigFromAllChainsParams}"
        }
      },
      "unassignFeeConfigFromChain((bytes32,uint256))": {
        "details": "the main task will be done in {_decoupleFeeConfigFromChain}",
        "params": {
          "_params": "see {contracts/diamond/helpers/Structs.sol#UnassignFeeConfigFromChainParams}"
        }
      },
      "updateFeeConfig((bytes32,uint256,address))": {
        "details": "if you need more data changed than _params in providing, remove and add a fee",
        "params": {
          "_params": "see {contracts/diamond/helpers/Structs.sol#UpdateFeeConfigParams}"
        }
      }
    },
    "title": "Fee Manager Facet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addChain((uint256,address))": {
        "notice": "Adds a corresponding chain"
      },
      "addFeeConfig((bytes32,uint256,address,uint8,uint8))": {
        "notice": "Adds a fee config"
      },
      "assignFeeConfigToChain((bytes32,uint256))": {
        "notice": "Adds a fee config to chain connection"
      },
      "clearQueue()": {
        "notice": "Clears the queue and removes all current jobs"
      },
      "getArchivedFeeConfigs(bytes32)": {
        "notice": "Gets all previous fee config states by fee config id"
      },
      "getDeployStatesForChain(uint256)": {
        "notice": "Gets the current deployment state of all fee config ids from a given chain id"
      },
      "getFeeConfig(bytes32)": {
        "notice": "Gets the fee config by fee config id"
      },
      "getFeeConfigDeployState(uint256,bytes32)": {
        "notice": "Gets the current deployment state of a fee config id"
      },
      "getFeeConfigIds()": {
        "notice": "Gets the fee config ids"
      },
      "getFeeConfigsByChain(uint256)": {
        "notice": "Gets all fee config ids by chain id"
      },
      "getFeeSyncQueueByChain(uint256)": {
        "notice": "Gets the current queue for a chain"
      },
      "queueUpManually((bytes32,uint256,uint8)[])": {
        "notice": "Queues up fee configs manually"
      },
      "removeChain((uint256))": {
        "notice": "Removes a corresponding chain"
      },
      "removeFeeConfig((bytes32))": {
        "notice": "Removes a fee config"
      },
      "unassignFeeConfigFromAllChains((bytes32))": {
        "notice": "Removes all existing fee config to chain connections"
      },
      "unassignFeeConfigFromChain((bytes32,uint256))": {
        "notice": "Removes a fee config to chain connection"
      },
      "updateFeeConfig((bytes32,uint256,address))": {
        "notice": "Updates a fee config partially"
      }
    },
    "notice": "It's responsible for managing fees and its state of deployment. This contract supposed to be deployed only on the home chain, not on the target chain.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}